datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

// My Database

//** AUTH **//

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

//** BANKING **//

model AccountBanking {
  userId        String
  accountBankId String
  bankingId     String
  bankName      String
  iban          String?
  address1      String?
  address2      String?
  city          String?
  cdoePostal    Int?
  country       String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [bankingId], references: [id], onDelete: Cascade)

  @@id([bankingId, bankName])
}

// enum statusBank {
//   {
//     "PENDING",
//     "VALIDED",
//     "CANCELED"
//   }}

//** FIDELITY **//
//** IDENTITY **//

// My application

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  username      String?   @unique
  role          UserRole  @default(USER)
  bio           String?
  link          String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  followers Follow[]  @relation("follower")
  followeds Follow[]  @relation("followed")
  posts     Post[]
  likes     Like[]
  accounts  Account[]
  sessions  Session[]

  accountBank AccountBanking[]

  // Optional for WebAuthn support
  Authenticator Authenticator[]
}

model Post {
  id       String   @id @default(cuid())
  content  String
  parentId String?
  userId   String
  createAt DateTime @default(now())

  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes   Like[]
  replies Post[] @relation("comments")
  parent  Post?  @relation("comments", fields: [parentId], references: [id], onDelete: Cascade)
}

model Like {
  id       String   @id @default(cuid())
  userId   String
  postId   String
  createAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  createAt    DateTime @default(now())

  follower User @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  followed User @relation("followed", fields: [followingId], references: [id], onDelete: Cascade)
}
