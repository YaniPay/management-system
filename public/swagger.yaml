openapi: '3.0.1'
info: 
  version: 24.07.25
  title: Treezor API
  description: Official endpoint documentation for Treezor.
  contact: 
    name: Treezor
    url: https://treezor.com
servers:
  - url: https://yourcompany.sandbox.treezor.co
    description: Sandbox environment
paths:
  /core-connect/account-details/{walletId}/raw:
    get:
      tags:
        - Account Details
      summary: Get JSON Account Details
      description: | 
        Retrieve a Wallet RIB and IBAN in json format.

        This endpoint requires per-session [SCA](/guide/strong-customer-authentication/introduction.html).
      operationId: getRawWalletAccountDetail
      parameters:
        - name: walletId
          in: path
          description: The unique identifier of the Wallet.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  bic:
                    type: string
                    description: |
                      The [BIC](/guide/overview/glossary.html#bank-identifier-code-bic) of the account.
                  iban:
                    type: string
                    description: |
                      The [IBAN](/guide/wallets/iban.html#virtual-ibans) of the account.
                  title:
                    type: string
                    description: |
                      The title of the user who owns the account.
                  firstname:
                    type: string
                    description: |
                      The first name of the user who owns the account.
                  lastname:
                    type: string
                    description: |
                      The last name of the user who owns the account.
                  postcode:
                    type: string
                    description: |
                      The postal code of the address of the user who owns the account.
                  city:
                    type: string
                    description: |
                      The city of the address of the user who owns the account.
                  address1:
                    type: string
                    description: |
                      The address of the user who owns the account.
                  address2:
                    type: string
                    description: |
                      The second line of the address of the user who owns the account.
                  countryName:
                    type: string
                    description: |
                      The country of the address of the user who owns the account.
                  treezorAddress:
                    type: object
        '400':
          $ref: '#/components/responses/BadRequestError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt:
            - read_only
            - read_write
  /core-connect/account-details/{walletId}/computed:
    get:
      tags:
        - Account Details
      summary: Get PDF Account Details
      description: | 
        Retrieve a Wallet RIB and IBAN in PDF format.

        This endpoint requires per-session [SCA](/guide/strong-customer-authentication/introduction.html).
      operationId: getComputedWalletAccountDetail
      parameters:
        - name: walletId
          in: path
          description: The unique identifier of the Wallet.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  link:
                    type: string
                    description: The URL to download the PDF file.
                  expireIn:
                    type: integer
                    description: The time after which the download link expires (in seconds).
        '400':
          $ref: '#/components/responses/BadRequestError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt:
          - read_only
          - read_write
  /oauth/token:
    post:
      tags:
        - Authentication
      summary: The token endpoint of the authentication server
      operationId: putAuth
      description: |
        This endpoint is used to exchange authorization codes or refresh tokens for access tokens.
        The response will include the access token and optionally a refresh token, along with their expiration details.
        
        You may read more about [OAuth2](https://oauth.net/2/).
      security: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              oneOf:
                - type: object
                  properties:
                    grant_type:
                      type: string
                      default: client_credentials
                      description: |
                        MUST BE "client_credentials" value for client credential flow.
                    client_id:
                      type: string
                    client_secret:
                      type: string
                    scope:
                      type: string
                      description: space separated
                - type: object
                  properties:
                    grant_type:
                      type: string
                      default: password
                      description: MUST BE "password" value for password credential flow
                    client_id:
                      type: string
                    client_secret:
                      type: string
                    scope:
                      type: string
                      description: space separated
                    username:
                      type: string
                    password:
                      type: string
                      description: User password
                - type: object
                  properties:
                    grant_type:
                      type: string
                      default: refresh_token
                      description: MUST BE "refresh_token" value for refresh token flow
                    client_id:
                      type: string
                    client_secret:
                      type: string
                    scope:
                      type: string
                      description: space separated
                    refresh_token:
                      type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                oneOf:
                  - type: object
                    properties:
                      token_type:
                        type: string
                        default: Bearer
                        description: |
                          This value must be passed in the "Authorization" header of your API requests as follows: "Authorization: Bearer <token>" (with a space between "Bearer" and the token value).
                      expires_in:
                        type: integer
                        default: 3600
                      access_token:
                        type: string
                        description: JWT token
                  - type: object
                    properties:
                      token_type:
                        type: string
                        default: Bearer
                        description: |
                          This value must be passed in the "Authorization" header of your API requests as follows: "Authorization: Bearer <token>" (with a space between "Bearer" and the token value).
                      expires_in:
                        type: integer
                        default: 3600
                      access_token:
                        type: string
                        description: JWT token
                      refresh_token:
                        type: string
                        description: |
                          This value must be passed in the "Authorization" header of your API requests as follows: "Authorization: Bearer <token>" (with a space between "Bearer" and the token value).
                  - type: object
                    properties:
                      token_type:
                        type: string
                        default: Bearer
                        description: |
                          This value must be passed in the "Authorization" header of your API requests as follows: "Authorization: Bearer <token>" (with a space between "Bearer" and the token value).
                      expires_in:
                        type: integer
                        default: 3600
                      access_token:
                        type: string
                        description: JWT token
                      refresh_token:
                        type: string
                        description: |
                          A refresh token to regenerate a JWT token without sending all of information request at the first request on password grant.
        '400':
          $ref: '#/components/responses/BadRequestError'
        default:
          $ref: '#/components/responses/DefaultError'
  /core-connect/balance/{walletId}/balance:
    get:
      tags:
          - Balances
      summary: Get Wallet Balance history
      description: Retrieve the Balance History of a Wallet.
      operationId: getWalletBalanceHistory
      parameters:
        - name: walletId
          in: path
          description: The unique identifier of the Wallet.
          required: true
          schema:
            type: integer
        - name: dateFrom
          in: query
          description: Start date in RFC 3339 format
          required: false
          schema:
            type: string
        - name: dateTo
          in: query
          description: End date in RFC-3339 format
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        currentBalance:
                          type: number
                        authorizedBalance:
                          type: number
                        currency:
                          type: string
        '400':
          $ref: '#/components/responses/BadRequestError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt:
            - read
  /core-connect/cardtransactions:
    get:
      tags:
        - Card Transactions
      summary: Get all Card Transactions
      operationId: getCoCardTransactions
      description: Retrieve all the Card Transactions. This is the preferred request for a dashboard-oriented approach. You shouldn't expose this endpoint to your end users.
      parameters:
        - name: cursor
          in: query
          description: Pagination cursor, if you don't pass a cursor, result will start at the first page.
          required: false
          schema:
            type: string
        - name: createdDateFrom
          in: query
          required: false
          schema:
            type: string
            format: date-time
            example: "2020-09-22T10:00:00-05:00+01:00"
        - name: createdDateTo
          in: query
          required: false
          schema:
            type: string
            format: date-time
            example: "2020-09-22T10:00:00-05:00+01:00"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  cardTransactions:
                    type: array
                    items:
                      type: object
                      properties:
                        cardtransactionId:
                          type: string
                        cardId:
                          type: string
                        walletId:
                          type: string
                        acquirerId:
                          type: string
                        walletCurrency:
                          type: string
                        merchantId:
                          type: string
                        merchantName:
                          type: string
                        merchantCity:
                          type: string
                        merchantCountry:
                          type: string
                        mccCode:
                          type: string
                        paymentLocalTime:
                          type: string
                        publicToken:
                          type: string
                        paymentAmount:
                          type: string
                        paymentCurrency:
                          type: string
                        fees:
                          type: string
                        paymentCountry:
                          type: string
                        paymentId:
                          type: string
                        paymentStatus:
                          type: string
                        paymentLocalAmount:
                          type: string
                        posCardholderPresence:
                          type: string
                        posPostcode:
                          type: string
                        posCountry:
                          type: string
                        posTerminalId:
                          type: string
                        posCardPresence:
                          type: string
                        panEntryMethod:
                          type: string
                        authorizationNote:
                          type: string
                        authorizationResponseCode:
                          type: string
                        authorizationIssuerId:
                          type: string
                        authorizationIssuerTime:
                          type: string
                        authorizationMti:
                          type: string
                        authorizedBalance:
                          type: string
                        limitAtmYear:
                          type: string
                        limitAtmMonth:
                          type: string
                        limitAtmWeek:
                          type: string
                        limitAtmDay:
                          type: string
                        limitAtmAll:
                          type: string
                        limitPaymentYear:
                          type: string
                        limitPaymentMonth:
                          type: string
                        limitPaymentWeek:
                          type: string
                        limitPaymentDay:
                          type: string
                        limitPaymentAll:
                          type: string
                        totalLimitAtmYear:
                          type: string
                        totalLimitAtmMonth:
                          type: string
                        totalLimitAtmWeek:
                          type: string
                        totalLimitAtmDay:
                          type: string
                        totalLimitAtmAll:
                          type: string
                        totalLimitPaymentYear:
                          type: string
                        totalLimitPaymentMonth:
                          type: string
                        totalLimitPaymentWeek:
                          type: string
                        totalLimitPaymentDay:
                          type: string
                        totalLimitPaymentAll:
                          type: string
                        cardDigitalizationExternalId:
                          type: string
                  cursor:
                    type: object
                    properties:
                      current:
                        type: string
                      prev:
                        type: string
                      next:
                        type: string
        '400':
          $ref: '#/components/responses/BadRequestError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt: []
  /core-connect/cardtransactions/{cardId}:
    get:
      tags:
        - Card Transactions
      summary: Get Card Transactions
      operationId: getCoCardTransaction
      description: Retrieve the Card Transactions for a specific card. This request is preferred for a dashboard-oriented usage. You shouldn't expose this endpoint to your end users.
      parameters:
        - name: cardId
          in: path
          required: true
          schema:
            type: string
        - name: cursor
          in: query
          required: false
          schema:
            type: string
        - name: createdDateFrom
          in: query
          required: false
          schema:
            type: string
            format: date-time
            example: "2020-09-22T10:00:00-05:00+01:00"
        - name: createdDateTo
          in: query
          required: false
          schema:
            type: string
            format: date-time
            example: "2020-09-22T10:00:00-05:00+01:00"
        - name: amountFrom
          in: query
          schema:
            type: number
            example: 10.25
        - name: amountTo
          in: query
          schema:
            type: number
            example: 10.25
        - name: paymentStatus
          in: query
          schema:
            type: array
            items:
              type: string
              enum:
                - A
                - R
                - S
                - C
                - I
                - V
                - M
        - name: paymentType
          in: query
          schema:
            type: array
            items:
              type: string
              enum:
                - Withdrawal
                - Payment
        - name: merchantId
          in: query
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  cardTransactions:
                    type: array
                    items:
                      type: object
                      properties:
                        cardtransactionId:
                          type: string
                        cardId:
                          type: string
                        walletId:
                          type: string
                        acquirerId:
                          type: string
                        walletCurrency:
                          type: string
                        merchantId:
                          type: string
                        merchantName:
                          type: string
                        merchantCity:
                          type: string
                        merchantCountry:
                          type: string
                        mccCode:
                          type: string
                        paymentLocalTime:
                          type: string
                        publicToken:
                          type: string
                        paymentAmount:
                          type: string
                        paymentCurrency:
                          type: string
                        fees:
                          type: string
                        paymentCountry:
                          type: string
                        paymentId:
                          type: string
                        paymentStatus:
                          type: string
                        paymentLocalAmount:
                          type: string
                        posCardholderPresence:
                          type: string
                        posPostcode:
                          type: string
                        posCountry:
                          type: string
                        posTerminalId:
                          type: string
                        posCardPresence:
                          type: string
                        panEntryMethod:
                          type: string
                        authorizationNote:
                          type: string
                        authorizationResponseCode:
                          type: string
                        authorizationIssuerId:
                          type: string
                        authorizationIssuerTime:
                          type: string
                        authorizationMti:
                          type: string
                        authorizedBalance:
                          type: string
                        limitAtmYear:
                          type: string
                        limitAtmMonth:
                          type: string
                        limitAtmWeek:
                          type: string
                        limitAtmDay:
                          type: string
                        limitAtmAll:
                          type: string
                        limitPaymentYear:
                          type: string
                        limitPaymentMonth:
                          type: string
                        limitPaymentWeek:
                          type: string
                        limitPaymentDay:
                          type: string
                        limitPaymentAll:
                          type: string
                        totalLimitAtmYear:
                          type: string
                        totalLimitAtmMonth:
                          type: string
                        totalLimitAtmWeek:
                          type: string
                        totalLimitAtmDay:
                          type: string
                        totalLimitAtmAll:
                          type: string
                        totalLimitPaymentYear:
                          type: string
                        totalLimitPaymentMonth:
                          type: string
                        totalLimitPaymentWeek:
                          type: string
                        totalLimitPaymentDay:
                          type: string
                        totalLimitPaymentAll:
                          type: string
                        cardDigitalizationExternalId:
                          type: string
                  cursor:
                    type: object
                    properties:
                      current:
                        type: string
                      prev:
                        type: string
                      next:
                        type: string
        '400':
          $ref: '#/components/responses/BadRequestError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt: []
  /core-connect/support-user:
    get:
      tags:
        - Support Users
      summary: Get all Support Users
      description: Retrieve all the Support Users.
      operationId: getAllSupportUser
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SupportUserObject'
        '400':
          $ref: '#/components/responses/BadRequestError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt:
            - support_user_management
            # verified scope
    post:
      tags:
        - Support Users
      summary: Create Support User
      description: Create a new Support User.
      operationId: createSupportUser
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: The identifier the user will use for logging in to the Dashboard or your own backoffice. 
                password:
                  type: string
                  description: The password the user will use for logging in to the Dashboard or your own backoffice. Expected in cleartext.
                scopes:
                  type: array
                  description: |
                    Set of permissions for your Support User. Learn more in the [Scope & Permissions](/guide/api-basics/scopes) article.
                  items:
                    type: string
                    enum: ["read_all","read_write","read_only","admin","support_user_management","legal"]
                samlKey:
                  type: string
                  description: | 
                    Optional key to link automatically a Support User to a [Dashboard](/guide/dashboard/introduction) OAuth2 client.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SupportUserObject'
        '400':
          $ref: '#/components/responses/BadRequestError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt:
            - support_user_management
            # verified scope
  /core-connect/support-user/{supportUserId}:
    get:
      tags:
        - Support Users
      summary: Get Support User
      description: Retrieve a Support User based on its `id`.
      operationId: findOneSupportUserById
      parameters:
        - name: supportUserId
          in: path
          description: The unique identifier of the Support User.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SupportUserObject'
        '400':
          $ref: '#/components/responses/BadRequestError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt:
            - support_user_management
            # verified scope
    put:
      tags:
        - Support Users
      summary: Update Support User
      description: Modify a Support User information.
      operationId: updateSupportUser
      parameters:
        - name: supportUserId
          in: path
          description: The unique identifier of the Support User.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: | 
                    The identifier the user will use for logging in to the Dashboard or your own backoffice. 
                    We strongly recommend not to change the username once set (you won't be able to do it from the Dashboard).
                password:
                  type: string
                  description: The password the user will use for logging in to the Dashboard or your own backoffice. Expected in cleartext.
                scope:
                  type: array
                  description: |
                    Set of permissions for your Support User. Learn more in the [Scope & Permissions](/guide/api-basics/scopes) article.
                  items:
                    type: string
                    enum: ["read_all","read_write","read_only","admin","support_user_management","legal"]
                samlKey:
                  type: string
                  description: | 
                    Optional key to link automatically a Support User to a [Dashboard](/guide/dashboard/introduction) OAuth2 client.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SupportUserObject'
        '400':
          $ref: '#/components/responses/BadRequestError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt:
            - support_user_management
            # verified scope
    delete:
      tags:
        - Support Users
      summary: Delete Support User
      description: Delete a Support User
      operationId: deleteSupportUser
      parameters:
        - name: supportUserId
          in: path
          description: The unique identifier of the Support User.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: OK
        '400':
          $ref: '#/components/responses/BadRequestError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt:
            - support_user_management
            # verified scope
  /core-connect/support-user/{supportUserId}/unblock:
    put:
      tags:
        - Support Users
      summary: Unblock Support User
      description: Unblock a Support User. Support Users may be blocked if they failed to login 3 times in a row.
      operationId: unblockSupportUser
      parameters:
        - name: supportUserId
          in: path
          description: The unique identifier of the Support User.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: OK
        '400':
          $ref: '#/components/responses/BadRequestError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt:
            - support_user_management
            # verified scope
  /core-connect/onboard/users/validate/{confirmationCode}:
    get:
      tags:
        - User Onboarding
      summary: Onboard User
      description: onboard user
      security: []
      operationId: onboard-user-validate
      parameters:
        - name: confirmationCode
          in: path
          description: Confirmation code
          required: true
          schema:
            type: string
      responses:
        '301':
          description: OK
  /core-connect/onboard/users:
    post:
      tags:
        - User Onboarding
      summary: Onboard User
      description: Create a User using the onboarding feature.
      operationId: onboard-user
      security: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                specifiedUSPerson:
                  type: integer
                email:
                  type: string
                password:
                  type: string
                title:
                  type: string
                firstname:
                  type: string
                lastname:
                  type: string
      responses:
        '200':
          description: OK
        '400':
          $ref: '#/components/responses/BadRequestError'
        default:
          $ref: '#/components/responses/DefaultError'
  /core-connect/onboard/user/config:
    post:
      tags:
        - User Onboarding
      summary: Configure Onboarding File
      description: Configure onboarding file
      operationId: config
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                files:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  files:
                    type: array
                    items:
                      type: string
        '400':
          $ref: '#/components/responses/BadRequestError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt:
            - admin
            # verified scopes
    get:
      tags:
        - User Onboarding
      summary: Get Onboarding Configuration File
      description: Retrieve the onboarding configuration file
      operationId: get-config
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  files:
                    type: array
                    items:
                      type: string
        default:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  files:
                    type: array
                    items:
                      type: string
      security:
        - jwt:
            - admin
            # verified scopes
  /core-connect/onboard/config:
    get:
      tags:
        - User Onboarding
      summary: Get Onboarding Callback URL
      description: Get onboarding success url and onboarding error.
      operationId: getConfig
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    onboardingSuccessCallBack:
                      type: string
                    onboardingErrorCallBack:
                      type: string
        '400':
          $ref: '#/components/responses/BadRequestError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt:
            - admin
    put:
      tags:
        - User Onboarding
      summary: Update Onboarding Callback URL
      description: |
        Update onboarding success url callback and/or onboarding error url callback
      operationId: updateConfig
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                onboardingSuccessCallBack:
                  type: string
                onboardingErrorCallBack:
                  type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                items:
                  type: object
                  properties:
                    onboardingSuccessCallBack:
                      type: string
                    onboardingErrorCallBack:
                      type: string
        '400':
          $ref: '#/components/responses/BadRequestError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt:
            - admin
  /core-connect/onboarding/users:
    get:
      tags:
        - User Onboarding
      summary: Get Onboarded Users
      description: Retrieve all the onboarded users.
      operationId: getAllUsers
      parameters:
        - name: cursor
          in: query
          required: false
          schema:
            type: string
        - name: onboardingComplete
          description: | 
            `1` onboarding complete, `0` onboarding not complete
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  cursor:
                    type: object
                    properties:
                      current:
                        type: string
                      next:
                        type: string
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        trzConnectUserId:
                          type: string
                        username:
                          type: string
                        clients:
                          type: array
                          items:
                            type: object
                            properties:
                              clientId:
                                type: string
                              scopes:
                                type: array
                                items:
                                  type: object
                                  properties: {}
                              lastLoginAt:
                                type: string
                                format: date
                              acceptedAt:
                                type: string
                                format: date
                        userId:
                          type: integer
                        trzConnectUserOnboarding:
                          type: string
                        kycReview:
                          type: string
                        onboardingESign:
                          type: string
                        bridgeUserId:
                          type: string
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt:
            - read_only
  /core-connect/password/users/{userId}:
    put:
      tags:
        - User Onboarding
      summary: Update User Password
      description: Change the password of a User.
      operationId: putUserPassword
      parameters:
        - name: userId
          in: path
          required: true
          description: The unique identifier of the User.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
      responses:
        '204':
          description: OK
        '400':
          $ref: '#/components/responses/BadRequestError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt:
            - read_write
  /core-connect/password/forgot:
    post:
      tags:
        - User Onboarding
      summary: Send Password Reset Email
      description: Send an email with a password reset link
      operationId: postForgotPassword
      security:
        - jwt: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
      responses:
        '204':
          description: OK
        default:
          $ref: '#/components/responses/DefaultError'
  /core-connect/password/change:
    put:
      tags:
        - User Onboarding
      summary: Change User Password
      description: Change the password user with the data collected from the user.
      operationId: putChangePassword
      security: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                email:
                  type: string
                password:
                  type: string
      responses:
        '204':
          description: OK
        default:
          $ref: '#/components/responses/DefaultError'
  /core-connect/password/config:
    get:
      tags:
        - User Onboarding
      summary: Get Password Configuration
      description: | 
        Retrieve the password configuration. You may read [the dedicated documentation for this feature](/guide/users/onboarding.html#passwords)
      operationId: getPasswordConfig
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  passwordChangeRedirectUrl:
                    type: string
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt:
            - admin
            # verified scope
    put:
      tags:
        - User Onboarding
      summary: Update Password Configuration
      operationId: putPasswordConfig
      description: | 
        Update the password configuration. You may read [the dedicated documentation for this feature](/guide/users/passwords.html#configuration)
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                passwordChangeRedirectUrl:
                  type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  passwordChangeRedirectUrl:
                    type: string
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt:
            - admin
            # verified scope

  /core-connect/mid/metadata:
    get:
      tags:
        - Merchant ID Metadata
      summary: Get all MID metadata
      description: Retrieve all MID metadata.
      operationId: getAllMidMetadata
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '400':
          $ref: '#/components/responses/BadRequestError'
      security:
        - jwt:
            - admin
            # verified scope
    put:
      tags:
        - Merchant ID Metadata
      summary: Put bulk metadata
      description: Create or update bulk metadata
      operationId: putMidMetadata
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  mid:
                    type: integer
                additionalProperties:
                  type: string
      responses:
        '204':
          description: The resource was updated successfully.
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt:
            - admin
            # verified scope
  /core-connect/mid/{id}/metadata:
    post:
      tags:
        - Merchant ID Metadata
      summary: Store MID Metadata
      description: Store metadata for a Merchant Id.
      operationId: postMidMetadata
      parameters:
        - name: id
          in: path
          description: Mid
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  otp:
                    type: string
        '400':
          $ref: '#/components/responses/BadRequestError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security:
        - jwt:
            - admin
            # verified scope
    get:
      tags:
        - Merchant ID Metadata
      summary: Get MID Metadata
      description: Retrieve metadata for a Merchant Id.
      operationId: getMidMetadata
      parameters:
        - name: id
          in: path
          description: Mid
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '400':
          $ref: '#/components/responses/BadRequestError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security:
        - jwt:
            - admin
  /core-connect/payouts/{payoutId}/proof:
    get:
      tags:
        - Payouts
      summary: Create Payout Proof
      description: | 
        Create a proof of payout in pdf, and provides a download url. You may read [the dedicated documentation for this feature](/guide/transfers/proof-of-payout.html)
      operationId: getProofPayout
      security:
        - jwt:
          - read_only
          - read_write
      parameters:
        - name: payoutId
          in: path
          description: The unique identifier of the Payout.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  link:
                    type: string
                  expireIn:
                    type: string
        '404':
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/DefaultError'
  /core-connect/card/bulk/{id}/report:
    get:
      tags:
        - Cards Bulk Creation
      summary: Get Report
      description: Get a link to download the bulk creation report.
      operationId: getCardBulkReport
      security:
        - jwt:
          - admin
          # verified scope
      parameters:
        - name: id
          in: path
          description: The unique identifier of the card bulk creation.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
                  expireIn:
                    type: string
        default:
          $ref: '#/components/responses/DefaultError'
  /core-connect/card/bulk:
    post:
      tags:
        - Cards Bulk Creation
      summary: Create Bulk Card Order
      description: | 
        Create a Bulk Card order to create multiple cards at once.

        This endpoint requires per-session [SCA](/guide/strong-customer-authentication/introduction.html).
      operationId: postBulkCard
      security:
        - jwt:
          - admin
          # verified scope
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                walletIdAttach:
                  type: integer
                createWalletForEach:
                  type: boolean
                walletTypeId:
                  type: integer
                userIdOwner:
                  type: integer
                createUserForEach:
                  type: boolean
                number:
                  type: integer
                defaultMccRestrictionGroupId:
                  type: integer
                defaultMerchantRestrictionGroupId:
                  type: integer
                defaultCountryRestrictionGroupId:
                  type: integer
                defaultPermsGroup:
                  type: string
                packageId:
                  type: string
                  maximum: 5
                logoId:
                  type: string
                  maximum: 30
                logoBackId:
                  type: string
                  maximum: 30
                customizedInfo:
                  type: string
                  maximum: 27
                freeCustomizedInfo:
                  type: string
                  maximum: 50
                letterCustomizedInfo:
                  type: string
                  maximum: 50
                anonymous:
                  type: integer
                cardPrint:
                  type: string
                paymentDailyLimit:
                  type: integer
                limitPaymentAll:
                  type: integer
                limitPaymentDay:
                  type: integer
                limitPaymentWeek:
                  type: integer
                limitPaymentMonth:
                  type: integer
                limitPaymentYear:
                  type: integer
                limitAtmAll:
                  type: integer
                limitAtmDay:
                  type: integer
                limitAtmWeek:
                  type: integer
                limitAtmMonth:
                  type: integer
                limitAtmYear:
                  type: integer
                virtual:
                  type: boolean
                cardDeliveryAddress1:
                  type: string
                  maximum: 30
                cardDeliveryAddress2:
                  type: string
                  maximum: 30
                cardDeliveryAddress3:
                  type: string
                  maximum: 30
                cardDeliveryPostCode:
                  type: string
                cardDeliveryCity:
                  type: string
                cardDeliveryState:
                  type: string
                cardDeliveryCountry:
                  type: string
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  orderId:
                    type: string
                  errors:
                    type: array
                    items:
                      type: string
                  status:
                    type: string
                  walletIdAttach:
                    type: integer
                    nullable: true
                  createWalletForEach:
                    type: boolean
                  walletTypeId:
                    type: integer
                    nullable: true
                  userIdOwner:
                    type: integer
                    nullable: true
                  createUserForEach:
                    type: boolean
                  number:
                    type: integer
                  defaultMccRestrictionGroupId:
                    type: integer
                    nullable: true
                  defaultMerchantRestrictionGroupId:
                    type: integer
                    nullable: true
                  defaultCountryRestrictionGroupId:
                    type: integer
                    nullable: true
                  defaultPermsGroup:
                    type: string
                  packageId:
                    type: string
                    nullable: true
                  logoId:
                    type: string
                    nullable: true
                  logoBackId:
                    type: string
                    nullable: true
                  anonymous:
                    type: integer
                  cardPrint:
                    type: integer
                  paymentDailyLimit:
                    type: integer
                    nullable: true
                  limitPaymentAll:
                    type: integer
                    nullable: true
                  limitPaymentDay:
                    type: integer
                    nullable: true
                  limitPaymentWeek:
                    type: integer
                    nullable: true
                  limitPaymentMonth:
                    type: integer
                    nullable: true
                  limitPaymentYear:
                    type: integer
                    nullable: true
                  limitAtmAll:
                    type: integer
                    nullable: true
                  limitAtmDay:
                    type: integer
                    nullable: true
                  limitAtmWeek:
                    type: integer
                    nullable: true
                  limitAtmMonth:
                    type: integer
                    nullable: true
                  limitAtmYear:
                    type: integer
                    nullable: true
                  virtual:
                    type: boolean
        default:
          $ref: '#/components/responses/DefaultError'
    get:
      tags:
        - Cards Bulk Creation
      summary: Get Bulk Card Order
      description: Search bulk card orders.
      operationId: getBulkCard
      security:
        - jwt:
          - admin
          # verified scope
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  orderId:
                    type: string
                  errors:
                    type: array
                    items:
                      type: string
                  status:
                    type: string
                  walletIdAttach:
                    type: integer
                    nullable: true
                  createWalletForEach:
                    type: boolean
                  walletTypeId:
                    type: integer
                    nullable: true
                  userIdOwner:
                    type: integer
                    nullable: true
                  createUserForEach:
                    type: boolean
                  number:
                    type: integer
                  defaultMccRestrictionGroupId:
                    type: integer
                    nullable: true
                  defaultMerchantRestrictionGroupId:
                    type: integer
                    nullable: true
                  defaultCountryRestrictionGroupId:
                    type: integer
                    nullable: true
                  defaultPermsGroup:
                    type: string
                  packageId:
                    type: string
                    nullable: true
                  logoId:
                    type: string
                    nullable: true
                  logoBackId:
                    type: string
                    nullable: true
                  anonymous:
                    type: integer
                  cardPrint:
                    type: integer
                  paymentDailyLimit:
                    type: integer
                    nullable: true
                  limitPaymentAll:
                    type: integer
                    nullable: true
                  limitPaymentDay:
                    type: integer
                    nullable: true
                  limitPaymentWeek:
                    type: integer
                    nullable: true
                  limitPaymentMonth:
                    type: integer
                    nullable: true
                  limitPaymentYear:
                    type: integer
                    nullable: true
                  limitAtmAll:
                    type: integer
                    nullable: true
                  limitAtmDay:
                    type: integer
                    nullable: true
                  limitAtmWeek:
                    type: integer
                    nullable: true
                  limitAtmMonth:
                    type: integer
                    nullable: true
                  limitAtmYear:
                    type: integer
                    nullable: true
                  virtual:
                    type: boolean
        default:
          $ref: '#/components/responses/DefaultError'
  /core-connect/operations/{walletId}/report:
    get:
      tags:
        - Operations
      summary: Get Operations Report
      description: Retrieve an Operations Report based on the corresponding Wallet `id`.
      operationId: getOperationsReport
      security:
        - jwt:
          - read_only
          - read_write
      parameters:
        - in: path
          name: walletId
          required: true
          schema:
            type: integer
          description: The unique identifier of the Wallet.
        - in: query
          name: dateFrom
          required: true
          description: |
            The date and time from which the operations are taken into account for the report.
            The dates are to be html encoded (e.g., 2024-01-11T11:25:36+01:00 becomes `2024-01-11T11:25:36%2B01:00`)
          schema:
            type: string
            example: "2024-06-05T00:00:00%2B02:00"
        - in: query
          name: dateTo
          required: true
          description: | 
            The date and time up to which the operations are taken into account for the report.
            The dates are to be html encoded (e.g., 2024-01-11T11:25:36+01:00 becomes `2024-01-11T11:25:36%2B01:00`)
          schema:
            type: string
            example: "2024-07-05T00:00:00%2B02:00"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the report.
                    enum:
                      - CREATED
                      - COMPLETED
                  url:
                    type: string
                    description: Download URL for the report once completed.
        default:
          $ref: '#/components/responses/DefaultError'
    post:
      tags:
        - Operations
      security:
        - jwt:
          - read_only
          - read_write
      summary: Create Operations Report
      description: Create a CSV export that includes all operations for a given Wallet on a given period.
      operationId: postOperationsReport
      parameters:
        - in: path
          name: walletId
          required: true
          schema:
            type: integer
          description: The unique identifier of the Wallet.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                dateTo:
                  type: string
                  description: The date and time from which the operations are taken into account for the report.
                  example: "2024-06-05T00:00:00+02:00"
                dateFrom:
                  type: string
                  description: The date and time up to which the operations are taken into account for the report.
                  example: "2024-07-05T00:00:00+02:00"
      responses:
        '201':
          description: OK
        default:
          $ref: '#/components/responses/DefaultError'
  /core-connect/merchantIdRestrictionGroups/{groupId}/mid/metadata:
    get:
      tags:
        - Merchant ID Metadata
      summary: Get all MID with metadata
      description: Retrieve all Merchant Ids with metadata. 
      operationId: getAllMidMetadataBYyGroup
      parameters:
        - in: path
          name: groupId
          required: true
          schema:
            type: integer
          description: group Id
        - in: query
          name: cursor
          schema:
            type: string
          description: cursor
        - in: query
          name: pageSize
          schema:
            type: integer
          description: Number of results per page.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
        '400':
          $ref: '#/components/responses/BadRequestError'
      security:
        - jwt:
            - read_write
  /customization/templates/{templateName}/variables:
    get:
      tags:
        - API Templates
      summary: Get Template Variables
      description: Retrieve the list of variables for the given template
      operationId: getTemplateVariables
      parameters:
      - name: templateName
        in: path
        description: The name of the Template.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
      security:
        - jwt:
            - admin
  /customization/templates/{templateName}/template:
    get:
      tags:
        - API Templates
      summary: Get Template
      description: Retrieve the currently configured template.
      operationId: getTemplate
      parameters:
      - name: templateName
        in: path
        description: The name of the Template.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  template:
                    type: string
      security:
        - jwt:
            - admin
    put:
      tags:
        - API Templates
      summary: Upload Template
      description: Upload a replacement for an existing Template.
      operationId: putTemplateUpload
      parameters:
      - name: templateName
        in: path
        description: The name of the Template.
        required: true
        schema:
          type: string
      responses:
        '201':
          description: CREATED
        '400':
          $ref: '#/components/responses/BadRequestError'
      security:
        - jwt:
            - admin
  /customization/templates/{templateName}/example:
    get:
      tags:
        - API Templates
      summary: Build Template Example
      description: Test your template by building one with dummy values.
      operationId: getTemplateExample
      parameters:
      - name: templateName
        in: path
        description: The name of the Template.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  template:
                    type: string
      security:
        - jwt:
            - admin
  /customization/templates/{templateName}:
    delete:
      tags:
        - API Templates
      summary: Delete Template
      description: Delete a Template.
      operationId: deleteTemplate
      parameters:
      - name: templateName
        in: path
        description: The name of the Template.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
      security:
        - jwt:
            - admin
  /core-connect/users/{userId}/kyc/document:
    get:
      tags:
        - User Document Pre-review
      summary: Search Pre-review Documents 
      description: Retrieve all pre-review documents for given user
      operationId: getKYCDocuments
      parameters:
        - name: userId
          in: path
          description: The unique identifier of the User.
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    documentId:
                      type: string
                    documentType:
                      type: integer
                    status:
                      type: integer
                    userId:
                      type: integer
                    createdAt:
                      type: string
                      format: date
                    metadata:
                      type: array
                      items:
                        type: string
                    comment:
                      type: string
        '404':
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt:
            - read_write
    post:
      tags:
        - User Document Pre-review
      summary: Create Upload Document Form
      description: Generate a pre-signed form to upload documents for pre-review.
      operationId: getPreSignedKycForm
      parameters:
        - name: userId
          in: path
          description: The unique identifier of the User.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              required:
                - documentType
                - metadata
              type: object
              properties:
                documentType:
                  type: integer
                  description: The type of KYC file.
                metadata:
                  type: array
                  items:
                    type: string
                  description: Metadata to add to the document.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    form:
                      type: array
                      items:
                        type: string
                    formFields:
                      type: array
                      items:
                        type: string
                    expireIn:
                      type: integer
                    documentId:
                      type: string
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt:
            - read_write
  /core-connect/kyc/documents/{documentId}/status:
    put:
      tags:
        - User Document Pre-review
      summary: Pre-review Document
      description: Update the pre-review status and comment of the document.
      operationId: updateDocument
      parameters:
        - name: documentId
          in: path
          description: The unique identifier of the Document.
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              required:
                - status
                - comment
              type: object
              properties:
                status:
                  type: integer
                  description: The KYC Status of the Document.
                comment:
                  type: string
                  description: The comment of the Document.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  documentId:
                    type: string
                  documentType:
                    type: integer
                  status:
                    type: integer
                  userId:
                    type: integer
                  createdAt:
                    type: string
                    format: date
                  metadata:
                    type: array
                    items:
                      type: string
                  comment:
                    type: string
        '404':
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt:
            - admin
  /core-connect/kyc/documents/{documentId}:
    delete:
      tags:
        - User Document Pre-review
      summary: Delete Pre-review Document 
      description: Delete a pre-review document.
      operationId: deleteKYCDocumentcument
      parameters:
        - name: documentId
          in: path
          description: The unique identifier of the Document (UUID).
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                items:
                  type: object
                  properties:
                    documentId:
                      type: string
                    documentType:
                      type: integer
                    status:
                      type: integer
                    userId:
                      type: integer
                    createdAt:
                      type: string
                      format: date
                    metadata:
                      type: array
                      items:
                        type: string
                    comment:
                      type: string
        '404':
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt:
            - admin
  /core-connect/kyc/documents/need-review:
    get:
      tags:
        - User Document Pre-review
      summary: Search Documents to pre-review
      description: | 
        Retrieve all pre-review documents to review. This endpoint is for [Onboarded Users](/guide/swagger/introduction.html#/User%20Onboarding) only.
      operationId: getKYCDocumentsToReview
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    documentId:
                      type: string
                    documentType:
                      type: integer
                    status:
                      type: integer
                    userId:
                      type: integer
                    createdAt:
                      type: string
                      format: date
                    metadata:
                      type: array
                      items:
                        type: string
                    comment:
                      type: string
        '404':
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt:
            - admin
  /core-connect/kyc/documents/{documentId}/preview:
    get:
      tags:
        - User Document Pre-review
      summary: Get Download URL
      description: Retrieve the pre-signed URL to download the pre-review document.
      operationId: getPresignedUrlDocument
      parameters:
        - name: documentId
          in: path
          description: The unique identifier of the Document (UUID).
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The URL and content type of the file.
          content:
            application/json:
              schema:
                properties:
                  url:
                    type: string
                  contentType:
                    type: string
                  duration:
                    type: integer
        '403':
          description: forbidden
          content:
            application/json:
              schema:
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        type:
                          type: string
                        code:
                          type: string
                        message:
                          type: string
                        docUrl:
                          type: string
        '404':
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt:
            - read_only
  /core-connect/mass-payouts/import:
    post:
      tags:
        - Mass Payouts
      summary: Import SEPA.xml File
      description: Import a SEPA.xml file for mass payout
      operationId: postMassPayoutImport
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  nullable: false
                reference:
                  type: string
                  nullable: false
      responses:
        '201':
          description: CREATED
          content:
            application/json:
              schema:
                type: object
                properties:
                  importId:
                    type: string
                  status:
                    type: string
        '400':
          $ref: '#/components/responses/BadRequestError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt:
            - read_write
            - read_only
  /core-connect/mass-payouts/report/{reference}:
    get:
      tags:
        - Mass Payouts
      summary: Get Mass Payout Report
      operationId: getMassPayoutReportRef
      description: |
        Check the progress of the process of creating the report file and allows you to retrieve it.
      parameters:
        - in: path
          name: reference
          schema:
            type: string
          required: true
          description: Unique reference of the `MassPayoutImport` object.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
                    nullable: false
                  status:
                    type: string
                    nullable: false
                  processed_creditors:
                    type: integer
                    nullable: false
                  total_creditors:
                    type: integer
                    nullable: false
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt:
            - read_write
            - read_only
  /core-connect/operations:
    get:
      tags:
        - Operations
      summary: Search Operations
      description: |
        Retrieve Operations that match your search conditions. The request must specify at least: `walletId`, `dateTo`, `dateFrom`.

        This endpoint requires per-session [SCA](/guide/strong-customer-authentication/introduction.html) for operations that are more than 90 days old.
      operationId: getOperations
      parameters:
        - name: userId
          in: query
          required: true
          description: The unique identifier of the Wallet owner.
          schema:
            type: integer
            format: int64
        - name: walletId
          in: query
          required: true
          description: The unique identifier of the Wallet.
          schema:
            type: integer
            format: int64
        - name: dateFrom
          in: query
          required: true
          description: |
            The start of the period to take into account operations.
            The dates are to be html encoded (e.g., 2024-01-11T11:25:36+01:00 becomes `2024-01-11T11:25:36%2B01:00`)
          schema:
            type: string
            format: date-time
        - name: dateTo
          in: query
          required: true
          description: | 
            The end of the period to take into account operations.
            The dates are to be html encoded (e.g., 2024-01-11T11:25:36+01:00 becomes `2024-01-11T11:25:36%2B01:00`)
          schema:
            type: string
            format: date-time
        - name: pageSize
          in: query
          description: Number of results per page
          schema:
            type: integer
            format: int64
            minimum: 1
            maximum: 100
            default: 15
        - name: operationType
          in: query
          description: |
            Type of operation

            Multi value separated by comma is authorized


            `cardTransaction`, `cardPayin`, `check`, `walletTransfer`, `bankDirectDebit`, `cardTopup`, `refund`, `fees`, `creditNote`

            By default, Treezor returns all operation types when this field isn't define.
          schema:
            type: string
        - name: cursor
          in: query
          description: |
            Pagination cursor, if you don't pass a cursor, result will start at the first page.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        operationType:
                          type: string
                          enum:
                            - SCT
                            - SDD
                            - TRANSFERS
                            - CARDTRANSACTION
                            - CHEQUE
                            - CARDPAYIN
                          description: |
                            Type of operation (not fully implemented yet).
                        amount:
                          type: object
                          properties:
                            amount:
                              type: integer
                              description: Amount in cent
                              example: 32420
                            currency:
                              type: string
                              description: Currency in ISO (EUR, GBP etc.)
                              example: EUR
                        status:
                          type: string
                          enum:
                            - AUTHORIZED
                            - DECLINED
                            - SETTLED
                            - CANCELED
                          description: operation status
                        date:
                          type: object
                          properties:
                            creation:
                              type: string
                              format: date-time
                              description: |
                                Date of payin/payout/cardtransaction object
                                creation in Treezor System
                            settlement:
                              type: string
                              format: date-time
                              nullable: true
                              description: |
                                Date at which the operation is settled on the wallet
                        walletId:
                          type: integer
                          format: int64
                          description: ID of the wallet impacted
                        direction:
                          type: string
                          enum:
                            - CREDIT
                            - DEBIT
                          description: Direction of operation credit or debit
                        objectId:
                          type: integer
                          format: int64
                          description: |
                            The ID of the Treezor object that contains the operation
                        label:
                          type: string
                          nullable: true
                          description: The tag attached to the operation
                        externalReference:
                          type: string
                          nullable: true
                        metadata:
                          type: object
                          oneOf:
                            - type: object
                              properties:
                                mcc:
                                  type: object
                                  properties:
                                    code:
                                      type: integer
                                      format: int64
                                mid:
                                  type: object
                                  properties:
                                    value:
                                      type: string
                                localAmount:
                                  type: object
                                  properties:
                                    amount:
                                      type: integer
                                      format: int64
                                      description: Amount in cent
                                      example: 12000
                                    currency:
                                      type: string
                                      description: Currency in ISO (EUR, GBP etc.)
                                      example: EUR
                                authorizationNote:
                                  type: string
                  cursor:
                    type: object
                    properties:
                      prev:
                        type: string
                        nullable: true
                        description: |
                          Cursor value for previous page. It is null when you are in first page
                      current:
                        type: string
                        description: Actual cursor value. It is your curent page
                      next:
                        type: string
                        description: |
                          Cursor value for next page. It is null when you are on last page
                        nullable: true
        '400':
          $ref: '#/components/responses/BadRequestError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt:
          - read_only
          - read_write
  /core-connect/sca/scawallets:
    get:
      tags:
        - SCA Wallets
      summary: Search SCA Wallets
      description: Retrieve the list of [SCA Wallets](/guide/strong-customer-authentication/sca-wallets.html) for a given user.
      operationId: getSCAWallets
      parameters:
        - in: query
          name: userId
          description: The unique identifier of the user.
          required: true
          schema:
            type: string
          example: "123456"
        - in: query
          name: cursor
          description: Pagination cursor, if you don't pass a cursor, result will start at the first page.
          schema:
            type: string
      responses:
        '200':
          description: The list of wallet was successfully retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScaWalletObject'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    type:
                      type: string
                    code:
                      type: string
                    message:
                      type: string
                    docUrl:
                      type: string
                    requestId:
                      type: string
      security:
        - jwt:
          - read-only
    post:
      tags:
        - SCA Wallets
      summary: Create SCA Wallet
      operationId: postScaWallet
      description: Create a new [SCA Wallet](/guide/strong-customer-authentication/sca-wallets.html) manually.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  description: The unique identifier of the User.
                scaWalletTag:
                  type: string
                  nullable: true
      responses:
        '200':
          description: The wallet was successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScaWalletObject'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt: []
  /core-connect/sca/scawallets/swap:
    post:
      tags:
        - SCA Wallets
      summary: Swap SCA Wallets
      description: Create an SCA Wallet while deleting the previous one as users should have only one device enrolled.
      operationId: swapSCAWallets
      requestBody:
        content:
          application/json:
            schema:
              required:
                - removeScaWalletId
                - swapReason
              type: object
              properties:
                removeScaWalletId:
                  type: string
                  description: The unique identifier of the SCA Wallet to be deleted.
                swapReason:
                  type: string
                  description: The reason for swapping SCA Wallet.
                  enum:
                    - LOST
                    - STOLEN
                    - OTHER
                authMethod:
                  type: array
                  description: | 
                    The chosen methods for the 2-factor authentication. Required if no `scaProof` is provided.
                  items:
                    type: string
                    enum:
                      - ID
                      - OTP SMS
                      - OTP EMAIL
                      - OTHER
                scaProof:
                  type: string
                  description: The valid proof that authenticated the swap. Required if no `authMethod` is provided.
                scaWalletTag:
                  type: string
                  description: |
                    Custom value for the SCA Wallet. Can be used to name the device for which the new SCA Wallet is created. Max length: 256 characters.
      responses:
        '200':
          description: The list of wallet was successfully retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScaWalletObject'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    type:
                      type: string
                    code:
                      type: string
                    message:
                      type: string
                    docUrl:
                      type: string
                    requestId:
                      type: string
      security:
        - jwt:
          - read-write
  /core-connect/sca/scawallets/{scaWalletId}:
    parameters:
      - in: path
        name: scaWalletId
        required: true
        description: The unique identifier of the SCA Wallet.
        schema:
          type: string
    delete:
      tags:
        - SCA Wallets
      summary: Delete SCA Wallet
      operationId: deleteScaWallet
      description: Permanently delete an SCA Wallet.
      responses:
        '200':
          description: The wallet was successfully deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScaWalletObject'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    type:
                      type: string
                    code:
                      type: string
                    message:
                      type: string
                    docUrl:
                      type: string
                    requestId:
                      type: string
      security:
        - jwt: []
    get:
      tags:
        - SCA Wallets
      summary: Get SCA Wallet
      description: Retrieve an SCA Wallet by providing its `id`.
      operationId: getScaWallet
      responses:
        '200':
          description: The wallet was successfully retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScaWalletObject'
        '404':
          description: The wallet was not found.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    type:
                      type: string
                    code:
                      type: string
                    message:
                      type: string
                    docUrl:
                      type: string
                    requestId:
                      type: string
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    type:
                      type: string
                    code:
                      type: string
                    message:
                      type: string
                    docUrl:
                      type: string
                    requestId:
                      type: string
      security:
        - jwt: []
  /core-connect/sca/scawallets/{scaWalletId}/lock:
    parameters:
      - in: path
        name: scaWalletId
        required: true
        description: The unique identifier of the SCA Wallet.
        schema:
          type: string
    put:
      tags:
        - SCA Wallets
      summary: Lock SCA Wallet
      operationId: putScaWallet
      description: |
        Locks an SCA Wallet so that none of the services it offers can be unlocked until it is unlocked.
      requestBody:
        content:
          application/json:
            schema:
              required:
                - lockReason
              type: object
              properties:
                lockReason:
                  type: string
                  description: The reason for locking the Wallet.
                  enum:
                    - ISSUER
                    - LOST_DEVICE
                    - STOLEN_DEVICE
                    - FRAUDULENT_USE_SUSPECTED_BY_ISSUER
                    - FRAUDULENT_USE_SUSPECTED_BY_CLIENT
                    - TERMINATE_SERVICE
                    - INCIDENT
                lockMessage:
                  type: string
                  nullable: true
      responses:
        '200':
          description: The wallet is locked.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScaWalletObject'
        '400':
          description: The lock reason field is required.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    type:
                      type: string
                    code:
                      type: string
                    message:
                      type: string
                    docUrl:
                      type: string
                    requestId:
                      type: string
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    type:
                      type: string
                    code:
                      type: string
                    message:
                      type: string
                    docUrl:
                      type: string
                    requestId:
                      type: string
      security:
        - jwt: []
  /core-connect/sca/scawallets/{scaWalletId}/unlock:
    parameters:
      - in: path
        name: scaWalletId
        required: true
        description: The unique identifier of the SCA Wallet.
        schema:
          type: string
    put:
      tags:
        - SCA Wallets
      summary: Unlock SCA Wallet
      description: Unlock an SCA Wallet.
      operationId: unlockScaWallet
      responses:
        '200':
          description: The wallet is unlocked.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScaWalletObject'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    type:
                      type: string
                    code:
                      type: string
                    message:
                      type: string
                    docUrl:
                      type: string
                    requestId:
                      type: string
      security:
        - jwt: []
  /core-connect/sca/scawallets/{scaWalletId}/resetPin:
    parameters:
      - in: path
        name: scaWalletId
        required: true
        schema:
          type: string
    put:
      tags:
        - SCA Wallets
      summary: Reset PIN
      operationId: resetScaWalletPin
      description: |
        This endpoint is used to reset the PIN code of a Wallet. <br> This web
        service should be used when a Customer has locked their Wallet after too
        many consecutive wrong PIN attempts. <br> Once the PIN has been reset,
        the Customer is able to set a new PIN via the mobile application,
        without having to enter the previous PIN.
      responses:
        '200':
          description: PIN has been reset.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScaWalletObject'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    type:
                      type: string
                    code:
                      type: string
                    message:
                      type: string
                    docUrl:
                      type: string
                    requestId:
                      type: string
      security:
        - jwt: []
  /core-connect/sca/externalOperations:
    post:
      summary: Create External Operation declaration
      description: Declare an SCA External Operation (i.e., a sensitive action that was made outside of Treezor services).
      operationId: postExtOperation
      tags:
        - SCA External Operations
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                actionName:
                  type: string
                  description: | 
                    The end user action that was secured by an SCA. See [list of actions](/guide/strong-customer-authentication/endpoints-and-data.html#action-names-actionname) for more information.
                  enum: [externalGetBalance, externalOperationView, externalOperationView90Days, externalDisplayAccountDetails, externalGetStatement, externalMassPayoutOrderCreation, externalMassTransferOrderCreation, externalScheduledPayoutOrder, externalScheduledTransferOrder, externalUpdateLimitsCard, internalCheck]
                scaProof:
                  type: string
                  description: | 
                    The valid proof that authenticated the end user's action. Required if `actionName` is covered by a per-operation SCA.
                  nullable: true
                actionDate:
                  type: string
                  description: | 
                    The date on which the declared action took place. (Format: RFC3339).
                  format: date-time
                  example: "2023-06-20T01:02:03+01:00"
                resourceIds:
                  type: array
                  items:
                    type: string
                  description: | 
                    The list of unique identifiers (strings) of the objects, conditionned by the type of action. Must be: 
                    * **walletId** for `externalGetStatement`, `externalGetBalance`, `externalOperationView`, `externalOperationView90Days`, and `externalDisplayAccountDetails`
                    * **payoutId** for **transferId** in case of a payout or transfer
                    * **cardId** for `externalUpdateLimitsCard`
                  nullable: true
      responses:
        '200':
          description: The External Operation was successfully created.
          content:
            application/json:
              schema:
                properties:
                  ExternalOperation:
                    type: object
                    properties:
                      externalOperationId:
                        type: string
                        format: uuid
                        description: The unique identifier (uiid) of the ExternalOperation.
                      actionName:
                        type: string
                        description: The end user action that was secured by an SCA.
                      scaProof:
                        type: string
                        nullable: true
                        description: The valid proof that authenticated the end user's action. 
                      actionDate:
                        type: string
                        description: The date on which the declared action took place.
                        example: "2023-06-20T11:01:03+01:00"
                      resourceIds:
                        type: array
                        items:
                          type: string
                        nullable: true
                        description: The list of unique identifiers (strings) of the objects in case of a payout or transfer.
                      createdAt:
                        type: string
                        format: date-time
                        description: | 
                          The date and time at which the External Operation was created. (Format: RFC 3339)
                        nullable: true
                        example: "2023-06-20T11:02:03+01:00"
                      scaDate:
                        type: string
                        format: date-time
                        description: | 
                          The `iat` timestamp of the `scaProof` for per-operation SCA.
                        nullable: true
                        example: "2023-06-20T11:01:13+01:00"
                      amr:
                        type: string
                        description: The type of SCA for per-operation SCA
                        enum: [CLOUD_PIN, HYBRID_PIN, DEVICE_BIOMETRIC]
                        nullable: true
                      externalOperationNote:
                        type: string
                        format: date-time
                        description: | 
                          Comment left by Treezor after scoring, indicating a potential issue. See [List of notes](/guide/strong-customer-authentication/endpoints-and-data.html#notes-externaloperationnote)
                        nullable: true
                      externalOperationResponseCode:
                        type: integer
                        description: For Treezor purposes only.
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    type:
                      type: string
                    code:
                      type: string
                    message:
                      type: string
                    docUrl:
                      type: string
                    requestId:
                      type: string
      security:
        - jwt:
          - read_write
  /core-connect/sca/externalOperations/{externalOperationId}:
    put:
      summary: Update External Operation declaration
      description: | 
        Modify an SCA External Operation declaration. 
        
        This feature is only available for Per Operation operations, in other words for external operations whose action name is: `externalMassPayoutOrderCreation`, 
        `externalMassTransferOrderCreation`, `externalScheduledPayoutOrder`, or `externalScheduledTransferOrder`.
      operationId: putExtOperation
      tags:
        - SCA External Operations
      parameters:
        - name: externalOperationId
          in: path
          description: The unique identifier (uiid) of the ExternalOperation.
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                resourceIds:
                  type: array
                  items:
                    type: string
                  description: The list of unique identifiers (strings) of the objects in case of a payout or transfer. Must be null/empty for [externalGetBalance, externalOperationView, externalOperationView90Days, externalDisplayAccountDetails, externalGetStatement]
                  nullable: true
      responses:
        '200':
          description: The External Operation was successfully updated.
          content:
            application/json:
              schema:
                properties:
                  ExternalOperation:
                    type: object
                    properties:
                      externalOperationId:
                        type: string
                        format: uuid
                        description: The unique identifier (uiid) of the ExternalOperation.
                      actionName:
                        type: string
                        description: The end user action that was secured by an SCA.
                      scaProof:
                        type: string
                        nullable: true
                        description: The valid proof that authenticated the end user's action. 
                      actionDate:
                        type: string
                        description: The date on which the declared action took place.
                        example: "2023-06-20T11:01:03+01:00"
                      resourceIds:
                        type: array
                        items:
                          type: string
                        nullable: true
                        description: The list of unique identifiers (strings) of the objects in case of a payout or transfer.
                      createdAt:
                        type: string
                        format: date-time
                        description: | 
                          The date and time at which the External Operation was created. (Format: RFC 3339)
                        nullable: true
                        example: "2023-06-20T11:02:03+01:00"
                      scaDate:
                        type: string
                        format: date-time
                        description: | 
                          The `iat` timestamp of the `scaProof` for per-operation SCA.
                        nullable: true
                        example: "2023-06-20T11:01:13+01:00"
                      amr:
                        type: string
                        description: The type of SCA for per-operation SCA
                        enum: [CLOUD_PIN, HYBRID_PIN, DEVICE_BIOMETRIC]
                        nullable: true
                      externalOperationNote:
                        type: string
                        format: date-time
                        description: | 
                          Comment left by Treezor after scoring, indicating a potential issue. See [List of notes](/guide/strong-customer-authentication/endpoints-and-data.html#notes-externaloperationnote)
                        nullable: true
                      externalOperationResponseCode:
                        type: integer
                        description: For Treezor purposes only.
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    type:
                      type: string
                    code:
                      type: string
                    message:
                      type: string
                    docUrl:
                      type: string
                    requestId:
                      type: string
      security:
        - jwt:
          - read_write
  /simulation/payout-sddr:
    post:
      summary: Simulate SDDR Core
      operationId: SimulateSDDR
      description: Simulate a received SEPA Direct Debit into one of your Wallet in Sandbox.
      tags:
        - Simulation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                debitorIban:
                  type: string
                  description: IBAN or Virtual IBAN of the debited Wallet.
                amount:
                  type: integer
                typeSDD:
                  type: string
                  enum: 
                    - CORE
                    - B2B
                typeReject:
                  type: string
                  description: | 
                    The type of error returned if the SDDR fails. Defaults to `rejected`.
                  enum:
                    - rejected
                    - returned
                    - refunded
                    - today
                sci:
                  type: string
                  description: The SEPA Credit Identifier of the user. In the case of simulation, this defaults to a random string.
                nbTxs:
                  type: string
                  description: |
                    The number of transactions for the SDD. Defaults to `1`.
                mandateId:
                  type: integer
                  description: The unique identifier of the Mandate
                executeAfterParse:
                  type: integer
                  enum:
                    - 0
                    - 1
      responses:
        '204':
          description: OK
        '400':
          $ref: '#/components/responses/BadRequestError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt: 
          - admin
          # verified scope
  /simulation/sct-inst/payin:
    post:
      tags:
        - Simulation
      summary: Simulate SCTR Inst
      operationId: simulateSctInstReception
      description: Simulate the reception of an instantaneous SEPA Credit Transfer into one of your Wallet in Sandbox.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Name of the recipient.
                bic:
                  type: string
                  description: BIC of the recipient.
                iban:
                  type: string
                  description: BIC of the recipient.
                currency:
                  type: string
                  description: | 
                    Currency of the of the transfer. Can only be `EUR`.
                amount:
                  type: number
                  description: Amount of the transfer.
                  example: 25.33
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  sctInstID:
                    type: string
                    nullable: false
                  paymentID:
                    type: string
                    nullable: false
        '400':
          $ref: '#/components/responses/BadRequestError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt: 
          - admin
          # verified scope
  /simulation/sct-inst/recall:
    post:
      tags:
        - Simulation
      summary: Simulate SCT Inst recall
      description: Simulate a recall for an instantaneous SEPA Credit Transfer.
      operationId: simulateSctInstRecall
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                sctInstId:
                  type: string
                demandDate:
                  type: string
                reasonCode:
                  type: string
                additionalInformation:
                  type: string
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  externalRecallId:
                    type: string
                    nullable: false
                  recallrId:
                    type: string
                    nullable: false
                  sctInstId:
                    type: string
                    nullable: false
                  paymentId:
                    type: string
                    nullable: false
        '400':
          $ref: '#/components/responses/BadRequestError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt: 
          - admin
          # verified scope
  /simulation/acquiring/payin:
    post:
      summary: Simulate Acquiring Payin
      description: Simulate operations resulting from the card acquisition feature.
      operationId: SimulateAcquiringPayin
      tags:
        - Simulation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: number
                  nullable: false
                walletId:
                  type: number
                  nullable: false
                amount:
                  type: number
                  nullable: false
                currency:
                  type: string
                  nullable: false
                  default: EUR
                status:
                  type: number
                  nullable: false
                transactionReference:
                  type: string
                  nullable: true
      responses:
        '204':
          description: OK
        '400':
          $ref: '#/components/responses/BadRequestError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt: 
          - admin
          # verified scope
  # /simulation/payin-check:
  #   post:
  #     summary: Simulate check cashing
  #     operationId: SimulateCheckPayin
  #     tags:
  #       - Simulation
  #     requestBody:
  #       content:
  #         application/json:
  #           schema:
  #             type: object
  #             properties:
  #               walletId:
  #                 type: integer
  #               amount:
  #                 type: number
  #                 format: float
  #     responses:
  #       '200':
  #         description: OK
  #       '400':
  #         $ref: '#/components/responses/BadRequestError'
  #       default:
  #         $ref: '#/components/responses/DefaultError'
  #     security:
  #       - jwt: 
  #         - admin
  #         # verified scope
  /simulation/operations:
    post:
      summary: Simulate Operations
      description: Create fake operations for a given Wallet.
      operationId: simulateOperations
      tags:
        - Operations
        - Simulation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                walletId:
                  type: string
                date:
                  type: string
                  description: Y-m format
                operations:
                  type: object
                  properties:
                    payin:
                      type: integer
                    payinrefund:
                      type: integer
                      description: must be smaller or equal than payin
                    payout:
                      type: integer
                    payoutrefund:
                      type: integer
                      description: must be smaller or equal than payout
                    transfer:
                      type: integer
                    transferrefund:
                      type: integer
                      deprecated: true
                      description: must be smaller or equal than transfer
                    cardtransaction:
                      type: integer
      responses:
        '201':
          description: OK
        '400':
          $ref: '#/components/responses/BadRequestError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt:
          - admin
          # verified scope
  /simulation/cardtransactions:
    post:
      tags:
        - Card Transactions
        - Simulation
      summary: Simulate Card Transactions
      description: Simulate Card Transactions in Sandbox environment
      operationId: simulateCardTransactions
      requestBody:
        content:
          application/json:
            schema:
              required:
              - merchantId
              - merchantName
              - transLink
              type: object
              properties:
                publicToken:
                  type: string
                  description: The public token of the Card.
                date:
                  type: string
                  example: Y-m-d H:i:s
                  description:  The date and time of the CardTransaction, as seen in the `authorizationIssuerTime` attribute.
                amount:
                  type: number
                  format: float
                  example: 97.42
                  description: The amount of the CardTransaction, as seen it the `paymentAmount` and `paymentLocalAmount` attributes.
                mcc:
                  type: string
                  description: |
                    The Merchant Category Code for the CardTransaction, allowing you to check [Card MCC restrictions](/guide/cards/modification.html#mcc-restrictions).
                merchantId:
                  type: string
                  description: | 
                    The Merchant's ID for the CardTransaction, allowing you to check [Card MID restrictions](/guide/cards/modification.html#mid-restrictions).
                merchantName:
                  type: string
                  description: The name of the merchant.
                paymentStatus:
                  type: string
                  description: |
                    The type of CardTransaction. In the specific case of simulation, allowed values are:
                    * `A` – Authorization accepted
                    * `S` – Settled

                    See the full list of values in the [Statuses](/guide/cards/transactions.html#statuses-paymentstatus) article.
                transLink:
                  type: string
                  description: | 
                    A unique reference used to associate the Card Transaction with a `paymentId`. Must be `100000000000000` or higher.

                    To emulate a complete flow, set a `paymentStatus = A` followed by a `S` while specifying the same `transLink` for both requests.
                paymentCode:
                  type: string
                  deprecated: true
                  description: Deprecated. Use the `transLink` parameter instead.
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    number:
                      type: integer
                      format: int32
                    publicToken:
                      type: string
        '400':
          $ref: '#/components/responses/BadRequestError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt: 
          - admin
          # verified scope
  /core-connect/statements/{walletId}/raw:
    get:
      tags:
          - Account Statements
      summary: Get JSON Account Statement
      description: | 
        Retrieve the raw data (json) to build a Wallet account statement.

        This endpoint requires per-session [SCA](/guide/strong-customer-authentication/introduction.html).
      operationId: getRawStatement
      parameters:
        - name: walletId
          in: path
          description: The unique identifier of the Wallet.
          required: true
          schema:
            type: string
        - name: month
          in: query
          description: The month of the statement (2 digits leading with `0`)
          required: true
          schema:
            type: integer
        - name: year
          in: query
          description: The year of the statement (4 digits, e.g., `2022`)
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                properties:
                  firstBalance:
                    type: object
                    properties:
                      amount:
                        type: string
                        example: "5.76"
                      date:
                        type: string
                        example: "2023-01-01"
                  lastBalance:
                    type: object
                    properties:
                      amount:
                        type: string
                        example: "-553.03"
                      date:
                        type: string
                        example: "2023-01-31"
                  operations:
                    type: array
                    items:
                      type: object
                      properties:
                        date:
                          type: string
                          example: "2022-01-31"
                        type:
                          type: string
                          example: "cardTransaction"
                        name:
                          type: string
                          example: "Reece Little (978 46.81)"
                        direction:
                          type: string
                          example: "DEBIT"
                        amount:
                          type: number
                          format: float
                          example: 97.34
                  totalDebit:
                    type: string
                    example: "0.00"
                  totalCredit:
                    type: string
                    example: "0.00"
                  user:
                    type: object
                    properties:
                      title:
                        type: string
                        enum:
                          - M
                          - MME
                          - MLLE
                        example: "M"
                      firstname:
                        type: string
                        example: "Alex"
                      lastname:
                        type: string
                        example: "Oak"
                      address1:
                        type: string
                        example: "15 Rosewood Road"
                      address2:
                        type: string
                      address3:
                        type: string
                      postcode:
                        type: string
                        example: "75014"
                      city:
                        type: string
                        example: "Paris"
                      country:
                        type: string
                        example: "FR"
                  wallet:
                    type: object
                    properties:
                      iban:
                        type: string
                        example: "FR761679800001000012345678"
                      bic:
                        type: string
                        example: "TRZOFR21XXX"
                  totalAmountFees:
                    type: integer
                    example: 0
                  totalAmountCreditNote:
                    type: integer
                    example: 0
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt: []
  /core-connect/statements/{walletId}/computed:
    get:
      tags:
          - Account Statements
      summary: Get PDF Account Statement
      description: | 
        Retrieve a Wallet account statement in pdf format.

        This endpoint requires per-session [SCA](/guide/strong-customer-authentication/introduction.html).
      operationId: getPdfAccountStatement
      parameters:
        - name: walletId
          in: path
          description: The unique identifier of the Wallet.
          required: true
          schema:
            type: string
        - name: month
          in: query
          description: The month of the statement (2 digits leading with `0`)
          required: true
          schema:
            type: integer
        - name: year
          in: query
          description: The year of the statement (4 digits, e.g., `2022`)
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  link:
                    type: string
                  expireIn:
                    type: integer
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt: []
  /v1/balances:
    get:
      tags:
        - Balances
      summary: Search Balances
      description: Retrieve Balances for a given `walletId` or `userId`.
      operationId: getBalances
      parameters:
        - name: accessSignature
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
        - name: accessTag
          in: query
          description: |
            A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.
          schema:
            type: string
        - name: accessUserId
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: integer
        - name: accessUserIp
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
        - name: walletId
          in: query
          description: The unique identifier of the Wallet whose Balance is to be retrieved.
          schema:
            type: integer
        - name: userId
          in: query
          description: The unique identifier of the User whose Wallet Balances are to be retrieved.
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  balances:
                    type: array
                    items:
                      type: object
                      properties:
                        walletId:
                          type: integer
                        currentBalance:
                          type: number
                          format: float
                        authorizations:
                          type: number
                          format: float
                        authorizedBalance:
                          type: number
                          format: float
                        currency:
                          type: string
                        calculationDate:
                          type: string
                          description: Date YYYY-MM-DD HH:MM:SS
        '405':
          $ref: '#/components/responses/NotAllowedError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt: []
  /v1/beneficiaries:
    get:
      tags:
        - Beneficiaries
      summary: Search Beneficiaries
      description: Retrieve Beneficiary bank accounts that match search criteria.
      operationId: getBeneficiaries
      parameters:
        - name: accessSignature
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
        - name: accessTag
          in: query
          description: |
            A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.
          schema:
            type: string
        - name: accessUserId
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: integer
        - name: accessUserIp
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
        - name: fields
          in: query
          description: List of the object properties you want to pick up.
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: filter
          in: query
          description: |
            You can filter the API response by using filter(s).

            Filterable fields are:
             - id
             - tag
             - userId
             - isActive (1 for yes, 0 for no)
             - nickName
             - address
             - iban (encrypted IBAN)
             - IbanInClear
             - bic
             - sepaCreditorIdentifier
             - usableForSct
             - createdDate
             - modifiedDate

            Filters should be separated by a ";". Example for 3 filters:
            FILTER1;FILTER2;FILTER3.

            A single filter has the following syntax : "fieldName criterion expression".

            Where:
             - fieldName: the name of a filterable field of this object.
             - expression: the values to be included or excluded (see the table below for more information)
             - criterion: a filter criterion.

            Here are the possible values for criterion:

             | Criteria |         Description    |                   Type                   | Expression Example |
             |----------|------------------------|------------------------------------------|--------------------|
             |     >    |      greater than      |            alphanumeric string           |         100        |
             |    >=    | greater or equal than  |            alphanumeric string           |         100        |
             |     <    |        less than       |            alphanumeric string           |         100        |
             |    <=    |   less or equal than   |            alphanumeric string           |         100        |
             |    !=    |      not equal to      |            alphanumeric string           |         100        |
             |   like   |          like          |            alphanumeric string           |         100        |
             |    in    |           in           | alphanumeric strings separated by commas |      100,30,25     |
             |    ==    |         equals         |            alphanumeric string           |         100        |
          schema:
            type: string
        - name: id
          in: query
          description: The unique identifier of the Beneficiary.
          schema:
            type: integer
        - name: userId
          deprecated: true
          in: query
          description: Deprecated, use the `filter` parameter instead.
          schema:
            type: integer
        - name: iban
          deprecated: true
          in: query
          description: Deprecated, use the `filter` parameter instead.
          schema:
            type: string
        - name: bic
          deprecated: true
          in: query
          description: Deprecated, use the `filter` parameter instead.
          schema:
            type: string
        - name: nickName
          deprecated: true
          in: query
          description: Deprecated, use the `filter` parameter instead.
          schema:
            type: string
        - name: name
          deprecated: true
          in: query
          description: Deprecated, use the `filter` parameter instead.
          schema:
            type: string
        - name: pageNumber
          in: query
          description: |
            The page number, only available on /v1/ endpoints 
          schema:
            type: integer
        - name: pageCount
          in: query
          description: |
            The number of items per page, only available on /v1/ endpoints  
          schema:
            type: integer
        - name: sortBy
          in: query
          description: |
            The transaction element you want to sort the list with. Default
            value : _createdDate_. 
          schema:
            type: string
        - name: sortOrder
          in: query
          description: |
            The order you want to sort the list.
            * **DESC** for a descending sort
            * **ASC** for a ascending sort.
          schema:
            type: string
            default: DESC
            enum:
              - DESC
              - ASC
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BeneficiaryObject'
        '405':
          $ref: '#/components/responses/NotAllowedError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt: []
    post:
      tags:
        - Beneficiaries
      summary: Create Beneficiary
      description: | 
        Create a new benefeciary bank account.

        This endpoint requires per-operation [SCA](/guide/strong-customer-authentication/introduction.html).
      operationId: postBeneficiary
      parameters:
        - name: accessSignature
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
        - name: accessTag
          in: query
          description: |
            A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.
          schema:
            type: string
        - name: accessUserId
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: integer
        - name: accessUserIp
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - name
                - userId
              type: object
              properties:
                tag:
                  type: string
                  description: |
                    Custom data that could be used by caller to search the instance.
                userId:
                  type: integer
                  description: The unique identifier of the User to which the Beneficiary is attached.
                nickName:
                  type: string
                  description: |
                    Name choosen by end user to easily recognize the beneficiary.
                name:
                  type: string
                  description: | 
                    Beneficiary name, linked to bank account. Allowed characters are:
                    * `a` to `z`
                    * `A` to `Z` 
                    * `0` to `9` 
                    * `/` `-` `?` `:` `(` `)` `.` `,` `'` `+` `Space`
                address:
                  type: string
                  description: Beneficiary address, linked to bank account.
                iban:
                  type: string
                  description: |
                    Beneficiary International Bank Account Number. Mandatory if
                    `usableForSct` is `true`.
                bic:
                  type: string
                  description: |
                    Beneficiary Bank Identifier Code. Mandatory if `usableForSct`
                    is `true`.
                sepaCreditorIdentifier:
                  type: string
                  description: |
                    Beneficiary SEPA Creditor Identifier. Mandatory to validate
                    incoming direct debit, useless other wise. Between 8 and 35
                    h. If sddB2bWhitelist or sddCoreBlacklist is
                    provided then sepaCreditorIdentifier is mandatory.
                sddB2bWhitelist:
                  type: array
                  description: |
                    Each unique mandate reference, with its frequency type, must
                    be explicitely allowed when doing B2B Direct Debit.
                    Furthermore, a mandate not used during more than 36 months
                    will be automatically rejected even if in the white list. If
                    provided, sepaCreditorIdentifier is mandatory.
                  items:
                    required:
                      - isRecurrent
                      - uniqueMandateReference
                    type: object
                    properties:
                      uniqueMandateReference:
                        type: string
                        description: |
                          Unique Mandate Reference that unambiguiously identify
                          a mandate signed between the user and the beneficiary
                      isRecurrent:
                        type: boolean
                        description: |
                          If mandate is a recuring payment, this field must be
                          true.
                      walletId:
                        type: number
                        description: |
                          If present, the Direct Debit will be accepted only if
                          the targeted wallet is the wallet with the given
                          walletId. Without this value, the SDD can target any
                          wallets of the user. With the value specified, only
                          the explicitely authorized wallet can be targeted by
                          SDD.
                sddCoreBlacklist:
                  type: array
                  description: |
                    Core Direct Debit are accepted by default. If a Core mandate
                    is to be refused on reception, it has to be added to this
                    list. If wild char * (star) is used instead of a UMR, all
                    Direct Debit from this beneficiary will be refused. If
                    provided, sepaCreditorIdentifier is mandatory.
                  items:
                    type: string
                    description: |
                      Unique Mandate Reference that unambiguiously identify a
                      mandate signed between the user and the beneficiary. Star
                      character can also be used to reject all Direct debit from
                      the beneficiary.
                usableForSct:
                  type: boolean
                  description: |
                    Indicated if the beneficiary can be used for SEPA Credit
                    Transfer. This field is a conveniant way to filter all
                    beneficiaries for a user that would like to do a Credit
                    Transfer. Indeed, beneficaries are created automatically
                    when receiving a Core Direct Debit and therefor by looking
                    at the list you won't be able to idnetify which beneficary
                    to use on SCT.
                  default: false
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BeneficiaryObject'
        '400':
          $ref: '#/components/responses/BadRequestError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt: []
  /v1/beneficiaries/{beneficiaryId}:
    get:
      tags:
        - Beneficiaries
      summary: Get Beneficiary
      description: Retrieve a Beneficiary bank account based on its `id`.
      operationId: getBeneficiary
      parameters:
        - name: beneficiaryId
          in: path
          description: The unique identifier of the Beneficiary.
          required: true
          schema:
            type: integer
            format: int64
        - name: fields
          in: query
          description: List of the object properties you want to pick up.
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BeneficiaryObject'
        '405':
          $ref: '#/components/responses/NotAllowedError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt: []
    put:
      tags:
        - Beneficiaries
      summary: Update Beneficiary
      description: | 
        Modify a benefeciary bank account information.

        This endpoint requires per-operation [SCA](/guide/strong-customer-authentication/introduction.html).
      operationId: putBeneficiary
      parameters:
        - name: beneficiaryId
          in: path
          description: The unique identifier of the Beneficiary.
          required: true
          schema:
            type: integer
        - name: accessSignature
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
        - name: accessTag
          in: query
          description: |
            A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.
          schema:
            type: string
        - name: accessUserId
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: integer
        - name: accessUserIp
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                tag:
                  type: string
                  description: |
                    Custom data that could be used by caller to search theinstance.
                nickName:
                  type: string
                  description: |
                    Name choosen by end user to easily recognize the
                    beneficiary.
                name:
                  type: string
                  # required: true
                  description: | 
                    Beneficiary name, linked to bank account. Allowed characters are
                    * `a` to `z`
                    * `A` to `Z` 
                    * `0` to `9` 
                    * `/` `-` `?` `:` `(` `)` `.` `,` `'` `+` `Space`
                address:
                  type: string
                  description: Beneficiary address, linked to bank account.
                iban:
                  type: string
                  description: |
                    Beneficiary International Bank Account Number. Mandatory if
                    usableForSct is true.
                bic:
                  type: string
                  description: |
                    Beneficiary Bank Identifier Code. Mandatory if usableForSct
                    is true.
                isActive:
                  type: boolean
                  description: Beneficiary is activate.
                sepaCreditorIdentifier:
                  type: string
                  description: |
                    Beneficiary SEPA Creditor Identifier. Mandatory to validate
                    incoming direct debit, useless other wise. Between 8 and 35
                    characters. If sddB2bWhitelist or sddCoreBlacklist is
                    provided then sepaCreditorIdentifier is mandatory.
                sddB2bWhitelist:
                  type: array
                  description: |
                    Each unique mandate reference, with its frequency type, must
                    be explicitely allowed when doing B2B Direct Debit.
                    Furthermore, a mandate not used during more than 36 months
                    will be automatically rejected even if in the white list.
                  items:
                    required:
                      - isRecurrent
                      - uniqueMandateReference
                    type: object
                    properties:
                      uniqueMandateReference:
                        type: string
                        description: |
                          Unique Mandate Reference that unambiguiously identify
                          a mandate signed between the user and the beneficiary
                      isRecurrent:
                        type: boolean
                        description: |
                          If mandate is a recuring payment, this field must be
                          true.
                      walletId:
                        type: number
                        description: |
                          If present, the Direct Debit will be accepted only if
                          the targeted wallet is the wallet with the given
                          walletId. Without this value, the SDD can target any
                          wallets of the user. With the value specified, only
                          the explicitely authorized wallet can be targeted by
                          SDD.
                sddCoreBlacklist:
                  type: array
                  description: |
                    Core Direct Debit are accepted by default. If a Core mandate
                    is to be refused on reception, it has to be added to this
                    list. If wild char * (star) is used instead of a UMR, all
                    Direct Debit from this beneficiary will be refused.
                  items:
                    type: string
                    description: |
                      Unique Mandate Reference that unambiguiously identify a
                      mandate signed between the user and the beneficiary. Star
                      character can also be used to reject all Direct debit from
                      the beneficiary.
                usableForSct:
                  type: boolean
                  description: |
                    Indicated if the beneficiary can be used for SEPA Credit
                    Transfer. This field is a conveniant way to filter all
                    beneficiaries for a user that would like to do a Credit
                    Transfer. Indeed, beneficaries are created automatically
                    when receiving a Core Direct Debit and therefor by looking
                    at the list you won't be able to idnetify which beneficary
                    to use on SCT.
                  default: false
        required: false
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BeneficiaryObject'
        '405':
          $ref: '#/components/responses/NotAllowedError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt: []
  /v1/businesssearchs:
    get:
      tags:
        - Businesses
      summary: Search Businesses
      operationId: searchBusiness
      description: |
        The search endpoint returns some business information.
      parameters:
        - name: accessSignature
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
        - name: accessTag
          in: query
          description: |
            A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.
          schema:
            type: string
        - name: accessUserId
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: integer
        - name: accessUserIp
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
        - name: country
          in: query
          description: |
            In which country to search. Format [ISO 3166-1 alpha-2](/guide/api-basics/data-format.html#countries)
          required: true
          schema:
            type: string
        - name: nameExact
          in: query
          description: |
            Business exact name. Exclusive with `nameMatchBeginning` and `nameClosestKeywords`.
          schema:
            type: string
        - name: nameMatchBeginning
          in: query
          description: |
            Business names begin with. Exclusive with `nameExact` and `nameClosestKeywords`.
          schema:
            type: string
        - name: nameClosestKeywords
          in: query
          description: |
            Business names closed to keywords. Exclusive with `nameExact` and `nameMatchBeginning`.
          schema:
            type: string
        - name: registrationNumber
          in: query
          description: Business registration number.
          schema:
            type: string
        - name: vatNumber
          in: query
          description: Business VAT number.
          schema:
            type: string
        - name: phoneNumber
          in: query
          description: Business phone number.
          schema:
            type: string
        - name: addressStreet
          in: query
          description: Business' street address.
          schema:
            type: string
        - name: addressCity
          in: query
          description: Business' city address.
          schema:
            type: string
        - name: addressPostalCode
          in: query
          description: Business' postal code address.
          schema:
            type: string
      responses:
        '200':
          description: A business search response
          content:
            '*/*':
              schema:
                type: array
                items:
                  type: object
                  properties:
                    businessinformations:
                      type: array
                      items:
                        type: object
                        properties:
                          legalName:
                            type: string
                            description: Business commercial name.
                          phone:
                            type: string
                            description: Business phone number.
                          legalTvaNumber:
                            type: string
                            description: Business VAT number.
                          legalRegistrationNumber:
                            type: string
                            description: Business registration number.
                          status:
                            type: string
                            description: |
                              | Code | Description |
                              | ---- | ----------- |
                              |  D   | Deleted     |
                              |  N   | Company non diffusible (Insee) |
                              |  I   | Inactive (Insee) |
                              |  A   | Economically active |
                              |  C   | Closed |
                              |  T   | Transfered |
                              |  S   | Economically stopped (Insee) |
                              |  L   | Liquidation |
                              |  O   | Dormant company |
                            enum:
                              - D
                              - 'N'
                              - I
                              - A
                              - C
                              - T
                              - S
                              - L
                              - O
                          officeType:
                            type: integer
                            description: |
                              | Code | Description |
                              | ---- | ----        |
                              |  0   | Secondary establishment |
                              |  1   | Headquarter |
                          safeNumber:
                            type: string
                            description: Business SAFE number.
                          activityType:
                            type: string
                            description: Business sector. Code NAF in France.
                          externalId:
                            type: string
                            description: Business external id.
                          address1:
                            type: string
                            description: Business' street.
                          postcode:
                            type: string
                            description: Business' postal code.
                          city:
                            type: string
                            description: Business' city.
                          state:
                            type: string
                            description: Business' province.
                          country:
                            type: string
                            description: Business' country.
                            format: ISO 3166-1 alpha-2
                          tradename:
                            type: string
                            description: Business trade name
        default:
          description: Unexpected error
          content:
            '*/*':
              schema:
                type: object
                properties:
                  errorCode:
                    type: integer
                  errorMessage:
                    type: string
                  additionalInformation:
                    type: array
                    items:
                      type: string
      security:
        - jwt: []
  /v1/businessinformations:
    get:
      tags:
        - Businesses
      summary: Get Business Information
      operationId: getBusinessInfo
      description: |
        The get business information endpoint returns all already known business information. End user will have then to verify/correct it.
      parameters:
        - name: accessSignature
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
        - name: accessTag
          in: query
          description: |
            A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.
          schema:
            type: string
        - name: accessUserId
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: integer
        - name: accessUserIp
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
        - name: country
          in: query
          description: |
            In which country to search. Format [ISO 3166-1 alpha-2](/guide/api-basics/data-format.html#countries)
          required: true
          schema:
            type: string
        - name: externalId
          in: query
          description: External unique business id. As given in businesssearch reponse.
          schema:
            type: string
        - name: registrationNumber
          in: query
          description: Unique business registration number.
          schema:
            type: string
        - name: vatNumber
          in: query
          description: Unique business VAT number.
          schema:
            type: string
      responses:
        '200':
          description: A business information response
          content:
            '*/*':
              schema:
                type: object
                properties:
                  businessinformations:
                    type: array
                    items:
                      type: object
                      properties:
                        legalName:
                          type: string
                          description: Business commercial name.
                        legalRegistrationNumber:
                          type: string
                          description: Business registration number.
                        legalRegistrationDate:
                          type: string
                          description: Business registration date.
                        legalForm:
                          type: string
                          description: |
                            The legal form/category of the company. 
                            
                            You may check out [the authoritative list](https://www.insee.fr/fr/information/2028129)
                        legalShareCapital:
                          type: number
                          description: Business share capital.
                        legalSector:
                          type: string
                          description: |
                            The Business Sector of the company (NAF or NACE code in France). The expected format depends on `legalSectorType`

                            You may check out [the authoritative list](https://www.insee.fr/fr/information/2120875)
                        legalAnnualTurnOver:
                          type: string
                          description: |
                            Business annual turnover range in k€.
                          enum:
                            - ''
                            - 0-39
                            - 40-99
                            - 100-249
                            - 250-999
                            - 1000-2999
                            - 3000-9999
                            - 10000-99999
                            - 100000-*
                        legalNetIncomeRange:
                          type: string
                          description: |
                            Business annual netincome in k€.
                          enum:
                            - ''
                            - 0-4
                            - 5-9
                            - 10-49
                            - 50-149
                            - 150-499
                            - 500-*
                        legalNumberOfEmployeeRange:
                          type: string
                          description: |
                            Business workforce.
                          enum:
                            - ''
                            - '0'
                            - 1-9
                            - 10-99
                            - 100-249
                            - 250-*
                        phone:
                          type: string
                          description: Business phone number.
                        email:
                          type: string
                          description: Business generic email.
                        address1:
                          type: string
                          description: Business' street
                        postcode:
                          type: string
                          description: Business' postal code
                        city:
                          type: string
                          description: Business' city
                        state:
                          type: string
                          description: Business' province
                        country:
                          type: string
                          description: Business' country
                          format: ISO 3166-1 alpha-2
                        status:
                          type: string
                          description: |
                            | Code | Description |
                            | ---- | ----------- |
                            |  D   | Deleted     |
                            |  N   | Company non diffusible (Insee) |
                            |  I   | Inactive (Insee) |
                            |  A   | Economically active |
                            |  C   | Closed |
                            |  T   | Transfered |
                            |  S   | Economically stopped (Insee) |
                            |  L   | Liquidation |
                            |  O   | Dormant company |
                          enum:
                            - D
                            - 'N'
                            - I
                            - A
                            - C
                            - T
                            - S
                            - L
                            - O
                        tradename:
                          type: string
                          description: Business trade name
                        users:
                          type: array
                          items:
                            type: object
                            properties:
                              firstname:
                                type: string
                                description: Representative's first name.
                              lastname:
                                type: string
                                description: Representative's last name.
                              fullnames:
                                type: string
                                description: Representative's full names.
                              birthday:
                                type: string
                                description: Representative's birthdate. Format YYYY-MM-DD
                              parentType:
                                type: string
                                description: Representative's position in company
                                enum:
                                  - Honorary president
                                  - Not associated manager
                                  - President of the control council
                                  - Member of the management board
                                  - Member of the supervisory council
                                  - Member of the control committee
                                  - Partner
                                  - 'Management advisor '
                                  - Deputy managing director
                                  - Vice-president of the management board
                                  - Vice-president of the supervisory council
                                  - Developer
                                  - Other manager
                                  - Receiver
                                  - Authorized agent
                                  - Person in charge abroad
                                  - Representative in France
                                  - Member of the management council
                                  - Member of the control council
                                  - Treasurer
                                  - Secretary
                                  - Member
                                  - Administrative director
                                  - Sales director
                                  - Financial director
                                  - Chief Technical Officer
                                  - General secretary
                                  - Chief accountant
                                  - Guardian
                                  - 'Plan commissioner '
                                  - Management agent
                                  - Concordat commissioner
                                  - Representative of the creditors
                                  - Judicial representative
                                  - Substitute judge-commissioner
                                  - Judge-commissioner
                                  - Receiver/representative of the creditors
                                  - Conciliator
                                  - Auditor
                                  - Statutory auditor
                                  - Supervision commissioner
                                  - Deputy auditor
                                  - Spouse-associate
                                  - Accounts controller
                                  - Censor
                                  - Chief Executive Officer
                                  - President
                                  - Chairman of the Board
                                  - Governor
                                  - Deputy governor
                                  - >-
                                    Person having the power to usually involve
                                    the company
                                  - Manager
                                  - Co-managing partner
                                  - Managing director
                                  - Managing director not administrator
                                  - Unique managing director
                                  - Delegated managing director
                                  - Vice-president
                                  - Administrator
                                  - Delegated administrator
                                  - President of the management board
                                  - President of the supervisory council
                                  - Active partner
                                  - Management controller
                                  - Liquidator
                                  - Temporary administrator
                                  - >-
                                    Representative in France of a foreign
                                    company
                                  - Personal business manager
        default:
          description: Unexpected error
          content:
            '*/*':
              schema:
                type: object
                properties:
                  errorCode:
                    type: integer
                  errorMessage:
                    type: string
                  additionalInformation:
                    type: array
                    items:
                      type: string
      security:
        - jwt: []
  /v1/cards:
    get:
      tags:
        - Cards
      summary: Search Cards
      description: Retrieve Cards based on search criteria.
      operationId: getCards
      parameters:
        - name: accessSignature
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
        - name: accessTag
          in: query
          description: |
            A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.
          schema:
            type: string
        - name: accessUserId
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: integer
        - name: accessUserIp
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
        - name: cardId
          in: query
          description: The unique identifier of the Card.
          schema:
            type: integer
        - name: userId
          in: query
          description: The unique identifier of the cardholder
          schema:
            type: integer
        - name: embossedName
          in: query
          description: Embossed name of the card
          schema:
            type: string
        - name: publicToken
          in: query
          description: Public token of the card
          schema:
            type: string
        - name: permsGroup
          in: query
          description: |
            Permissions group of the card. 
            <br />
            See [available values on the documentation](/guide/cards/permissions-groups.html)
          schema:
            type: string
        - name: isPhysical
          in: query
          description: |
            Whether or not the card is a Physical Card. Values can be:
              * `1` – Physical card
              * `0` – Virtual card
          schema:
            type: integer
        - name: isConverted
          in: query
          description: |
            Whether or not the card is a Virtual Card that has been converted into a Physical Card. Values can be:
              * `1` – Physical card converted from a virtual card
              * `0` – Not converted, virtual card only
          schema:
            type: integer
        - name: lockStatus
          in: query
          description: | 
            The Status of the card, indicating whether it is locked, lost, or destroyed for instance.
            While this field is an integer, it returns a plaintext value. See the full list of `lockStatus`in the [Block a Card](/guide/cards/modification.html#status) article.
          schema:
            type: integer
        - name: mccRestrictionGroupId
          in: query
          description: mccRestrictionGroupId of the card
          schema:
            type: integer
        - name: merchantRestrictionGroupId
          in: query
          description: merchantRestrictionGroupId of the card
          schema:
            type: integer
        - name: countryRestrictionGroupId
          in: query
          description: countryRestrictionGroupId of the card
          schema:
            type: integer
        - name: pageNumber
          in: query
          description: |
            The page number, only available on /v1/ endpoints 
          schema:
            type: integer
        - name: pageCount
          in: query
          description: |
            The number of items per page, only available on /v1/ endpoints  
          schema:
            type: integer
        - name: sortBy
          in: query
          description: |
            The transaction element you want to sort the list with. Default
            value : _createdDate_. 
          schema:
            type: string
        - name: sortOrder
          in: query
          description: |
            The order you want to sort the list.
            * **DESC** for a descending sort
            * **ASC** for a ascending sort.
          schema:
            type: string
            default: DESC
            enum:
              - DESC
              - ASC
        - name: createdDateFrom
          in: query
          description: |
            The creation date from which you want to filter the request result.
            Format YYYY-MM-DD HH:MM:SS. 
          schema:
            type: string
            format: date-time
        - name: createdDateTo
          in: query
          description: |
            The creation date up to which you want to filter the request result.
            Format YYYY-MM-DD HH:MM:SS. 
          schema:
            type: string
            format: date-time
        - name: updatedDateFrom
          in: query
          description: |
            The modification date from which you want to filter the request
            result. Format YYYY-MM-DD HH:MM:SS. 
          schema:
            type: string
            format: date-time
        - name: updatedDateTo
          in: query
          description: |
            The modification date up to which you want to filter the request
            result. Format YYYY-MM-DD HH:MM:SS. 
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/CardObject'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          description: Unauthorized
          content: {}
        default:
          description: Unexpected error
          content:
            '*/*':
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        errorCode:
                          type: integer
                        errorMessage:
                          type: string
                        additionalInformation:
                          type: array
                          items:
                            type: string
      security:
        - jwt: []
  /v1/cards/{cardId}:
    get:
      tags:
        - Cards
      summary: Get Card
      description: Retrieve a Card based on its `id`.
      operationId: getCard
      parameters:
        - name: cardId
          in: path
          description: The unique identifier of the Card.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/CardObject'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          description: Unauthorized
          content: {}
        default:
          description: Unexpected error
          content:
            '*/*':
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        errorCode:
                          type: integer
                        errorMessage:
                          type: string
                        additionalInformation:
                          type: array
                          items:
                            type: string
      security:
        - jwt: []
    put:
      tags:
        - Cards
      summary: Update Card
      operationId: putCard
      description: |
        Update the restriction groups of the card, as well as the `cardTag`.
      parameters:
        - name: cardId
          in: path
          description: The unique identifier of the Card.
          required: true
          schema:
            type: integer
        - name: accessSignature
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
        - name: accessUserId
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: integer
        - name: accessUserIp
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                mccRestrictionGroupId:
                  type: integer
                  description: |
                    The merchant category restriction group (`mccRestrictionGroup`) to apply to the card.
                merchantRestrictionGroupId:
                  type: integer
                  description: |
                    The merchant Id restriction group (`merchantRestrictionGroupId`) to apply to the card.
                countryRestrictionGroupId:
                  type: integer
                  description: |
                    The country restriction group (`countryRestrictionGroupId`) to apply to the card.
                accessTag:
                  type: string
                  description: |
                    A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.
                cardTag:
                  type: string
                  description: |
                    This attribute is a string which can store a maximum of 250 characters that you are free to populate to suit your needs
                    <br />
                    You can [read more about tags](/guide/api-basics/objects-tags.html)
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/CardObject'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '403':
          description: Forbidden
          content: {}
        default:
          description: Unexpected error
          content:
            '*/*':
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        errorCode:
                          type: integer
                        errorMessage:
                          type: string
                        additionalInformation:
                          type: array
                          items:
                            type: string
      security:
        - jwt: []
  /v1/cards/CreateVirtual:
    post:
      tags:
        - Cards
      summary: Create Virtual Card
      operationId: postCardVirtual
      description: |
        Create a new virtual card. To use a card, it must be activated (`/v1/cards/{cardId}/Activate`).

        This endpoint requires per-session [SCA](/guide/strong-customer-authentication/introduction.html).
      parameters:
        - name: accessSignature
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
        - name: accessUserId
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: integer
        - name: accessUserIp
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              required:
                - userId
                - walletId
                - permsGroup
                - cardPrint
              type: object
              properties:
                userId:
                  type: integer
                  description: The unique identifier of the cardholder.
                accessTag:
                  type: string
                  description: |
                    A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.
                walletId:
                  type: integer
                  description: The unique identifier of the Wallet the card is attached to.
                permsGroup:
                  type: string
                  description: | 
                    Permissions defining which features are enabled for the Card. See the [Permissions Groups](/guide/cards/permissions-groups.html) article for more information.
                  enum:
                    - TRZ-CU-001
                    - TRZ-CU-002
                    - TRZ-CU-003
                    - TRZ-CU-004
                    - TRZ-CU-005
                    - TRZ-CU-006
                    - TRZ-CU-007
                    - TRZ-CU-008
                    - TRZ-CU-009
                    - TRZ-CU-010
                    - TRZ-CU-011
                    - TRZ-CU-012
                    - TRZ-CU-013
                    - TRZ-CU-014
                    - TRZ-CU-015
                    - TRZ-CU-016	
                cardTag:
                  type: string
                  description: |
                    This attribute is a string which can store a maximum of 250 characters that you are free to populate to suit your needs
                    <br />
                    You can [read more about tags](/guide/api-basics/objects-tags.html)
                batchDeliveryId:
                  type: integer
                  description: |
                    Batch delivery identifier, which value must be between `1` and `238327`.
                    This feature is not enabled by default, see [Customization](/guide/cards/creation.html#customization) for more information.
                limitAtmYear:
                  type: integer
                  description: ATM operations limit for a sliding year. No default value.
                limitAtmMonth:
                  type: integer
                  description: ATM operations limit for a sliding month. No default value.
                limitAtmWeek:
                  type: integer
                  description: ATM operations limit for a sliding week. Default value €2000.
                limitAtmDay:
                  type: integer
                  description: ATM operations limit for a single day. Default value €1000.
                limitAtmAll:
                  type: integer
                  description: ATM operations limit from beginning. No default value.
                limitPaymentYear:
                  type: integer
                  description: POS operations limit for a sliding year. No default value.
                limitPaymentMonth:
                  type: integer
                  description: POS operations limit for a sliding month. No default value.
                limitPaymentWeek:
                  type: integer
                  description: POS operations limit for a sliding week. Default value €3000.
                limitPaymentDay:
                  type: integer
                  description: POS operations limit for a single day. Default value €2000.
                limitPaymentAll:
                  type: integer
                  description: POS operations limit from beginning. No default value.
                paymentDailyLimit:
                  type: number
                  format: float
                  description: | 
                    POS operations limit for a single day including cents. The decimal delimiter must be ".". No default value.

                    For food vouchers use cases only.
                pin: 
                  type: string
                  description: The PIN code value of the card.
                cardPrint:
                  type: string
                  description: |
                    The [Card Program](introduction.html#card-program) to associate to the Card and the options provided with it. This information is shared with you by Treezor.
                anonymous:
                  type: integer
                  description: |
                    Whether the cards are to belong to [Anonymous Users](/guide/users/physical.html#anonymous-users). If so set the value to `1`, otherwise `0`.
                    When set to `1`, there is no embossed name on the card.
                sendToParent:
                  type: integer
                  description: | 
                    Whether the card should be sent to the cardholder's Parent User. 
                    When set to `1`, the delivery address fields will be automatically filled in with the parent user's address.
                mccRestrictionGroupId:
                  type: integer
                  description: |
                    The merchant category restriction group (`mccRestrictionGroup`) to apply to the card.
                merchantRestrictionGroupId:
                  type: integer
                  description: |
                    The merchant Id restriction group (`merchantRestrictionGroupId`) to apply to the card.
                countryRestrictionGroupId:
                  type: integer
                  description: |
                    The country restriction group (`countryRestrictionGroupId`) to apply to the card.
                embossLegalName:
                  type: boolean
                  description: Set to `true` to emboss the cardholder's legal name on the card.
                  default: false
                logoId:
                  type: string
                  description: |
                    The file name of the logo for the card. Learn more in the [Logo](/guide/cards/creation.html#logo-logoid) article.
                logoBackId:
                  type: string
                  description: |
                    The file name of the logo for the back of the card. Learn more in the [Back Logo](/guide/cards/creation.html#back-logo-logobackid) article.
                designCode:
                  type: string
                  description: |
                    The design code of the card. Max. 2 characters. Learn more in the [Designs](/guide/cards/creation.html#designs-designcode) article.
                  format: alphanumeric
                packageId:
                  type: string
                  description: Packaging reference for card shipping. Max. 8 characters.
                deliveryMethod:
                  type: string
                  description: | 
                    The method the manufacturer uses to send the cards (e.g., delivery with or without tracking). 
                    Learn more in the [Card Delivery Method](/guide/cards/creation.html#card-delivery-method-deliverymethod) article.
                pinMailer:
                  type: integer
                  description: |
                    You can request the card manufacturer to send the card PIN code by letter.
                    Learn more in the [Pin Mailer](/guide/cards/creation.html#pin-mailer-pinmailer) article.
                  enum:
                    - 1
                    - 2
                customizedInfo:
                  type: string
                  description: |
                    Customized text to be displayed on the card.

                    If populated, it must: 
                    * Be alphanumeric
                    * Contain at most 27 characters
                    * Not contain `!"#%'(),:;<>?@[]^` or the backtick symbol.
                freeCustomizedInfo:
                  type: string
                  description: |
                    More customized text to be displayed on the card.

                    If populated, it must: 
                    * Be alphanumeric
                    * Contain at most 50 characters
                    * Not contain `!"#%'(),:;<>?@[]^` or the backtick symbol.
                letterCustomizedInfo:
                  type: string
                  description: |
                    Customized text for the letter that is joined to the card.

                    If populated, it must:
                    * Be alphanumeric
                    * Contain at most 50 characters
                    * Not contain `!"#%'(),:;<>?@[]^` or the backtick symbol.
                cardLanguages:
                  type: string
                  description: |
                    The language preferences for the card.

                    Must be alphabetic and max. 8 characters. Format: [ISO 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes).
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/CardObject'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '403':
          description: Forbidden
          content: {}
        default:
          description: Unexpected error
          content:
            '*/*':
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        errorCode:
                          type: integer
                        errorMessage:
                          type: string
                        additionalInformation:
                          type: array
                          items:
                            type: string
      security:
        - jwt: []
  /v1/cards/RequestPhysical:
    post:
      tags:
        - Cards
      summary: Create Physical Card
      operationId: postCardPhysical
      description: |
        Create a new physical card. To use a card, it must be activated (`/cards/{id}/Activate`).

        This endpoint requires per-session [SCA](/guide/strong-customer-authentication/introduction.html).
      parameters:
        - name: accessSignature
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
        - name: accessUserId
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: integer
        - name: accessUserIp
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              required:
                - userId
                - walletId
                - permsGroup
                - cardPrint
              type: object
              properties:
                userId:
                  type: integer
                  description: The unique identifier of the cardholder.
                accessTag:
                  type: string
                  description: |
                    A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.
                walletId:
                  type: integer
                  description: The unique identifier of the Wallet the card is attached to.
                permsGroup:
                  type: string
                  description: | 
                    Permissions defining which features are enabled for the Card. See the [Permissions Groups](/guide/cards/permissions-groups.html) article for more information.
                  enum:
                    - TRZ-CU-001
                    - TRZ-CU-002
                    - TRZ-CU-003
                    - TRZ-CU-004
                    - TRZ-CU-005
                    - TRZ-CU-006
                    - TRZ-CU-007
                    - TRZ-CU-008
                    - TRZ-CU-009
                    - TRZ-CU-010
                    - TRZ-CU-011
                    - TRZ-CU-012
                    - TRZ-CU-013
                    - TRZ-CU-014
                    - TRZ-CU-015
                    - TRZ-CU-016	
                cardTag:
                  type: string
                  description: |
                    This attribute is a string which can store a maximum of 250 characters that you are free to populate to suit your needs
                    <br />
                    You can [read more about tags](/guide/api-basics/objects-tags.html)
                batchDeliveryId:
                  type: integer
                  description: |
                    Batch delivery identifier, which value must be between `1` and `238327`.
                    This feature is not enabled by default, see [Customization](/guide/cards/creation.html#customization) for more information.
                limitAtmYear:
                  type: integer
                  description: ATM operations limit for a sliding year. No default value.
                limitAtmMonth:
                  type: integer
                  description: ATM operations limit for a sliding month. No default value.
                limitAtmWeek:
                  type: integer
                  description: ATM operations limit for a sliding week. Default value €2000.
                limitAtmDay:
                  type: integer
                  description: ATM operations limit for a single day. Default value €1000.
                limitAtmAll:
                  type: integer
                  description: ATM operations limit from beginning. No default value.
                limitPaymentYear:
                  type: integer
                  description: POS operations limit for a sliding year. No default value.
                limitPaymentMonth:
                  type: integer
                  description: POS operations limit for a sliding month. No default value.
                limitPaymentWeek:
                  type: integer
                  description: POS operations limit for a sliding week. Default value €3000.
                limitPaymentDay:
                  type: integer
                  description: POS operations limit for a single day. Default value €2000.
                limitPaymentAll:
                  type: integer
                  description: POS operations limit from beginning. No default value.
                paymentDailyLimit:
                  type: number
                  format: float
                  description: | 
                    POS operations limit for a single day including cents. The decimal delimiter must be ".". No default value.

                    For food vouchers use cases only.
                pin: 
                  type: string
                  description: The PIN code value of the card.
                cardPrint:
                  type: string
                  description: |
                    The [Card Program](introduction.html#card-program) to associate to the Card and the options provided with it. This information is shared with you by Treezor.
                anonymous:
                  type: integer
                  description: |
                    Whether the cards are to belong to [Anonymous Users](/guide/users/physical.html#anonymous-users). If so set the value to `1`, otherwise `0`.
                    When set to `1`, there is no embossed name on the card.
                sendToParent:
                  type: integer
                  description: | 
                    Whether the card should be sent to the cardholder's Parent User. 
                    When set to `1`, the delivery address fields will be automatically filled in with the parent user's address.
                mccRestrictionGroupId:
                  type: integer
                  description: |
                    The merchant category restriction group (`mccRestrictionGroup`) to apply to the card.
                merchantRestrictionGroupId:
                  type: integer
                  description: |
                    The merchant Id restriction group (`merchantRestrictionGroupId`) to apply to the card.
                countryRestrictionGroupId:
                  type: integer
                  description: |
                    The country restriction group (`countryRestrictionGroupId`) to apply to the card.
                embossLegalName:
                  type: boolean
                  description: Set to `true` to emboss the cardholder's legal name on the card.
                  default: false
                logoId:
                  type: string
                  description: |
                    The file name of the logo for the card. Learn more in the [Logo](/guide/cards/creation.html#logo-logoid) article.
                logoBackId:
                  type: string
                  description: |
                    The file name of the logo for the back of the card. Learn more in the [Back Logo](/guide/cards/creation.html#back-logo-logobackid) article.
                designCode:
                  type: string
                  description: |
                    The design code of the card. Max. 2 characters. Learn more in the [Designs](/guide/cards/creation.html#designs-designcode) article.
                  format: alphanumeric
                packageId:
                  type: string
                  description: Packaging reference for card shipping. Max. 8 characters.
                deliveryMethod:
                  type: string
                  description: | 
                    The method the manufacturer uses to send the cards (e.g., delivery with or without tracking). 
                    Learn more in the [Card Delivery Method](/guide/cards/creation.html#card-delivery-method-deliverymethod) article.
                pinMailer:
                  type: integer
                  description: |
                    You can request the card manufacturer to send the card PIN code by letter.
                    Learn more in the [Pin Mailer](/guide/cards/creation.html#pin-mailer-pinmailer) article.
                  enum:
                    - 1
                    - 2
                customizedInfo:
                  type: string
                  description: |
                    Customized text to be displayed on the card.

                    If populated, it must: 
                    * Be alphanumeric
                    * Contain at most 27 characters
                    * Not contain `!"#%'(),:;<>?@[]^` or the backtick symbol.
                freeCustomizedInfo:
                  type: string
                  description: |
                    More customized text to be displayed on the card.

                    If populated, it must: 
                    * Be alphanumeric
                    * Contain at most 50 characters
                    * Not contain `!"#%'(),:;<>?@[]^` or the backtick symbol.
                letterCustomizedInfo:
                  type: string
                  description: |
                    Customized text for the letter that is joined to the card.

                    If populated, it must:
                    * Be alphanumeric
                    * Contain at most 50 characters
                    * Not contain `!"#%'(),:;<>?@[]^` or the backtick symbol.
                cardLanguages:
                  type: string
                  description: |
                    The language preferences for the card.

                    Must be alphabetic and max. 8 characters. Format: [ISO 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes).
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/CardObject'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '403':
          description: Forbidden
          content: {}
        default:
          description: Unexpected error
          content:
            '*/*':
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        errorCode:
                          type: integer
                        errorMessage:
                          type: string
                        additionalInformation:
                          type: array
                          items:
                            type: string
      security:
        - jwt: []
  /v1/cards/Register3DS:
    post:
      tags:
        - Cards
      summary: Register 3D secure
      operationId: post3ds
      description: |
        Register a card to 3D secure service. The user's mobile number must begin with `+`, or `00`, and the country dialing code.
      parameters:
        - name: accessSignature
          deprecated: true
          in: query
          description: Legacy attribute, do not use.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              required:
                - cardId
              type: object
              properties:
                cardId:
                  type: integer
                  description: The unique identifier of the card.
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
               $ref: '#/components/schemas/CardObject'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '403':
          description: Forbidden
          content: {}
        default:
          description: Unexpected error
          content:
            '*/*':
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        errorCode:
                          type: integer
                        errorMessage:
                          type: string
                        additionalInformation:
                          type: array
                          items:
                            type: string
      security:
        - jwt: []
  /v1/cardimages:
    get:
      tags:
        - Cards
      summary: Get Card Image
      description: | 
        Retrieve a virtual card image.

        This endpoint requires per-operation [SCA](/guide/strong-customer-authentication/introduction.html).
      operationId: getCardImage
      parameters:
        - name: accessSignature
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
        - name: accessTag
          in: query
          description: |
            A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.
          schema:
            type: string
        - name: cardId
          in: query
          description: The unique identifier of the virtual card.
          required: true
          schema:
            type: integer
        - name: accessUserId
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: integer
        - name: accessUserIp
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: object
                properties:
                  cardimages:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          description: The unique identifier of the Card Image.
                        cardId:
                          type: string
                          description: The unique identifier of the Card.
                        file:
                          pattern: >-
                            ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          description: The image of the Card.
                          format: byte
        '400':
          $ref: '#/components/responses/BadRequestError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        default:
          description: Unexpected error
          content:
            '*/*':
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        errorCode:
                          type: integer
                        errorMessage:
                          type: string
                        additionalInformation:
                          type: array
                          items:
                            type: string
      security:
        - jwt: []
  /v1/cards/{cardId}/Activate:
    put:
      tags:
        - Cards
      summary: Activate Card
      operationId: activateCard
      description: |
        Activate the Card (updating the `isLive` attribute to `1`). A Card must be activated to be used.

        This endpoint requires per-operation [SCA](/guide/strong-customer-authentication/introduction.html).
      parameters:
        - name: cardId
          in: path
          description: The unique identifier of the Card.
          required: true
          schema:
            type: integer
        - name: accessToken
          in: query
          deprecated: true
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
        - name: accessSignature
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
        - name: accessUserId
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: integer
        - name: accessUserIp
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                accessTag:
                  type: string
                  description: |
                    A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CardObject'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        default:
          description: Unexpected error
          content:
            '*/*':
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        errorCode:
                          type: integer
                        errorMessage:
                          type: string
                        additionalInformation:
                          type: array
                          items:
                            type: string
      security:
        - jwt: []
  /v1/cards/{cardToken}/public-token-activation:
    put:
      tags:
        - Cards
      summary: Activate Card Public Token
      operationId: activateCardToken
      description: |
        Activate the Card (updating the `isLive` attribute to `1`). Ideal for end-user oriented action. A Card must be activated to be used.

        This endpoint requires per-operation [SCA](/guide/strong-customer-authentication/introduction.html).
      parameters:
        - name: cardToken
          in: path
          description: The `publicToken` of the Card.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CardObject'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        default:
          description: Unexpected error
          content:
            '*/*':
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        errorCode:
                          type: integer
                        errorMessage:
                          type: string
                        additionalInformation:
                          type: array
                          items:
                            type: string
      security:
        - jwt: []
  /v1/cards/{cardId}/Assign:
    put:
      tags:
        - Cards
      summary: Reassign Card
      operationId: reassignCard
      description: |
        Assign the Card to another User or Wallet.
      parameters:
        - name: cardId
          in: path
          description: The unique identifier of the Card to reassign.
          required: true
          schema:
            type: integer
        - name: accessToken
          in: query
          deprecated: true
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
        - name: accessSignature
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: integer
                  description: |
                    `userId` and `walletId` can both be provided. `userId` is mandatory if `walletId` is not provided.
                walletId:
                  type: integer
                  description: |
                    `userId` and `walletId` can both be provided. `userId` is mandatory if `walletId` is not provided.
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CardObject'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        default:
          description: Unexpected error
          content:
            '*/*':
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        errorCode:
                          type: integer
                        errorMessage:
                          type: string
                        additionalInformation:
                          type: array
                          items:
                            type: string
      security:
        - jwt: []
  /v1/cards/{cardId}/ChangePIN:
    put:
      tags:
        - Cards
      summary: Change Card PIN
      operationId: changePin
      description: | 
        Change the Card PIN code knowing the current one.

        This endpoint requires per-operation [SCA](/guide/strong-customer-authentication/introduction.html).
      parameters:
        - name: cardId
          in: path
          description: The unique identifier of the Card.
          required: true
          schema:
            type: integer
        - name: accessSignature
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
        - name: accessUserId
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: integer
        - name: accessUserIp
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              required:
                - currentPIN
                - newPIN
                - confirmPIN
              type: object
              properties:
                currentPIN:
                  type: string
                  description: The current PIN code of the card.
                newPIN:
                  type: string
                  description: The new PIN code of the card.
                confirmPIN:
                  type: string
                  description: The confirmation of the new PIN code of the card.              
                accessTag:
                  type: string
                  description: |
                    A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CardObject'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        default:
          description: Unexpected error
          content:
            '*/*':
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        errorCode:
                          type: integer
                        errorMessage:
                          type: string
                        additionalInformation:
                          type: array
                          items:
                            type: string
      security:
        - jwt: []
  /v1/cards/{cardId}/ConvertVirtual:
    put:
      tags:
        - Cards
      summary: Convert virtual card to physical
      operationId: convertVirtual
      description: |
        Convert a virtual Card into a physical one. The converted card will be both virtual and physical.
      parameters:
        - name: cardId
          in: path
          description: The unique identifier of the Card to convert.
          required: true
          schema:
            type: integer
        - name: accessSignature
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
        - name: accessUserId
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: integer
        - name: accessUserIp
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:              
                accessTag:
                  type: string
                  description: |
                    A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CardObject'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        default:
          description: Unexpected error
          content:
            '*/*':
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        errorCode:
                          type: integer
                        errorMessage:
                          type: string
                        additionalInformation:
                          type: array
                          items:
                            type: string
      security:
        - jwt: []
  /v1/cards/{cardId}/Limits:
    put:
      tags:
        - Cards
      summary: Update Card Limits
      operationId: putLimits
      description: | 
        Modify the Card limits.

        This endpoint requires per-operation [SCA](/guide/strong-customer-authentication/introduction.html).
      parameters:
        - name: cardId
          in: path
          description: The unique identifier of the Card.
          required: true
          schema:
            type: integer
        - name: accessSignature
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
        - name: accessUserId
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: integer
        - name: accessUserIp
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: integer
                  description: The unique identifier of the cardholder.
                accessTag:
                  type: string
                  description: |
                    A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.
                limitAtmYear:
                  type: integer
                  description: ATM operations limit for a sliding year. No default value.
                limitAtmMonth:
                  type: integer
                  description: ATM operations limit for a sliding month. No default value.
                limitAtmWeek:
                  type: integer
                  description: ATM operations limit for a sliding week. Default value €2000.
                limitAtmDay:
                  type: integer
                  description: ATM operations limit for a single day. Default value €1000.
                limitAtmAll:
                  type: integer
                  description: ATM operations limit from beginning. No default value.
                limitPaymentYear:
                  type: integer
                  description: POS operations limit for a sliding year. No default value.
                limitPaymentMonth:
                  type: integer
                  description: POS operations limit for a sliding month. No default value.
                limitPaymentWeek:
                  type: integer
                  description: POS operations limit for a sliding week. Default value €3000.
                limitPaymentDay:
                  type: integer
                  description: POS operations limit for a single day. Default value €2000.
                limitPaymentAll:
                  type: integer
                  description: POS operations limit from beginning. No default value.
                paymentDailyLimit:
                  type: number
                  format: float
                  description: POS operations limit for a single day including cents. The decimal delimiter must be ".". No default value.
                restrictionGroupLimits:
                  type: object
                  properties:
                    mccRestrictionGroups:
                      type: array
                      minItems: 1
                      uniqueItems: true
                      items:
                        type: integer
                        format: int64
                      description: List of MCC (Merchant Category Code) Restriction Groups.
                    countryRestrictionGroups:
                      type: array
                      minItems: 1
                      uniqueItems: true
                      items:
                        type: integer
                        format: int64
                      description: List of Country Restriction Groups.
                    merchantIdRestrictionGroups:
                      type: array
                      minItems: 1
                      uniqueItems: true
                      items:
                        type: integer
                        format: int64
                      description: List of Merchant ID Restriction Groups.
                  required:
                    - mccRestrictionGroups
                    - countryRestrictionGroups
                    - merchantIdRestrictionGroups
                  description: |
                    Group of limits based on Restriction Groups. For now, only Restaurant Payment Vouchers with `paymentDailyLimit` can use this field.
                    Furthermore, one of `mccRestrictionGroups`, `countryRestrictionGroups` or `merchantIdRestrictionGroups` must bepresent (i.e., `paymentDailyLimit` can't be alone).
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CardObject'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        default:
          description: Unexpected error
          content:
            '*/*':
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        errorCode:
                          type: integer
                        errorMessage:
                          type: string
                        additionalInformation:
                          type: array
                          items:
                            type: string
      security:
        - jwt: []
  /v1/cards/{cardId}/LockUnlock:
    put:
      tags:
        - Cards
      summary: Update Card Lock Status
      operationId: updateBlockStatus
      description: | 
        Block or unblock a card.

        This endpoint requires per-operation [SCA](/guide/strong-customer-authentication/introduction.html).
      parameters:
        - name: cardId
          in: path
          description: The unique identifier of the Card.
          required: true
          schema:
            type: integer
        - name: accessSignature
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
        - name: accessUserId
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: integer
        - name: accessUserIp
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              required:
                - lockStatus
              type: object
              properties:
                lockStatus:
                  type: integer
                  description: |
                    The Status of the card, indicating whether it is locked, lost, or destroyed for instance.
                    While this field is an integer, it returns a plaintext value. See the full list of `lockStatus`in the [Block a Card](/guide/cards/modification.html#status) article.
                accessTag:
                  type: string
                  description: |
                    A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CardObject'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        default:
          description: Unexpected error
          content:
            '*/*':
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        errorCode:
                          type: integer
                        errorMessage:
                          type: string
                        additionalInformation:
                          type: array
                          items:
                            type: string
      security:
        - jwt: []
  /v1/cards/{cardId}/Options:
    put:
      tags:
        - Cards
      summary: Update Card Options
      description: | 
        Modify the Card permissions group.

        This endpoint requires per-operation [SCA](/guide/strong-customer-authentication/introduction.html).
      operationId: cardOptions
      parameters:
        - name: cardId
          in: path
          description: The unique identifier of the Card.
          required: true
          schema:
            type: integer
        - name: accessSignature
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
        - name: accessUserId
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: integer
        - name: accessUserIp
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              required:
                - nfc
                - foreign
                - online
                - atm
              type: object
              properties:
                foreign:
                  type: integer
                  description: Whether or not the card is usable abroad.
                online:
                  type: integer
                  description: Whether or not the card is usable online.
                atm:
                  type: integer
                  description: Whether or not the card is usable on ATMs (withdrawal).
                nfc:
                  type: integer
                  description: Whether or not the card can be used for contactless payments.
                accessTag:
                  type: string
                  description: |
                    A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CardObject'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        default:
          description: Unexpected error
          content:
            '*/*':
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        errorCode:
                          type: integer
                        errorMessage:
                          type: string
                        additionalInformation:
                          type: array
                          items:
                            type: string
      security:
        - jwt: []
  /v1/cards/{cardId}/Regenerate:
    put:
      tags:
        - Cards
      summary: Regenerate Card
      operationId: regenerateCard
      description: |
        Recreate the card image if the card is unlocked.
      parameters:
        - name: cardId
          in: path
          description: The unique identifier of the Card to convert.
          required: true
          schema:
            type: integer
        - name: accessSignature
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
        - name: accessUserId
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: integer
        - name: accessUserIp
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:              
                accessTag:
                  type: string
                  description: |
                    A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CardObject'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        default:
          description: Unexpected error
          content:
            '*/*':
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        errorCode:
                          type: integer
                        errorMessage:
                          type: string
                        additionalInformation:
                          type: array
                          items:
                            type: string
      security:
        - jwt: []
  /v1/cards/{cardId}/setPIN:
    put:
      tags:
        - Cards
      summary: Set Card PIN
      operationId: setPin
      description: | 
        Overwrite the Card PIN code.

        This endpoint requires per-operation [SCA](/guide/strong-customer-authentication/introduction.html).
      parameters:
        - name: cardId
          in: path
          description: The unique identifier of the Card to convert.
          required: true
          schema:
            type: integer
        - name: accessSignature
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
        - name: accessUserId
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: integer
        - name: accessUserIp
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              required:
                - newPIN
                - confirmPIN
              properties:              
                accessTag:
                  type: string
                  description: |
                    A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.
                newPIN:
                  type: string
                  description: The new PIN code of the card.
                confirmPIN:
                  type: string
                  description: Confirmation of the value of the new PIN code of the card.
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CardObject'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        default:
          description: Unexpected error
          content:
            '*/*':
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        errorCode:
                          type: integer
                        errorMessage:
                          type: string
                        additionalInformation:
                          type: array
                          items:
                            type: string
      security:
        - jwt: []

  /v1/cards/{cardId}/UnblockPIN:
    put:
      tags:
        - Cards
      summary: Unblock Card PIN
      description: | 
        Unblock the Card PIN code.

        This endpoint requires per-operation [SCA](/guide/strong-customer-authentication/introduction.html).
      operationId: unblockPin
      parameters:
        - name: cardId
          in: path
          description: The unique identifier of the Card to convert.
          required: true
          schema:
            type: integer
        - name: accessSignature
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
        - name: accessUserId
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: integer
        - name: accessUserIp
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:              
                accessTag:
                  type: string
                  description: |
                    A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CardObject'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        default:
          description: Unexpected error
          content:
            '*/*':
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        errorCode:
                          type: integer
                        errorMessage:
                          type: string
                        additionalInformation:
                          type: array
                          items:
                            type: string
      security:
        - jwt: []
  /v1/cards/{cardId}/unblockcvc2:
    put:
      tags:
        - Cards
      summary: Unblock Card CVC2 
      operationId: unblockCvc
      description: |
        Unblock a Card whose CVC2 is locked.
      parameters:
        - name: cardId
          in: path
          description: The unique identifier of the Card.
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: successfully unblocked.
        '400':
          $ref: '#/components/responses/BadRequestError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt: []
  /v1/cards/{cardId}/authentication-methods:
    get:
      tags:
        - Card 3DSecure Enrollment (SCA)
      summary: Get Authenticaton Methods
      operationId: getAuthMethods
      description: | 
        Retrieve the authentication methods of a Card.
      parameters:
        - name: cardId
          in: path
          description: The unique identifier of the Card.
          required: true 
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  publicToken:
                    type: string
                    description: The public token of the Card
                  id:
                    type: string
                    description: The unique identifier of the authentication method.
                  method:
                    type: string
                    description: The method used, either `OOB` or `OTPSMS`
                  system:
                    type: string
        '400':
          $ref: '#/components/responses/BadRequestError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt: []
    post:
      tags:
        - Card 3DSecure Enrollment (SCA)
      summary: Create Authenticaton Methods
      operationId: postAuthMethods
      description: | 
        Define the authentication method of a Card.
      parameters:
        - name: cardId
          in: path
          description: The unique identifier of the Card.
          required: true 
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                method:
                  type: string
                  description: The authentication method.
                  default: 'OOB'
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  publicToken:
                    type: string
                    description: The public token of the Card
                  id:
                    type: string
                    description: The unique identifier of the authentication method.
                  method:
                    type: string
                    description: The method used, either `OOB` or `OTPSMS`
                  system:
                    type: string
        '400':
          $ref: '#/components/responses/BadRequestError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt: []
  /v1/cards/{cardId}/authentication-methods/{methodId}:
    get:
      tags:
          - Card 3DSecure Enrollment (SCA)
      summary: Get Authentication Method
      description: Retrieve details regarding the authentication method of a Card
      operationId: getAuthMethodsDetails
      parameters:
        - name: cardId
          in: path
          description: The unique identifier of the Card.
          required: true
          schema:
            type: string
        - name: methodId
          in: path
          description: The unique identifier of the authentication method.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Unknown card ID
          content: { }
        '404':
          description: Auth method not found
          content: { }
        '500':
          description: Internal server error
          content: { }
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt: []
    delete:
      tags:
        - Card 3DSecure Enrollment (SCA)
      summary: Delete Authentication Method
      description: Delete the authentication method of a Card. Only available for OOB method.
      operationId: deleteAuthMethods
      parameters:
        - name: cardId
          in: path
          description: The unique identifier of the Card.
          required: true
          schema:
            type: string
        - name: methodId
          in: path
          description: The unique identifier of the authentication method.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: The auth method has been removed
          content: { }
        '400':
          description: Unknown card ID
          content: { }
        '404':
          description: Auth method not found
          content: { }
        '500':
          description: Internal server error
          content: { }
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt: []
  /v1/cards/{cardId}/renewalDetails:
    get:
      tags:
        - Cards
      summary: Get Renewal Details
      operationId: getRenewalDetails
      description: |
        Retrieve the Card `renewalType`.
      parameters:
        - name: cardId
          in: path
          description: The unique identifier of the Card.
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  cardRenewalDetails:
                    type: array
                    items:
                      type: object
                      properties:
                        renewalType:
                          type: string
                          description: |
                            The type of renewal for the card. Can be:

                            * `A` – Automatic
                            * `N` – Non automatic
                          example: "A"
        '400':
          $ref: '#/components/responses/BadRequestError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt:
          - read_write
          - admin
          - legal
    put:
      tags:
        - Cards
      summary: Update Renewal Details
      operationId: updateRenewalDetails
      description: |
        Update the Card `renewalType`.
      parameters:
        - name: cardId
          in: path
          description: The unique identifier of the Card.
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              required:
                - renewalType
              type: object
              properties:
                renewalType:
                  type: string
                  description: |
                    The type of renewal for the card. Can be:

                    * `A` – Automatic
                    * `N` – Non automatic
                  enum: [ "A", "N" ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  cardRenewalDetails:
                    type: array
                    items:
                      type: object
                      properties:
                        renewalType:
                          type: string
                          description: |
                            The type of renewal for the card. Can be:

                            * `A` – Automatic
                            * `N` – Non automatic
                          example: "A"
        '400':
          $ref: '#/components/responses/BadRequestError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt:
          - read_write
          - admin
          - legal
  /v1/cards/{cardId}/renew:
    put:
      tags:
        - Cards
      summary: Renew Card
      operationId: putRenew
      description: |
        Renew a Card manually.
      parameters:
        - name: cardId
          in: path
          description: The unique identifier of the Card.
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CardObject'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        default:
          description: Unexpected error
          content:
            '*/*':
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        errorCode:
                          type: integer
                        errorMessage:
                          type: string
                        additionalInformation:
                          type: array
                          items:
                            type: string
      security:
        - jwt:
          - read_write
          - admin
          - legal
  /v1/digitalizedCards/{cardId}:
    get:
      security:
        - jwt: []
      description: |
        Get the list of digitalized card id by the cardID.
      summary: Get the list of digitalized card id by the cardID
      operationId: getDigitalized
      tags: 
        - Digitalized Cards
      parameters:
        - name: cardId
          schema:
            $ref: '#/components/schemas/DigitalizedCardsCardID'
          in: path
          required: true
      responses:
        '200':
          description: successfully retrieve of the list.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DigitalizedCardsListDigitalizedCardResponse'
        '400':
          description: one of input is invalid or missing.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DigitalizedCardsBadRequest'
        '401':
          description: user is not authorized to do this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DigitalizedCardsUnauthorizedError'
        '404':
          description: digitalized card does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DigitalizedCardsNotFound'
        '500':
          description: internal error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DigitalizedCardsInternalError'
  
  /v1/digitalizedCard/{id}:
    put:
      security:
        - jwt: []
      description: |
        Update the status of a payment Token.
      summary: Update the status of a payment Token
      operationId: putDigitalized
      tags: 
        - Digitalized Cards
      parameters:
        - name: id
          schema:
            $ref: '#/components/schemas/DigitalizedCardsDigitalizedCardID'
          in: path
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DigitalizedCardsPutDigitalizedCardRequest'
      responses:
        '200':
          description: successfully retrieve.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DigitalizedCardsPutDigitalizedCardResponse'
        '400':
          description: one of input is invalid or missing, or else card is not unlock.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DigitalizedCardsBadRequest'
        '401':
          description: user is not authorized to do this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DigitalizedCardsUnauthorizedError'
        '404':
          description: digitalized card does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DigitalizedCardsNotFound'
        '500':
          description: internal error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DigitalizedCardsInternalError'
    delete:
      security:
        - jwt: []
      description: |
        Deactivate a payment Token.
      summary: Deactivate a payment Token
      operationId: deleteDigitalized
      tags: 
        - Digitalized Cards
      parameters:
        - name: id
          schema:
            $ref: '#/components/schemas/DigitalizedCardsDigitalizedCardID'
          in: path
          required: true
        - in: query
          name: reasonCode
          description: The reason code is required only if the card is on Mastercard System.
          schema:
            $ref: '#/components/schemas/DigitalizedCardsReasonCode'
          required: true
      responses:
        '200':
          description: successfully retrieve.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DigitalizedCardsDeactivateDigitalizedCardResponse'
        '400':
          description: one of input is invalid or missing, or else card is not unlock.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DigitalizedCardsBadRequest'
        '401':
          description: user is not authorized to do this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DigitalizedCardsUnauthorizedError'
        '404':
          description: digitalized card does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DigitalizedCardsNotFound'
        '500':
          description: internal error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DigitalizedCardsInternalError'
    get:
      security:
        - jwt: []
      description: Get payment Token.
      summary: Retrieve a payment token
      operationId: getPaymentToken
      tags: 
        - Digitalized Cards
      parameters:
        - name: id
          schema:
            $ref: '#/components/schemas/DigitalizedCardsDigitalizedCardID'
          in: path
          required: true
      responses:
        '200':
          description: successfully retrieve.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DigitalizedCardsGetDigitalizedCardResponse'
        '400':
          description: one of input is invalid or missing.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DigitalizedCardsBadRequest'
        '401':
          description: user is not authorized to do this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DigitalizedCardsUnauthorizedError'
        '404':
          description: digitalized card does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DigitalizedCardsNotFound'
        '500':
          description: internal error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DigitalizedCardsInternalError'
  /v1/cardtransactions:
    get:
      tags:
        - Card Transactions
      summary: Search Card Transactions
      description: |
        Retrieve Card Transactions based at least on one of the following intputs: `cardId`, `paymentId`, `publicToken`, `walletId`. This is the preferred request for end-user-oriented usage.
      operationId: readCardTransaction
      parameters:
        - name: accessSignature
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
        - name: accessTag
          in: query
          description: |
            A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.
          schema:
            type: string
        - name: accessUserId
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: integer
        - name: accessUserIp
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
        - name: cardtransactionId
          in: query
          description: The unique identifier of the Card Transaction.
          schema:
            type: integer
        - name: cardId
          in: query
          description: The unique identifier of the Card.
          schema:
            type: integer
        - name: walletId
          in: query
          description: The unique identifier of the Wallet the card is attached to.
          schema:
            type: integer
        - name: merchantId
          in: query
          description: The Merchant's Id.
          schema:
            type: string
        - name: publicToken
          in: query
          description: The public token of the Card.
          schema:
            type: string
        - name: paymentId
          in: query
          description: The identifier of the payment.
          schema:
            type: integer
        - name: pageNumber
          in: query
          description: |
            The page number, only available on /v1/ endpoints 
          schema:
            type: integer
        - name: pageCount
          in: query
          description: |
            The number of items per page, only available on /v1/ endpoints  
          schema:
            type: integer
        - name: sortBy
          in: query
          description: |
            The transaction element you want to sort the list with. Default value: _createdDate_. 
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  cardtransactions:
                    title: cardtransaction
                    type: array
                    items:
                      type: object
                      properties:
                        cardtransactionId:
                          type: integer
                        cardId:
                          type: integer
                        walletId:
                          type: integer
                        acquirerId:
                          type: integer
                        walletCurrency:
                          type: string
                        merchantId:
                          type: string
                        merchantName:
                          type: string
                        merchantAddress:
                          type: string
                        merchantCity:
                          type: string
                        merchantCountry:
                          type: string
                        mccCode:
                          type: string
                        paymentLocalTime:
                          type: string
                        publicToken:
                          type: string
                        paymentAmount:
                          type: string
                        paymentCurrency:
                          type: string
                          description: |
                            The currency of the payment. Format: [ISO 4217](/guide/api-basics/data-format.html#currencies).
                        fees:
                          type: string
                        paymentCountry:
                          type: string
                        paymentId:
                          type: string
                        paymentStatus:
                          type: string
                          description: |
                            Payment status.

                            | Status | Description | Note |
                            | ------ | -------     | --- |
                            | A | Accepted | |
                            | C | Cleared | Offline transactions are processed asynchroneously. It may take up to several days.|
                            | I | Declined | |
                            | S | Settled | |
                            | V | Reversed | |
                            | M | MoneySend | |
                        paymentLocalAmount:
                          type: string
                        paymentLocalDate:
                          type: string
                        is3DS:
                          type: boolean
                        posCardholderPresence:
                          type: string
                        posPostcode:
                          type: string
                        posCountry:
                          type: string
                        posTerminalId:
                          type: string
                        posCardPresence:
                          type: string
                        panEntryMethod:
                          type: string
                        authorizationNote:
                          type: string
                        authorizationResponseCode:
                          type: string
                          description: |
                            Authorization response code.

                            | Code | Description |
                            | ---- | ----------- |
                            | 00 | All Good |
                            | 01 | Refer to card issuer Refer |
                            | 03 | Invalid merchant Decline |
                            | 05 | Do not honour Decline |
                            | 10 | Partial Approval Approve |
                            | 13 | Invalid amount Decline |
                            | 14 | Invalid card number (no such number) Decline |
                            | 17 | Customer Cancellation Decline |
                            | 33 | Expired card (Capture) Decline & Pickup |
                            | 41 | Lost card (Capture) Decline & Pickup |
                            | 43 | Stolen card (Capture) Decline & Pickup |
                            | 51 | Insufficient funds Decline |
                            | 54 | Expired card Decline |
                            | 55 | Incorrect PIN Decline |
                            | 57 | Transaction not permitted to cardholder Decline |
                            | 58 | Transaction not permitted to terminal Decline |
                            | 61 | Exceeds withdrawal amount limit Decline |
                            | 62 | Restricted card Decline |
                            | 63 | Security Violation Decline |
                            | 65 | Exceeds withdrawal frequency limit Decline |
                            | 68 | Response received too late Decline |
                            | 70 | Cardholder to contact issuer Decline |
                            | 75 | Allowable number of PIN tries exceeded Decline |
                            | 82 | Timeout at IEM Decline |
                            | 85 | PIN Unblock request Approve |
                            | 91 | Issuer or switch is inoperative Decline |
                            | N7 | Decline for CVV2 failure Decline |
                        authorizationIssuerId:
                          type: string
                        authorizationIssuerTime:
                          type: string
                        authorizationMti:
                          type: string
                          description: |
                            Authorization Message Type Identifier

                            | MTI | Description |
                            | --- | ----|
                            | 01xx | Authorization message |
                            | 04xx | reversal message |
                            | 12xx | Financial message |
                        authorizedBalance:
                          type: string
                        limitAtmYear:
                          type: string
                        limitAtmMonth:
                          type: string
                        limitAtmWeek:
                          type: string
                        limitAtmDay:
                          type: string
                        limitAtmAll:
                          type: string
                        limitPaymentYear:
                          type: string
                        limitPaymentMonth:
                          type: string
                        limitPaymentWeek:
                          type: string
                        limitPaymentDay:
                          type: string
                        limitPaymentAll:
                          type: string
                        totalLimitAtmYear:
                          type: string
                        totalLimitAtmMonth:
                          type: string
                        totalLimitAtmWeek:
                          type: string
                        totalLimitAtmDay:
                          type: string
                        totalLimitAtmAll:
                          type: string
                        totalLimitPaymentYear:
                          type: string
                        totalLimitPaymentMonth:
                          type: string
                        totalLimitPaymentWeek:
                          type: string
                        totalLimitPaymentDay:
                          type: string
                        totalLimitPaymentAll:
                          type: string
                        cardDigitalizationExternalId:
                          type: string
                        totalRows:
                          type: integer
        '405':
          $ref: '#/components/responses/NotAllowedError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt: []
  /v1/cardtransactions/{cardtransactionId}:
    get:
      tags:
        - Card Transactions
      summary: Get Card Transaction
      description: Retrieve a Card Transaction based on its `id`.
      operationId: getCardtransaction
      parameters:
        - name: cardtransactionId
          in: path
          description: The unique identifier of the Card Transaction.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  cardtransactions:
                    title: cardtransaction
                    type: array
                    items:
                      type: object
                      properties:
                        cardtransactionId:
                          type: integer
                        cardId:
                          type: integer
                        walletId:
                          type: integer
                        acquirerId:
                          type: integer
                        walletCurrency:
                          type: string
                        merchantId:
                          type: string
                        merchantName:
                          type: string
                        merchantAddress:
                          type: string
                        merchantCity:
                          type: string
                        merchantCountry:
                          type: string
                        mccCode:
                          type: string
                        paymentLocalTime:
                          type: string
                        publicToken:
                          type: string
                        paymentAmount:
                          type: string
                        paymentCurrency:
                          type: string
                          description: |
                            The currency of the payment. Format: [ISO 4217](/guide/api-basics/data-format.html#currencies).
                        fees:
                          type: string
                        paymentCountry:
                          type: string
                        paymentId:
                          type: string
                        paymentStatus:
                          type: string
                          description: |
                            Payment status.

                            | Status | Description | Note |
                            | ------ | -------     | --- |
                            | A | Accepted | |
                            | C | Cleared | Offline transactions are processed asynchroneously. It may take up to several days.|
                            | I | Declined | |
                            | S | Settled | |
                            | V | Reversed | |
                            | M | MoneySend | |
                        paymentLocalAmount:
                          type: string
                        paymentLocalDate:
                          type: string
                        is3DS:
                          type: boolean
                        posCardholderPresence:
                          type: string
                        posPostcode:
                          type: string
                        posCountry:
                          type: string
                        posTerminalId:
                          type: string
                        posCardPresence:
                          type: string
                        panEntryMethod:
                          type: string
                        authorizationNote:
                          type: string
                        authorizationResponseCode:
                          type: string
                          description: |
                            Authorization response code.

                            | Code | Description |
                            | ---- | ----------- |
                            | 00 | All Good |
                            | 01 | Refer to card issuer Refer |
                            | 03 | Invalid merchant Decline |
                            | 05 | Do not honour Decline |
                            | 10 | Partial Approval Approve |
                            | 13 | Invalid amount Decline |
                            | 14 | Invalid card number (no such number) Decline |
                            | 17 | Customer Cancellation Decline |
                            | 33 | Expired card (Capture) Decline & Pickup |
                            | 41 | Lost card (Capture) Decline & Pickup |
                            | 43 | Stolen card (Capture) Decline & Pickup |
                            | 51 | Insufficient funds Decline |
                            | 54 | Expired card Decline |
                            | 55 | Incorrect PIN Decline |
                            | 57 | Transaction not permitted to cardholder Decline |
                            | 58 | Transaction not permitted to terminal Decline |
                            | 61 | Exceeds withdrawal amount limit Decline |
                            | 62 | Restricted card Decline |
                            | 63 | Security Violation Decline |
                            | 65 | Exceeds withdrawal frequency limit Decline |
                            | 68 | Response received too late Decline |
                            | 70 | Cardholder to contact issuer Decline |
                            | 75 | Allowable number of PIN tries exceeded Decline |
                            | 82 | Timeout at IEM Decline |
                            | 85 | PIN Unblock request Approve |
                            | 91 | Issuer or switch is inoperative Decline |
                            | N7 | Decline for CVV2 failure Decline |
                        authorizationIssuerId:
                          type: string
                        authorizationIssuerTime:
                          type: string
                        authorizationMti:
                          type: string
                          description: |
                            Authorization Message Type Identifier

                            | MTI | Description |
                            | --- | ----|
                            | 01xx | Authorization message |
                            | 04xx | reversal message |
                            | 12xx | Financial message |
                        authorizedBalance:
                          type: string
                        limitAtmYear:
                          type: string
                        limitAtmMonth:
                          type: string
                        limitAtmWeek:
                          type: string
                        limitAtmDay:
                          type: string
                        limitAtmAll:
                          type: string
                        limitPaymentYear:
                          type: string
                        limitPaymentMonth:
                          type: string
                        limitPaymentWeek:
                          type: string
                        limitPaymentDay:
                          type: string
                        limitPaymentAll:
                          type: string
                        totalLimitAtmYear:
                          type: string
                        totalLimitAtmMonth:
                          type: string
                        totalLimitAtmWeek:
                          type: string
                        totalLimitAtmDay:
                          type: string
                        totalLimitAtmAll:
                          type: string
                        totalLimitPaymentYear:
                          type: string
                        totalLimitPaymentMonth:
                          type: string
                        totalLimitPaymentWeek:
                          type: string
                        totalLimitPaymentDay:
                          type: string
                        totalLimitPaymentAll:
                          type: string
                        cardDigitalizationExternalId:
                          type: string
                        totalRows:
                          type: integer
        '405':
          $ref: '#/components/responses/NotAllowedError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt: []
  /v1/countryRestrictionGroups:
    get:
      tags:
        - Country Restriction Groups
      summary: Search Country Restriction Groups
      description: Retrive country restriction groups that match search criteria.
      operationId: getCountryRestrictionGroups
      parameters:
        - name: accessSignature
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
        - name: accessTag
          in: query
          description: |
            A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.
          schema:
            type: string
        - name: accessUserId
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: integer
        - name: accessUserIp
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
        - name: fields
          in: query
          description: List of the object properties you want to pick up.
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: filter
          in: query
          description: |
            You can filter the API response by using filter(s).
            Filterable fields are:
              - id
              - name
              - isWhitelist
              - status
              - startDate
              - createdDate

            Filters should be separated by a ";". Example for 3 filters: FILTER1;FILTER2;FILTER3.

            A single filter has the following syntax: "fieldName criterion expression", where:
              - fieldName: the name of a filterable field of this object.
              - expression: the values to be included or excluded (see the table below for more information)
              - criterion: a filter criterion.

            Here are the possible values for criterion:

            | Criteria |         Description    |                   Type                   | Expression Example |
            |----------|------------------------|------------------------------------------|--------------------|
            |     >    |      greater than      |            alphanumeric string           |         100        |
            |    >=    | greater or equal than  |            alphanumeric string           |         100        |
            |     <    |        less than       |            alphanumeric string           |         100        |
            |    <=    |   less or equal than   |            alphanumeric string           |         100        |
            |    !=    |      not equal to      |            alphanumeric string           |         100        |
            |   like   |          like          |            alphanumeric string           |         100        |
            |    in    |           in           | alphanumeric strings separated by commas |      100,30,25     |
            |    ==    |         equals         |            alphanumeric string           |         100        |
          schema:
            type: string
        - name: pageNumber
          in: query
          description: |
            The page number, only available on /v1/ endpoints 
          schema:
            type: integer
        - name: pageCount
          in: query
          description: |
            The number of items per page, only available on /v1/ endpoints  
          schema:
            type: integer
        - name: sortBy
          in: query
          description: |
            The transaction element you want to sort the list with.
          schema:
            type: string
            default: createdDate
        - name: sortOrder
          in: query
          description: |
            The order you want to sort the list.
          schema:
            type: string
            default: DESC
            enum:
              - DESC
              - ASC
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  countryRestrictionGroups:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          description: The unique identifier of the Country Group.
                        name:
                          type: string
                          description: The name the Country Group.
                        isWhitelist:
                          type: boolean
                          description: |
                            Indicates the kind of restriction: 
                             * `true` (default) – Allows only a specified list of countries (whitelist)
                             * `false` – Allows all countries except the specified list (blacklist)
                        countries:
                          type: array
                          description: The list of countries (each item is a string).
                          items:
                            type: string
                        status:
                          type: string
                          description: The status of the Country Group.
                          enum:
                            - PENDING
                            - CANCELED
                            - VALIDATED
                        startDate:
                          type: string
                          description: | 
                            The date and time at which the restriction starts. Format: YYYY-MM-DD HH:MM:SS
                        createdDate:
                          type: string
                          description: | 
                            The date and time at which the restriction group was created. Format: YYYY-MM-DD HH:MM:SS
        '405':
          $ref: '#/components/responses/NotAllowedError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt: []
    post:
      tags:
        - Country Restriction Groups
      summary: Create Country Restriction Group
      description: Create a new country restriction group.
      operationId: postCountryRestrictionGroup
      parameters:
        - name: accessSignature
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
        - name: accessTag
          in: query
          description: |
            A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.
          schema:
            type: string
        - name: accessUserId
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: integer
        - name: accessUserIp
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
        - name: fields
          in: query
          description: List of the object properties you want to pick up.
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
      requestBody:
        content:
          application/json:
            schema:
              required:
                - countries
                - name
              type: object
              properties:
                name:
                  type: string
                  description: The name of the Country Group.
                status:
                  type: string
                  description: The status of the Country Group.
                  enum:
                    - VALIDATED
                    - PENDING
                    - CANCELED
                isWhitelist:
                  type: boolean
                  description: |
                    Indicates the kind of restriction: 
                      * `true` (default) – Allows only a specified list of countries (whitelist)
                      * `false` – Allows all countries except the specified list (blacklist)
                  default: true
                countries:
                  type: array
                  description: List of countries (each item is a string).
                  items:
                    type: integer
                startDate:
                  type: string
                  description: | 
                    The date and time at which the restriction starts. Format: YYYY-MM-DD HH:MM:SS
                  format: datetime
        required: false
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  countryRestrictionGroups:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          description: The unique identifier of the Country Group.
                        name:
                          type: string
                          description: The name of the Country Group.
                        isWhitelist:
                          type: boolean
                          description: |
                            Indicates the kind of restriction: 
                             * `true` (default) – Allows only a specified list of countries (whitelist)
                             * `false` – Allows all countries except the specified list (blacklist)
                        countries:
                          type: array
                          description: Array of countries
                          items:
                            type: string
                        status:
                          type: string
                          description: The status of the Country Group.
                          enum:
                            - PENDING
                            - CANCELED
                            - VALIDATED
                        startDate:
                          type: string
                          description: | 
                            The date and time at which the restriction starts. Format: YYYY-MM-DD HH:MM:SS
                        createdDate:
                          type: string
                          description: | 
                            The date and time at which the restriction group was created. Format: YYYY-MM-DD HH:MM:SS
        '405':
          $ref: '#/components/responses/NotAllowedError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt: []
  /v1/countryRestrictionGroups/{id}:
    get:
      tags:
        - Country Restriction Groups
      summary: Get Country Restriction Group
      description: Retrive a Country Restriction Group based on its `id`.
      operationId: getCountryRestrictionGroupsId
      parameters:
        - name: id
          in: path
          description: The unique identifier of the Country Group.
          required: true
          schema:
            type: integer
            format: int64
        - name: fields
          in: query
          description: List of the object properties you want to pick up.
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  countryRestrictionGroups:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          description: The unique identifier of the Country Group.
                        name:
                          type: string
                          description: The name of the Country Group.
                        isWhitelist:
                          type: boolean
                          description: |
                            Indicates the kind of restriction: 
                             * `true` (default) – Allows only a specified list of countries (whitelist)
                             * `false` – Allows all countries except the specified list (blacklist)
                        countries:
                          type: array
                          description: List of countries (each item is a string).
                          items:
                            type: string
                        status:
                          type: string
                          description: The status of the Country Group.
                          enum:
                            - PENDING
                            - CANCELED
                            - VALIDATED
                        startDate:
                          type: string
                          description: | 
                            The date and time at which the restriction starts. Format: YYYY-MM-DD HH:MM:SS
                        createdDate:
                          type: string
                          description: | 
                            The date and time at which the restriction group was created. Format: YYYY-MM-DD HH:MM:SS
        '405':
          $ref: '#/components/responses/NotAllowedError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt: []
    put:
      tags:
        - Country Restriction Groups
      summary: Update Country Restriction Group
      description: Edit a country restriction group.
      operationId: putCountryRestrictionGroups
      parameters:
        - name: id
          in: path
          description: The unique identifier of the Country Group.
          required: true
          schema:
            type: integer
        - name: accessSignature
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
        - name: accessTag
          in: query
          description: |
            A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.
          schema:
            type: string
        - name: accessUserId
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: integer
        - name: accessUserIp
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The name of the Country Group.
                status:
                  type: string
                  description: The status of the Country Group.
                  enum:
                    - VALIDATED
                    - PENDING
                    - CANCELED
                isWhitelist:
                  type: boolean
                  description: |
                    Indicates the kind of restriction: 
                      * `true` (default) – Allows only a specified list of countries (whitelist)
                      * `false` – Allows all countries except the specified list (blacklist)
                  default: true
                countries:
                  type: array
                  description: List of countries (each item is a string).
                  items:
                    type: integer
                startDate:
                  type: string
                  description: | 
                    The date and time at which the restriction starts. Format: YYYY-MM-DD HH:MM:SS
                  format: datetime
                fields:
                  type: array
                  description: List of the object properties you want to pick up.
                  items:
                    type: string
        required: false
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  countryRestrictionGroups:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          description: The unique identifier of the Country Restriction Group.
                        name:
                          type: string
                          description: The name of the Country Restriction Group.
                        isWhitelist:
                          type: boolean
                          description: |
                            Indicates the kind of restriction: 
                             * `true` (default) – Allows only a specified list of countries (whitelist)
                             * `false` – Allows all countries except the specified list (blacklist)
                        countries:
                          type: array
                          description: List of countries (each item is a string).
                          items:
                            type: string
                        status:
                          type: string
                          description: The status of the Country Restriction Group.
                          enum:
                            - PENDING
                            - CANCELED
                            - VALIDATED
                        startDate:
                          type: string
                          description: | 
                            The date and time at which the restriction starts. Format: YYYY-MM-DD HH:MM:SS
                        createdDate:
                          type: string
                          description: | 
                            The date and time at which the restriction group was created. Format: YYYY-MM-DD HH:MM:SS
        '405':
          $ref: '#/components/responses/NotAllowedError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt: []
    delete:
      tags:
        - Country Restriction Groups
      summary: Cancel Country Restriction Group
      description: Cancel a country restriction group.
      operationId: deleteCountryRestrictionGroups
      parameters:
        - name: id
          in: path
          description: The unique identifier of the Country Group.
          required: true
          schema:
            type: integer
            format: int64
        - name: fields
          in: query
          description: List of the object properties you want to pick up.
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  countryRestrictionGroups:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          description: The unique identifier of the Country Group.
                        name:
                          type: string
                          description: The name of the Country Group.
                        isWhitelist:
                          type: boolean
                          description: |
                            Indicates the kind of restriction: 
                             * `true` (default) – Allows only a specified list of countries (whitelist)
                             * `false` – Allows all countries except the specified list (blacklist)
                        countries:
                          type: array
                          description: List of countries (each item is a string).
                          items:
                            type: string
                        status:
                          type: string
                          description: The status of the Country Group.
                          enum:
                            - PENDING
                            - CANCELED
                            - VALIDATED
                        startDate:
                          type: string
                          description: | 
                            The date and time at which the restriction starts. Format: YYYY-MM-DD HH:MM:SS
                        createdDate:
                          type: string
                          description: | 
                            The date and time at which the restriction group was created. Format: YYYY-MM-DD HH:MM:SS
        '405':
          $ref: '#/components/responses/NotAllowedError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt: []
  /v1/documents:
    get:
      tags:
        - User Documents
      summary: Search Documents
      description: Retrieve Documents based on search criteria.
      operationId: getDocuments
      parameters:
        - name: accessSignature
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
        - name: accessTag
          in: query
          description: |
            A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.
          schema:
            type: string
        - name: accessUserId
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: integer
        - name: accessUserIp
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
        - name: documentId
          in: query
          description: The unique identifier of the Document.
          schema:
            type: integer
        - name: documentTag
          in: query
          description: |
            Custom attribute to use as you see fit. Learn more in the [Object tags](/guide/api-basics/objects-tags.html#objects-tags) article.
            <br>Max length: 250 characters 
            <br>Format: hc characters and `/` `!` `-` `_` `.` `*` `'` `(` `)`
          schema:
            type: string
        - name: documentStatus
          in: query
          description: |
            The status of the document.
          schema:
            type: string
            enum:
              - PENDING
              - CANCELED
              - VALIDATED
        - name: documentTypeId
          in: query
          description: Document type id.
          schema:
            type: integer
        - name: documentType
          in: query
          description: The type of the Document.
          schema:
            type: string
        - name: userId
          in: query
          description: The unique identifier of the user the Document belongs to.
          schema:
            type: integer
        - name: userName
          in: query
          description: The name of the user the Document belongs to.
          schema:
            type: string
        - name: userEmail
          in: query
          description: The email of the user the Document belongs to.
          schema:
            type: string
        - name: fileName
          in: query
          description: The name of the Document.
          schema:
            type: string
        - name: fileSize
          in: query
          description: The size of the Document.
          schema:
            type: integer
        - name: fileType
          in: query
          description: The file type of the Document.
          schema:
            type: integer
        - name: isAgent
          in: query
          description: is agent field.
          schema:
            type: string
        - name: pageNumber
          in: query
          description: |
            The page number, only available on /v1/ endpoints 
          schema:
            type: integer
        - name: pageCount
          in: query
          description: |
            The number of items per page, only available on /v1/ endpoints  
          schema:
            type: integer
        - name: sortBy
          in: query
          description: |
            The transaction element you want to sort the list with.
          schema:
            type: string
            default: createdDate
        - name: sortOrder
          in: query
          description: |
            The order you want to sort the list.
          schema:
            type: string
            default: DESC
            enum:
              - DESC
              - ASC
        - name: createdDateFrom
          in: query
          description: |
            The creation date from which you want to filter the request result.
            Format: YYYY-MM-DD HH:MM:SS. 
          schema:
            type: string
            format: date-time
        - name: createdDateTo
          in: query
          description: |
            The creation date up to which you want to filter the request result.
            Format: YYYY-MM-DD HH:MM:SS. 
          schema:
            type: string
            format: date-time
        - name: updatedDateFrom
          in: query
          description: |
            The modification date from which you want to filter the request
            result. Format: YYYY-MM-DD HH:MM:SS. 
          schema:
            type: string
            format: date-time
        - name: updatedDateTo
          in: query
          description: |
            The modification date up to which you want to filter the request
            result. Format: YYYY-MM-DD HH:MM:SS. 
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentObject'
        '405':
          $ref: '#/components/responses/NotAllowedError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt:
          - read_only
    post:
      tags:
        - User Documents
      summary: Create Document
      description: Create a Document.
      operationId: createDocuments
      parameters:
        - name: accessSignature
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
        - name: accessTag
          in: query
          description: |
            A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.
          schema:
            type: string
        - name: accessUserId
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: integer
        - name: accessUserIp
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              required:
                - userId
                - documentTypeId
                - name
                - fileContentBase64
              type: object
              properties:
                documentTag:
                  type: string
                  description: |
                    Custom attribute to use as you see fit. Learn more in the [Object tags](/guide/api-basics/objects-tags.html#objects-tags) article.
                    <br>Max length: 250 characters 
                     <br>Format: hc characters and `/` `!` `-` `_` `.` `*` `'` `(` `)`
                userId:
                  type: integer
                  description: The unique identifier of the User the document belongs to.
                residenceId:
                  type: integer
                  format: int64
                  minimum: 1
                  description: |
                    The unique identifier of the User's [Tax Residence](/guide/user-verification/tax-residence.html). Required if the document type is `24` or `25`. 
                    Shouldn't be provided otherwise.
                documentTypeId:
                  type: integer
                  description: | 
                    The type of document. See the Document [Types](/guide/user-verification/documents.html#types-documenttypeid) article for the list.
                name: 
                  type: string
                  description: The name of the document.
                fileContentBase64:
                  type: string
                  format: byte
                  description: The encoded base64 file content.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentObject'
        '405':
          $ref: '#/components/responses/NotAllowedError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt:
          - read_write
  /v1/documents/{documentId}:
    get:
      tags:
        - User Documents
      summary: Get Document
      description: Retrieve a Document using its `id`.
      operationId: getDocument
      parameters:
        - name: documentId
          in: path
          description: The unique identifier of the Document.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentObject'
        '405':
          $ref: '#/components/responses/NotAllowedError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt:
          - read_only
    put:
      tags:
        - User Documents
      summary: Update Document
      description: Change the `name` of a Document.
      operationId: putDocument
      parameters:
        - name: documentId
          in: path
          description: The unique identifier of the Document.
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name: 
                  type: string
                  description: The name of the document.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentObject'
        '405':
          $ref: '#/components/responses/NotAllowedError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt:
          - read_write
    delete:
      tags:
        - User Documents
      summary: Delete Document
      description: Remove a document.
      operationId: deleteDocument
      parameters:
        - name: documentId
          in: path
          description: The unique identifier of the Document.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentObject'
        '405':
          $ref: '#/components/responses/NotAllowedError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt:
          - read_write
  /v1/documents/{documentId}/download:
    get:
      tags:
        - User Documents
      summary: Get Document Download URL
      description: | 
        Retrieve a Document download URL. You may read [the dedicated documentation for this feature](/guide/user-verification/documents.html#download).
      operationId: getDocumentDownloadUrl
      parameters:
        - name: documentId
          in: path
          description: The unique identifier of the Document.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
        '400':
          $ref: '#/components/responses/BadRequestError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt:
          - read_only
  /v1/issuerInitiatedDigitizationDatas:
    get:
      tags:
        - Issuer Initiated Digitization Data
      summary: Search issuerInitiatedDigitizationData requests
      description: |
        Search tav issuerInitiatedDigitizationData requests that match search criteria.
      operationId: tavrequestget
      parameters:
        - name: accessSignature
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
        - name: accessTag
          in: query
          description: |
            A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.
          schema:
            type: string
        - name: accessUserId
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: integer
        - name: accessUserIp
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
        - name: fields
          in: query
          description: List of the object properties you want to pick up.
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: filter
          in: query
          description: |
            You can filter the API response by using filter(s).

            Filterable fields are:
             - id
             - cardId
             - tokenRequestor
             - statusId
             - createdDate
             - modifiedDate

            Filters should be separated by a ";". Example for 3 filters: FILTER1;FILTER2;FILTER3.

            A single filter has the following syntax : "fieldName criterion expression".

            Where:
             - fieldName: the name of a filterable field of this object.
             - expression: the values to be included or excluded (see table below)
             - criterion: a filter criterion.

            Here are the possible values for criterion:

             | Criteria |         Description    |                   Type                   | Expression Example |
             |----------|------------------------|------------------------------------------|--------------------|
             |     >    |      greater than      |            alphanumeric string           |         100        |
             |    >=    | greater or equal than  |            alphanumeric string           |         100        |
             |     <    |        less than       |            alphanumeric string           |         100        |
             |    <=    |   less or equal than   |            alphanumeric string           |         100        |
             |    !=    |      not equal to      |            alphanumeric string           |         100        |
             |   like   |          like          |            alphanumeric string           |         100        |
             |    in    |           in           | alphanumeric strings separated by commas |      100,30,25     |
             |    ==    |         equals         |            alphanumeric string           |         100        |
          schema:
            type: string
        - name: pageNumber
          in: query
          description: |
            The page number, only available on /v1/ endpoints 
          schema:
            type: integer
        - name: pageCount
          in: query
          description: |
            The number of items per page, only available on /v1/ endpoints  
          schema:
            type: integer
        - name: sortBy
          in: query
          description: |
            The transaction element you want to sort the list with. Default
            value : _createdDate_. 
          schema:
            type: string
        - name: sortOrder
          in: query
          description: |
            The order you want to sort the list.
          schema:
            type: string
            default: DESC
            enum:
              - DESC
              - ASC
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  issuerInitiatedDigitizationDatas:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          description: Tav request Id
                        cardId:
                          type: integer
                          description: The unique identifier of the Card.
                        statusId:
                          type: integer
                          description: |
                            The status ID of the TAV request, which may be:
                            * `1` – The issuerInitiatedDigitizationData has been requested
                            * `2` – The data object can be retrieved.
                        credential:
                          type: string
                        additionnalData:
                          type: array
                          description: |
                            Treezor doesn't persist this information for security reasons.
                          items:
                            type: string
                        tokenRequestor:
                          type: string
                          description: The token requestor also named wallet provider.
                        createdDate:
                          type: string
                        modifiedDate:
                          type: string
        '405':
          $ref: '#/components/responses/NotAllowedError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt: []
    post:
      tags:
        - Issuer Initiated Digitization Data
      summary: Request the issuerInitiatedDigitizationData
      description: | 
        Create a new issuerInitiatedDigitizationData request

        This endpoint requires per-operation [SCA](/guide/strong-customer-authentication/introduction.html).
      operationId: tavRequestPOST
      parameters:
        - name: accessSignature
          deprecated: true
          in: query
          description: Legacy attribute, do not use.
          schema:
            type: string
        - name: accessTag
          in: query
          description: |
            A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.
          schema:
            type: string
        - name: accessUserId
          deprecated: true
          in: query
          description: Legacy attribute, do not use.
          schema:
            type: integer
        - name: accessUserIp
          deprecated: true
          in: query
          description: Legacy attribute, do not use.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              required:
                - cardId
                - tokenRequestor
              type: object
              properties:
                cardId:
                  type: integer
                  description: |
                    The id of the card on which to create an issuerInitiatedDigitizationData request
                tokenRequestor:
                  type: string
                  description: The Token Requestor also named wallet provider.
                  enum:
                    - APPLE
                    - SAMSUNG
                    - GOOGLE
                additionnalData:
                  type: object
                  properties:
                    certificates:
                      type: array
                      description: |
                        The certificate chain. Required when tokenRequestor is
                        APPLE. The first element of array is the leaf
                        certificate and the last should be the root certificate.
                        There can be 0 or several sub certificates inbetween the
                        first element of array and the last. All certificates
                        are of type string (base64 encoded of DER format)
                      items:
                        type: string
                    nonce:
                      type: string
                      description: |
                        The nonce as provided by the Apple SDK. Required when tokenRequestor is `APPLE`
                    nonceSignature:
                      pattern: >-
                        ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                      type: string
                      description: |
                        The nonce signature as provided by the Apple SDK.
                        Required when tokenRequestor is `APPLE`
                      format: byte
                  description: |
                    This parameter is required in the case of `APPLE` tokenRequestor
        required: false
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  issuerInitiatedDigitizationDatas:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          description: Tav request Id
                        cardId:
                          type: integer
                          description: The id of the card
                        statusId:
                          type: integer
                          description: |
                            The status ID of the TAV request; "1" means the
                            "issuerInitiatedDigitizationData have been
                            requested", "2" means that the data object can be
                            retrieved.
                        credential:
                          type: string
                        additionnalData:
                          type: array
                          description: |
                            Treezor doesn't persist this information for security reasons
                          items:
                            type: string
                        tokenRequestor:
                          type: string
                          description: The token requestor also named wallet provider.
                        createdDate:
                          type: string
                        modifiedDate:
                          type: string
        '405':
          $ref: '#/components/responses/NotAllowedError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt: []
  /v1/mandates:
    get:
      tags:
        - Mandates
      summary: Search Mandates
      description: Retrieve Mandates that match search criteria.
      operationId: getMandates
      parameters:
        - name: accessSignature
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
        - name: accessTag
          in: query
          description: |
            A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.
          schema:
            type: string
        - name: accessUserId
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: integer
        - name: accessUserIp
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
        - name: mandateId
          in: query
          description: The unique identifier of the Mandate.
          schema:
            type: integer
        - name: userId
          in: query
          description: The unique identifier of the User who initiates the Mandate request.
          schema:
            type: integer
        - name: uniqueMandateReference
          in: query
          description: |
            Unique Mandate Reference (UMR) of the searched mandate. It is a
            sequence of characters that ensures the mandate traceability. UMR
            coupled with SCI allows to uniquely identify a creditor and a
            contract for any mandate. It is provided at the mandate creation.
          schema:
            type: string
        - name: mandateStatus
          in: query
          description: |
            The status of the Mandate.
          schema:
            type: string
            enum: [CANCELED, PENDING, VALIDATED]
        - name: filter
          in: query
          description: |
            You can filter the API response by using filter(s).

            Filters should be separated by a ";". Example for 3 filters: `FILTER1;FILTER2;FILTER3`

            A single filter has the following syntax : "fieldName criterionexpression".

            Where:
            * fieldName – the name of a filterable field of this object.
            * expression – the values to be included or excluded (see the table below for more information)
            * criterion – a filter criterion.

            Here are the possible values for criterion:

             | Criteria |         Description    |                   Type                   | Expression Example |
             |----------|------------------------|------------------------------------------|--------------------|
             |     >    |      greater than      |            alphanumeric string           |         100        |
             |    >=    | greater or equal than  |            alphanumeric string           |         100        |
             |     <    |        less than       |            alphanumeric string           |         100        |
             |    <=    |   less or equal than   |            alphanumeric string           |         100        |
             |    !=    |      not equal to      |            alphanumeric string           |         100        |
             |   like   |          like          |            alphanumeric string           |         100        |
             |    in    |           in           | alphanumeric strings separated by commas |      100,30,25     |
             |    ==    |         equals         |            alphanumeric string           |         100        |
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MandateObject'
        '405':
          $ref: '#/components/responses/NotAllowedError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt:
          - read_only
          - read_write
    post:
      tags:
        - Mandates
      summary: Create Mandate
      description: |
        Create a new mandate.
      operationId: postMandates
      parameters:
        - name: accessSignature
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
        - name: accessTag
          in: query
          description: |
            A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.
          schema:
            type: string
        - name: accessUserId
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: integer
        - name: accessUserIp
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              required:
                - sddType
                - isPaper
                - userId
                - debtorName
                - debtorAddress
                - debtorCity
                - debtorZipcode
                - debtorCountry
                - debtorIban
                - sequenceType
                - signatureDate
              type: object
              properties:
                sddType:
                  type: string
                  description: |
                    The type of Mandate, which can be:
                    * `core` – To debit individuals (physical persons).
                    * `b2b` – To debit legal entities.
                  enum: ["core", "b2b"]
                isPaper:
                  type: boolean
                  description: | 
                    Indicates whether the Mandate is a paper-based document, or electronically signed. As of today, should only be set to `true`.
                userId:
                  type: integer
                  description: The unique identifier of the end user requesting the SEPA Direct Debit (i.e., the creditor initiating the Mandate request).
                debtorName:
                  type: string
                  format: alphanumeric
                  description: |
                    The full name of the debited entity or individual. Format: alphanumeric with at least 3 alphabetic characters.
                debtorAddress:
                  type: string
                  description: The address of the debited end user. 
                debtorCity:
                  type: string
                  description: City in which the debited end user is domiciled.
                debtorZipcode:
                  type: string
                  description: Postcode of the city in which the debited end user is domiciled.
                debtorCountry:
                  type: string
                  description: Country in which the debited end user is domiciled.
                  format: ISO 3166-1 alpha-2
                  example: FR
                debtorIban:
                  type: string
                  description: IBAN of the debited user.
                debtorBic:
                  type: string
                  description: The BIC (or SWIFT) of the debited user
                sequenceType:
                  type: string
                  description: |
                    Defines whether or not the debtor will be debited multiple times. Can be one of the following:
                    * `one-off` – For a one-time payment.
                    * `recurrent` – For recurring payments.
                  enum:
                    - one-off
                    - recurrent
                createdIp:
                  type: string
                  description: IP address of the end user requesting the SDD.
                signatureDate:
                  type: string
                  format: date
                  description: |
                    Date on which the Mandate has been signed by the end user. 
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MandateObject'
        '405':
          $ref: '#/components/responses/NotAllowedError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt:
          - read_write
  /v1/mandates/{mandateId}:
    get:
      tags:
        - Mandates
      summary: Get Mandate
      description: Retrieve a Mandate based on its `id`.
      operationId: getMandate
      parameters:
        - name: mandateId
          in: path
          description: The unique identifier of the Mandate.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MandateObject'
        '405':
          $ref: '#/components/responses/NotAllowedError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt:
          - read_only
          - read_write
    delete:
      tags:
        - Mandates
      summary: Revoke Mandate
      description: Change the Mandate status to `CANCELED`.
      operationId: deleteMandate
      parameters:
        - name: mandateId
          in: path
          description: The unique identifier of the Mandate.
          required: true
          schema:
            type: integer
        - name: origin
          in: query
          description: | 
            The origin of the request for revoking the Mandate.
          required: true
          schema:
            type: string
            enum:
              - CREDITOR
              - DEBITOR
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  mandates:
                    type: array
                    items:
                      type: object
                      properties:
                        mandateId:
                          type: integer
                        title:
                          type: string
                        legalInformations:
                          type: string
                        uniqueMandateReference:
                          type: string
                        mandateStatus:
                          type: string
                          example: CANCELED
                          enum:
                            - PENDING
                            - CANCELED
                            - VALIDATED
                        userId:
                          type: integer
                        debtorName:
                          type: string
                        debtorAddress:
                          type: string
                        debtorCity:
                          type: string
                        debtorZipCode:
                          type: string
                        debtorCountry:
                          type: string
                          format: ISO 3166-1 alpha-2
                          example: FR
                        debtorIban:
                          type: string
                        debtorBic:
                          type: string
                        sequenceType:
                          type: string
                          enum:
                            - one-off
                            - recurrent
                        creditorName:
                          type: string
                        sepaCreditorIdentifier:
                          type: string
                        creditorAddress:
                          type: string
                        creditorCity:
                          type: string
                        creditorZipCode:
                          type: string
                        creditorCountry:
                          type: string
                        signatureDate:
                          type: string
                          description: Date YYYY-MM-DD
                        debtorSignatureIp:
                          type: string
                        signed:
                          type: integer
                        debtorIdentificationCode:
                          type: string
                        debtorReferencePartyName:
                          type: string
                        debtorReferenceIdentificationCode:
                          type: string
                        creditorReferencePartyName:
                          type: string
                        creditorReferenceIdentificationCode:
                          type: string
                        contractIdentificationNumber:
                          type: string
                        contractDescription:
                          type: string
                        isPaper:
                          type: boolean
                        sddType:
                          type: string
                          enum:
                            - core
                            - b2b
                        revocationSignatureDate:
                          type: string
                          description: Date YYYY-MM-DD HH:MM:SS
                        createdIp:
                          type: string
                        createdDate:
                          type: string
                          description: Date YYYY-MM-DD HH:MM:SS
                        modifiedDate:
                          type: string
                          description: Date YYYY-MM-DD HH:MM:SS
        '405':
          $ref: '#/components/responses/NotAllowedError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt:
          - read_write
  /v1/mandates/{mandateId}/Sign:
    put:
      tags:
        - Mandates
      summary: Sign Mandate
      operationId: put-mandates-sign
      description: Sign a Mandate with the received OTP.
      parameters:
        - name: mandateId
          in: path
          description: The unique identifier of the Mandate.
          required: true
          schema:
            type: integer
        - name: accessToken
          in: query
          deprecated: true
          description: |
            Legacy attribute, do not use.
          required: true
          schema:
            type: string
        - name: accessSignature
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          required: true
          schema:
            type: string
        - name: accessTag
          in: query
          description: |
            A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.
          schema:
            type: string
        - name: accessUserId
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: integer
        - name: accessUserIp
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
        - name: userId
          in: query
          description: User's is who initiates the mandate request.
          required: true
          schema:
            type: integer
        - name: otp
          in: query
          description: The One-time password that the user got once mandate created.
          required: true
          schema:
            type: string
        - name: debtorSignatureIp
          in: query
          description: IP address from which the mandate will be signed.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: object
                properties:
                  mandates:
                    type: array
                    items:
                      type: object
                      properties:
                        mandateId:
                          type: integer
                        title:
                          type: string
                        legalInformations:
                          type: string
                        uniqueMandateReference:
                          type: string
                        mandateStatus:
                          type: string
                          enum:
                            - PENDING
                            - CANCELED
                            - VALIDATED
                        userId:
                          type: integer
                        debtorName:
                          type: string
                        debtorAddress:
                          type: string
                        debtorCity:
                          type: string
                        debtorZipCode:
                          type: string
                        debtorCountry:
                          type: string
                          format: ISO 3166-1 alpha-2
                          example: FR
                        debtorIban:
                          type: string
                        debtorBic:
                          type: string
                        sequenceType:
                          type: string
                          enum:
                            - one-off
                            - recurrent
                        creditorName:
                          type: string
                        sepaCreditorIdentifier:
                          type: string
                        creditorAddress:
                          type: string
                        creditorCity:
                          type: string
                        creditorZipCode:
                          type: string
                        creditorCountry:
                          type: string
                        signatureDate:
                          type: string
                          description: Date YYYY-MM-DD
                        debtorSignatureIp:
                          type: string
                        signed:
                          type: integer
                        debtorIdentificationCode:
                          type: string
                        debtorReferencePartyName:
                          type: string
                        debtorReferenceIdentificationCode:
                          type: string
                        creditorReferencePartyName:
                          type: string
                        creditorReferenceIdentificationCode:
                          type: string
                        contractIdentificationNumber:
                          type: string
                        contractDescription:
                          type: string
                        isPaper:
                          type: boolean
                        sddType:
                          type: string
                          enum:
                            - core
                            - b2b
                        revocationSignatureDate:
                          type: string
                          description: Date YYYY-MM-DD HH:MM:SS
                        createdIp:
                          type: string
                        createdDate:
                          type: string
                          description: Date YYYY-MM-DD HH:MM:SS
                        modifiedDate:
                          type: string
                          description: Date YYYY-MM-DD HH:MM:SS
        '405':
          $ref: '#/components/responses/NotAllowedError'
        default:
          description: Unexpected error
          content:
            '*/*':
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        errorCode:
                          type: integer
                        errorMessage:
                          type: string
                        additionalInformation:
                          type: array
                          items:
                            type: string
      security:
        - jwt:
          - read_write
  /v1/mandates/{mandateId}/ResendOtp:
    put:
      tags:
        - Mandates
      summary: Send OTP
      operationId: put-mandates-resendotp
      description: |
        Send an OTP to sign a specific mandate. The OTP will be sent to the
        user's mobile phone OR to a specific mobile phone number in the request.
      parameters:
        - name: mandateId
          in: path
          description: The unique identifier of the Mandate.
          required: true
          schema:
            type: integer
        - name: accessToken
          in: query
          deprecated: true
          description: |
            Legacy attribute, do not use.
          required: true
          schema:
            type: string
        - name: accessSignature
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          required: true
          schema:
            type: string
        - name: accessTag
          in: query
          description: |
            A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.
          schema:
            type: string
        - name: accessUserId
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: integer
        - name: accessUserIp
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
        - name: userId
          in: query
          description: User's id who initiates the mandate request.
          required: true
          schema:
            type: integer
        - name: debtorMobile
          in: query
          description: Debtor's mobile phone number. Used to send the OTP for signature
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: object
                properties:
                  mandates:
                    type: array
                    items:
                      type: object
                      properties:
                        mandateId:
                          type: integer
                        title:
                          type: string
                        legalInformations:
                          type: string
                        uniqueMandateReference:
                          type: string
                        mandateStatus:
                          type: string
                          enum:
                            - PENDING
                            - CANCELED
                            - VALIDATED
                        userId:
                          type: integer
                        debtorName:
                          type: string
                        debtorAddress:
                          type: string
                        debtorCity:
                          type: string
                        debtorZipCode:
                          type: string
                        debtorCountry:
                          type: string
                          format: ISO 3166-1 alpha-2
                          example: FR
                        debtorIban:
                          type: string
                        debtorBic:
                          type: string
                        sequenceType:
                          type: string
                          enum:
                            - one-off
                            - recurrent
                        creditorName:
                          type: string
                        sepaCreditorIdentifier:
                          type: string
                        creditorAddress:
                          type: string
                        creditorCity:
                          type: string
                        creditorZipCode:
                          type: string
                        creditorCountry:
                          type: string
                        signatureDate:
                          type: string
                          description: Date YYYY-MM-DD
                        debtorSignatureIp:
                          type: string
                        signed:
                          type: integer
                        debtorIdentificationCode:
                          type: string
                        debtorReferencePartyName:
                          type: string
                        debtorReferenceIdentificationCode:
                          type: string
                        creditorReferencePartyName:
                          type: string
                        creditorReferenceIdentificationCode:
                          type: string
                        contractIdentificationNumber:
                          type: string
                        contractDescription:
                          type: string
                        isPaper:
                          type: boolean
                        sddType:
                          type: string
                          enum:
                            - core
                            - b2b
                        revocationSignatureDate:
                          type: string
                          description: Date YYYY-MM-DD HH:MM:SS
                        createdIp:
                          type: string
                        createdDate:
                          type: string
                          description: Date YYYY-MM-DD HH:MM:SS
                        modifiedDate:
                          type: string
                          description: Date YYYY-MM-DD HH:MM:SS
        '405':
          $ref: '#/components/responses/NotAllowedError'
        default:
          description: Unexpected error
          content:
            '*/*':
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        errorCode:
                          type: integer
                        errorMessage:
                          type: string
                        additionalInformation:
                          type: array
                          items:
                            type: string
      security:
        - jwt:
          - read_write
  /v1/mccRestrictionGroups:
    get:
      tags:
        - MCC Restriction Groups
      summary: Search MCC Restriction Groups
      description: Retrieve MCC Restriction Groups that match search criteria.
      operationId: getMccRestrictionGroups
      parameters:
        - name: accessSignature
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
        - name: accessTag
          in: query
          description: |
            A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.
          schema:
            type: string
        - name: accessUserId
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: integer
        - name: accessUserIp
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
        - name: fields
          in: query
          description: List of the object properties you want to pick up.
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: filter
          in: query
          description: |
            You can filter the API response by using filter(s).
            Filterable fields are:
              - id
              - name
              - isWhitelist
              - status
              - startDate
              - createdDate

            Filters should be separated by a ";". Example for 3 filters: FILTER1;FILTER2;FILTER3.

            A single filter has the following syntax: "fieldName criterion expression", where:
            * fieldName: the name of a filterable field of this object.
            * expression: the values to be included or excluded (see table below)
            * criterion: a filter criterion.

            Here are the possible values for criterion:

              | Criteria |         Description    |                   Type                   | Expression Example |
              |----------|------------------------|------------------------------------------|--------------------|
              |     >    |      greater than      |            alphanumeric string           |         100        |
              |    >=    | greater or equal than  |            alphanumeric string           |         100        |
              |     <    |        less than       |            alphanumeric string           |         100        |
              |    <=    |   less or equal than   |            alphanumeric string           |         100        |
              |    !=    |      not equal to      |            alphanumeric string           |         100        |
              |   like   |          like          |            alphanumeric string           |         100        |
              |    in    |           in           | alphanumeric strings separated by commas |      100,30,25     |
              |    ==    |         equals         |            alphanumeric string           |         100        |
          schema:
            type: string
        - name: pageNumber
          in: query
          description: |
            The page number, only available on /v1/ endpoints 
          schema:
            type: integer
        - name: pageCount
          in: query
          description: |
            The number of items per page, only available on /v1/ endpoints  
          schema:
            type: integer
        - name: sortBy
          in: query
          description: |
            The transaction element you want to sort the list with. Default
            value : _createdDate_. 
          schema:
            type: string
        - name: sortOrder
          in: query
          description: |
            The order you want to sort the list.
          schema:
            type: string
            default: DESC
            enum:
              - DESC
              - ASC
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  mccRestrictionGroups:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          description: The unique identifier of the MCC Group.
                        name:
                          type: string
                          description: The name of the MCC Group.
                        isWhitelist:
                          type: boolean
                          description: |
                            Indicates the kind of restriction: 
                            * `true` (default) – Allows only a specified list of merchant caegories (whitelist)
                            * `false` – Allows all merchant categories except the specified list (blacklist)
                        mcc:
                          type: array
                          description: The list of MCC (each item is an integer).
                          items:
                            type: integer
                        status:
                          type: string
                          description: The status of the MCC group.
                          enum:
                            - PENDING
                            - CANCELED
                            - VALIDATED
                        startDate:
                          type: string
                          description: |
                            The date and time at which the restriction starts. Defaults to the date and time of creation. Format: YYYY-MM-DD HH:MM:SS
                        createdDate:
                          type: string
                          description: |
                            The date and time at which the restriction group was.
        '405':
          $ref: '#/components/responses/NotAllowedError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt:
          - read_only
          - read_write
    post:
      tags:
        - MCC Restriction Groups
      summary: Create MCC Restriction Group
      description: Create a new Merchant Category Code (MCC) restriction group.
      operationId: postMccRestrictionGroup
      parameters:
        - name: accessSignature
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
        - name: accessTag
          in: query
          description: |
            A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.
          schema:
            type: string
        - name: accessUserId
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: integer
        - name: accessUserIp
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
        - name: fields
          in: query
          description: List of the object properties you want to pick up.
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
      requestBody:
        content:
          application/json:
            schema:
              required:
                - mcc
                - name
              type: object
              properties:
                name:
                  type: string
                  description: The name of the MCC Group.
                status:
                  type: string
                  description: The status of the MCC group.
                  enum:
                    - VALIDATED
                    - PENDING
                    - CANCELED
                isWhitelist:
                  type: boolean
                  description: |
                    Indicates the kind of restriction: 
                    * `true` (default) – Allows only a specified list of merchant caegories (whitelist)
                    * `false` – Allows all merchant categories except the specified list (blacklist)
                  default: true
                mcc:
                  type: array
                  description: The list of MCC (each item is an integer).
                  items:
                    type: integer
                startDate:
                  type: string
                  description: |
                    The date and time at which the restriction starts. Defaults to the date and time of creation. Format: YYYY-MM-DD HH:MM:SS
                  format: datetime
        required: false
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  mccRestrictionGroups:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          description: The unique identifier of the MCC restriction group.
                        name:
                          type: string
                          description: The name of the MCC restriction group.
                        isWhitelist:
                          type: boolean
                          description: |
                            Indicates the kind of restriction: 
                            * `true` (default) – Allows only a specified list of merchant caegories (whitelist)
                            * `false` – Allows all merchant categories except the specified list (blacklist)
                        mcc:
                          type: array
                          description: The list of MCC (each item is an integer)
                          items:
                            type: integer
                        status:
                          type: string
                          description: The status of the MCC group.
                          enum:
                            - PENDING
                            - CANCELED
                            - VALIDATED
                        startDate:
                          type: string
                          description: |
                            The date and time at which the restriction starts. Defaults to the date and time of creation. Format: YYYY-MM-DD HH:MM:SS
                        createdDate:
                          type: string
                          description: |
                            The date and time at which the restriction group was created.
        '405':
          $ref: '#/components/responses/NotAllowedError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt:
          - read_write
  /v1/mccRestrictionGroups/{id}:
    get:
      tags:
        - MCC Restriction Groups
      summary: Get MCC Restriction Group
      description: Retrieve a MCC Group based on its `id`.
      operationId: getMccRestrictionGroupsId
      parameters:
        - name: id
          in: path
          description: The unique identifier of the MCC Restriction Group.
          required: true
          schema:
            type: integer
            format: int64
        - name: fields
          in: query
          description: List of the object properties you want to pick up.
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  mccRestrictionGroups:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          description: The unique identifier of the MCC Restriction Group.
                        name:
                          type: string
                          description: The name of the MCC Restriction Group.
                        isWhitelist:
                          type: boolean
                          description: |
                            Indicates the kind of restriction: 
                            * `true` (default) – Allows only a specified list of merchant caegories (whitelist)
                            * `false` – Allows all merchant categories except the specified list (blacklist)
                        mcc:
                          type: array
                          description: List of MCC (each item is an integer)
                          items:
                            type: integer
                        status:
                          type: string
                          description: The status of the MCC group.
                          enum:
                            - PENDING
                            - CANCELED
                            - VALIDATED
                        startDate:
                          type: string
                          description: |
                            The date and time at which the restriction starts. Defaults to the date and time of creation. Format: YYYY-MM-DD HH:MM:SS
                        createdDate:
                          type: string
                          description: | 
                            The date and time at which the restriction group was created.
        '405':
          $ref: '#/components/responses/NotAllowedError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt:
          - read_only
          - read_write
    put:
      tags:
        - MCC Restriction Groups
      summary: Update MCC Restriction Group
      description: Edit a MCC Restriction group.
      operationId: putMccRestrictionGroups
      parameters:
        - name: id
          in: path
          description: The unique identifier of the MCC Restriction Group.
          required: true
          schema:
            type: integer
        - name: accessSignature
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
        - name: accessTag
          in: query
          description: |
            A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.
          schema:
            type: string
        - name: accessUserId
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: integer
        - name: accessUserIp
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Name of the MCC restriction group
                status:
                  type: string
                  description: Status of the MCC restriction group
                  enum:
                    - VALIDATED
                    - PENDING
                    - CANCELED
                isWhitelist:
                  type: boolean
                  description: determines whether it will be a black or a white list
                  default: true
                mcc:
                  type: array
                  description: Array of MCC
                  items:
                    type: integer
                startDate:
                  type: string
                  description: |
                    The date at which the MCC restriction group will be take
                    into account. Format YYYY-MM-DD HH:MM:SS
                  format: datetime
                fields:
                  type: array
                  description: List of the object properties you want to pick up.
                  items:
                    type: string
        required: false
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  mccRestrictionGroups:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          description: The unique identifier of the MCC restriction group
                        name:
                          type: string
                          description: The name of the MCC restriction group
                        isWhitelist:
                          type: boolean
                          description: |
                            Indicates the kind of restriction: 
                            * `true` (default) – Allows only a specified list of merchant caegories (whitelist)
                            * `false` – Allows all merchant categories except the specified list (blacklist)
                        mcc:
                          type: array
                          description: The list of MCC (each item is an integer)
                          items:
                            type: integer
                        status:
                          type: string
                          description: The status of the MCC restriction group
                          enum:
                            - PENDING
                            - CANCELED
                            - VALIDATED
                        startDate:
                          type: string
                          description: | 
                            The date and time at which the restriction starts. Defaults to the date and time of creation. Format: YYYY-MM-DD HH:MM:SS
                        createdDate:
                          type: string
                          description: The date and time at which the restriction group was created.

        '405':
          $ref: '#/components/responses/NotAllowedError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt:
          - read_write
    delete:
      tags:
        - MCC Restriction Groups
      summary: Cancel MCC Restriction Group
      description: Cancel a MCC restriction group.
      operationId: deleteMccRestrictionGroups
      parameters:
        - name: id
          in: path
          description: The unique identifier of the MCC restriction Group.
          required: true
          schema:
            type: integer
            format: int64
        - name: fields
          in: query
          description: List of the object properties you want to pick up.
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  mccRestrictionGroups:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          description: The unique identifier of the MCC restriction group.
                        name:
                          type: string
                          description: The namme of the MCC restriction group.
                        isWhitelist:
                          type: boolean
                          description: |
                            Indicates the kind of restriction: 
                            * `true` (default) – Allows only a specified list of merchant caegories (whitelist)
                            * `false` – Allows all merchant categories except the specified list (blacklist)
                        mcc:
                          type: array
                          description: The list of MCC (each item is an integer).
                          items:
                            type: integer
                        status:
                          type: string
                          description: The status of the MCC restriction group.
                          enum:
                            - PENDING
                            - CANCELED
                            - VALIDATED
                        startDate:
                          type: string
                          description: |
                            The date and time at which the restriction starts. Defaults to the date and time of creation. Format: YYYY-MM-DD HH:MM:SS
                        createdDate:
                          type: string
                          description: The date and time at which the restriction group was created.
        '405':
          $ref: '#/components/responses/NotAllowedError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt:
          - read_write
  /v1/merchantIdRestrictionGroups:
    get:
      tags:
        - Merchant ID Restriction Groups
      summary: Search MID Restriction Groups
      description: Retrieve Merchant ID Restriction Groups that match search criteria.
      operationId: getMerchantIdRestrictionGroup
      parameters:
        - name: accessSignature
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
        - name: accessTag
          in: query
          description: |
            A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.
          schema:
            type: string
        - name: accessUserId
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: integer
        - name: accessUserIp
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
        - name: fields
          in: query
          description: List of the object properties you want to pick up.
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: filter
          in: query
          description: |
            You can filter the API response by using filter(s).
            Filterable fields are:
              - id
              - name
              - isWhitelist
              - status
              - startDate
              - createdDate

            Filters should be separated by a ";". Example for 3 filters: FILTER1;FILTER2;FILTER3.

            A single filter has the following syntax: "fieldName criterion expression", where:
            - fieldName: the name of a filterable field of this object.
            - expression: the values to be included or excluded (see the table below for more information)
            - criterion: a filter criterion.

            Here are the possible values for criterion:

              | Criteria |         Description    |                   Type                   | Expression Example |
              |----------|------------------------|------------------------------------------|--------------------|
              |     >    |      greater than      |            alphanumeric string           |         100        |
              |    >=    | greater or equal than  |            alphanumeric string           |         100        |
              |     <    |        less than       |            alphanumeric string           |         100        |
              |    <=    |   less or equal than   |            alphanumeric string           |         100        |
              |    !=    |      not equal to      |            alphanumeric string           |         100        |
              |   like   |          like          |            alphanumeric string           |         100        |
              |    in    |           in           | alphanumeric strings separated by commas |      100,30,25     |
              |    ==    |         equals         |            alphanumeric string           |         100        |
          schema:
            type: string
        - name: pageNumber
          in: query
          description: |
            The page number, only available on /v1/ endpoints 
          schema:
            type: integer
        - name: pageCount
          in: query
          description: |
            The number of items per page, only available on /v1/ endpoints  
          schema:
            type: integer
        - name: sortBy
          in: query
          description: |
            The transaction element you want to sort the list with. Default value: _createdDate_. 
          schema:
            type: string
        - name: sortOrder
          in: query
          description: |
            The order you want to sort the list.
          schema:
            type: string
            default: DESC
            enum:
              - DESC
              - ASC
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MerchantIdGroupObject'
        '405':
          $ref: '#/components/responses/NotAllowedError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt:
          - read_only
          - read_write
    post:
      tags:
        - Merchant ID Restriction Groups
      summary: Create MID Restriction Group
      description: Create a new Merchant ID restriction group.
      operationId: postMerchantIdRestrictionGroup
      parameters:
        - name: accessSignature
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
        - name: accessTag
          in: query
          description: |
            A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.
          schema:
            type: string
        - name: accessUserId
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: integer
        - name: accessUserIp
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              required:
                - merchants
                - name
              type: object
              properties:
                name:
                  type: string
                  description: Name of the Merchant ID restriction group.
                status:
                  type: string
                  description: Status of the Merchant ID restriction group.
                  enum:
                    - VALIDATED
                    - PENDING
                    - CANCELED
                isWhitelist:
                  type: boolean
                  description: |
                      Indicates the kind of restriction: 
                      * `true` (default) – Allows only a specified list of merchant ids (whitelist)
                      * `false` – Allows all merchant ids except the specified list (blacklist)
                  default: true
                merchants:
                  type: array
                  description: List of Merchant Ids (each item is a string).
                  items:
                    type: string
                startDate:
                  type: string
                  description: |
                    The date and time at which the restriction starts. Format: YYYY-MM-DD HH:MM:SS
                  format: datetime
        required: false
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MerchantIdGroupObject'
        '405':
          $ref: '#/components/responses/NotAllowedError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt:
          - read_write
  /v1/merchantIdRestrictionGroup/{id}:
    put:
      tags:
        - Merchant ID Restriction Groups
      summary: (DEPRECATED) Update MID Restriction Group
      description: Deprecated
      operationId: putMerchantIdRestrictionGroups
      parameters:
        - name: id
          in: path
          description: The unique identifier of the Merchant Id restriction group.
          required: true
          schema:
            type: integer
        - name: accessSignature
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
        - name: accessTag
          in: query
          description: |
            A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.
          schema:
            type: string
        - name: accessUserId
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: integer
        - name: accessUserIp
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Name of the merchant ID restriction group
                status:
                  type: string
                  description: Status of the merchant ID restriction group
                  enum:
                    - VALIDATED
                    - PENDING
                    - CANCELED
                isWhitelist:
                  type: boolean
                  description: |
                    Indicates the kind of restriction: 
                    * `true` (default) – Allows only a specified list of merchant ids (whitelist)
                    * `false` – Allows all merchant ids except the specified list (blacklist)
                  default: true
                merchants:
                  deprecated: true
                  type: array
                  description: |
                    (Deprecated. Use `PUT /merchantIdRestrictionGroups/{id}/DeltaUpdate` to update merchants ID list)
                  items:
                    type: string
                startDate:
                  type: string
                  description: |
                    The date and time at which the restriction starts. Format: YYYY-MM-DD HH:MM:SS
                  format: datetime
        required: false
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MerchantIdGroupObject'
        '405':
          $ref: '#/components/responses/NotAllowedError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt:
          - read_write
    delete:
      tags:
        - Merchant ID Restriction Groups
      summary: Cancel MID Restriction Group
      description: Cancel a merchant id restriction group.
      operationId: deleteMerchantIdRestrictionGroups
      parameters:
        - name: id
          in: path
          description: The unique identifier of the Merchant ID restriction group.
          required: true
          schema:
            type: integer
            format: int64
        - name: fields
          in: query
          description: List of the object properties you want to pick up.
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MerchantIdGroupObject'
        '405':
          $ref: '#/components/responses/NotAllowedError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt:
          - read_write
  /v1/merchantIdRestrictionGroups/{id}/DeltaUpdate:
    put:
      tags:
        - Merchant ID Restriction Groups
      summary: Update MID Restriction Group
      operationId: put-merchandidrestrictiongroups-deltaupdate
      description: Update the list of Merchant Ids for a MID Restriction Group.
      parameters:
        - name: id
          in: path
          description: The unique identifier of the Merchant ID restriction group.
          required: true
          schema:
            type: integer
        - name: accessSignature
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
        - name: accessTag
          in: query
          description: |
            A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.
          schema:
            type: string
        - name: accessUserId
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: integer
        - name: accessUserIp
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                merchants:
                  type: array
                  description: The list of Merchant Ids (each item is a string)
                  items:
                    type: string
                merchantsOperation:
                  type: string
                  description: Whether to `add` or `removed` the Merchant Ids.
                  enum:
                    - add
                    - remove
        required: false
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MerchantIdGroupObject'
        '405':
          $ref: '#/components/responses/NotAllowedError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt:
          - read_write
  /v1/merchantIdRestrictionGroups/{id}/PresenceCheck:
    put:
      tags:
        - Merchant ID Restriction Groups
      summary: Check the presence of merchants IDs list for a restriction group
      operationId: put-midrestrictiongroups
      description: Check if Merchant IDs list for a restriction group.
      parameters:
        - name: id
          in: path
          description: The unique identifier of the Merchant ID restriction group.
          required: true
          schema:
            type: integer
        - name: accessSignature
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
        - name: accessTag
          in: query
          description: |
            A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.
          schema:
            type: string
        - name: accessUserId
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: integer
        - name: accessUserIp
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                merchants:
                  type: array
                  description: The list of Merchant Ids (each item is a string).
                  items:
                    type: string
        required: false
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MerchantIdGroupObject'
        '405':
          $ref: '#/components/responses/NotAllowedError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt:
          - read_only
          - read_write
  /v1/payins:
    get:
      tags:
        - Payins
      summary: Search Payins
      description: Get payins that match search criteria.
      operationId: getPayins
      parameters:
        - name: accessSignature
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
        - name: accessTag
          in: query
          description: |
            A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.
          schema:
            type: string
        - name: accessUserId
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: integer
        - name: accessUserIp
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: integer
        - name: payinId
          in: query
          description: The unique identifier of the payin.
          schema:
            type: integer
        - name: walletId
          in: query
          description: Payin's wallet id.
          schema:
            type: integer
        - name: payinTag
          in: query
          description: Client custom data.
          schema:
            type: string
        - name: payinStatus
          in: query
          description: The status of the payin.
          schema:
            type: string
        - name: userId
          in: query
          description: The unique identifier of the User who performed the operation (debited).
          schema:
            type: integer
        - name: userName
          in: query
          description: The name of the User who performed the operation (debited).
          schema:
            type: string
        - name: userEmail
          in: query
          description: The email of the User who performed the operation (debited).
          schema:
            type: string
        - name: beneficiaryUserId
          in: query
          description: The unique identifier of the User who received the operation (credited).
          schema:
            type: integer
        - name: eventAlias
          in: query
          description: The name of the credited Wallet.
          schema:
            type: string
        - name: walletTypeId
          in: query
          description: Payin's wallet type id.
          schema:
            type: integer
        - name: paymentMethodId
          in: query
          description: Payin's payment method id.
          schema:
            type: string
            enum: ["20", "21", "23", "24", "25", "26", "27"]
        - name: createdDateFrom
          in: query
          description: |
            The creation date from which you want to filter the request result. Format: YYYY-MM-DD HH:MM:SS. 
          schema:
            type: string
            format: date-time
        - name: createdDateTo
          in: query
          description: |
            The creation date up to which you want to filter the request result. Format: YYYY-MM-DD HH:MM:SS. 
          schema:
            type: string
            format: date-time
        - name: updatedDateFrom
          in: query
          description: |
            The modification date from which you want to filter the request result. Format: YYYY-MM-DD HH:MM:SS. 
          schema:
            type: string
            format: date-time
        - name: updatedDateTo
          in: query
          description: |
            The modification date up to which you want to filter the request result. Format: YYYY-MM-DD HH:MM:SS. 
          schema:
            type: string
            format: date-time
        - name: cursor
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  payins:
                    type: array
                    items:
                      type: object
                      properties:
                        payinId:
                          type: integer
                        payinTag:
                          type: string
                        payinStatus:
                          type: string
                          enum:
                            - PENDING
                            - CANCELED
                            - VALIDATED
                        codeStatus:
                          type: integer
                        informationStatus:
                          type: string
                        walletId:
                          type: integer
                        userId:
                          type: integer
                        cartId:
                          type: integer
                        walletEventName:
                          type: string
                        walletAlias:
                          type: string
                        userFirstname:
                          type: string
                        userLastname:
                          type: string
                        messageToUser:
                          type: string
                        paymentMethodId:
                          type: integer
                        subtotalItems:
                          type: string
                        subtotalServices:
                          type: string
                        subtotalTax:
                          type: string
                        amount:
                          type: string
                        currency:
                          type: string
                        distributorFee:
                          type: string
                        createdDate:
                          type: string
                          description: Date YYYY-MM-DD HH:MM:SS
                        createdIp:
                          type: string
                        paymentHtml:
                          type: string
                        paymentLanguage:
                          type: string
                        paymentPostUrl:
                          type: string
                        paymentPostDataUrl:
                          type: string
                        paymentAcceptedUrl:
                          type: string
                        paymentWaitingUrl:
                          type: string
                        paymentRefusedUrl:
                          type: string
                        paymentCanceledUrl:
                          type: string
                        paymentExceptionUrl:
                          type: string
                        ibanFullname:
                          type: string
                        DbtrIBAN:
                          type: string
                        ibanId:
                          type: string
                        ibanBic:
                          type: string
                        ibanTxEndToEndId:
                          type: string
                        ibanTxId:
                          type: string
                        refundAmount:
                          type: string
                        totalRows:
                          type: integer
                        forwardUrl:
                          type: string
                        payinDate:
                          type: string
                          description: Date YYYY-MM-DD
                        mandateId:
                          type: integer
                        creditorName:
                          type: string
                        creditorAddressLine:
                          type: string
                        creditorCountry:
                          type: string
                        creditorIban:
                          type: string
                        creditorBIC:
                          type: string
                        virtualIbanId:
                          type: integer
                        virtualIbanReference:
                          type: string
        '405':
          $ref: '#/components/responses/NotAllowedError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt: []
    post:
      tags:
        - Payins
      summary: Create Payin
      description: Create a new payin.
      operationId: postPayin
      parameters:
        - name: accessSignature
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
        - name: accessTag
          in: query
          description: |
            A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.
          schema:
            type: string
        - name: accessUserId
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: integer
        - name: accessUserIp
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              required:
              - walletId
              - userId
              - paymentMethodId
              - amount
              - currency
              type: object
              properties:
                payinTag:
                  type: string
                  description: | 
                    Custom attribute to use as you see fit. Learn more in the [Object tags](/guide/api-basics/objects-tags.html#objects-tags) article.
                    <br>Max length: 250 characters 
                    <br>Format: hc characters and `/` `!` `-` `_` `.` `*` `'` `(` `)`
                walletId:
                  type: integer
                  description: The unique identifier of the credited Wallet.
                userId:
                  type: integer
                  description: |
                    The unique identifier of the User making the payin.

                    Note that for the `paymentMethodId` of `21` and `26`, you don't need to provide this value.
                    It will be set automatically by Treezor.
                paymentMethodId:
                  type: integer
                  description: |
                    | Id | Payment by |
                    | ---| --- |
                    | `20` | SEPA Credit Transfer (SCTR) – You can only create such payins in Sandbox, otherwise created automatically upon receiving a transfer. |
                    | `21` | SEPA Direct Debit Core |
                    | `23` | Full Hosted HTML Payment Form. If you use this `paymentMethodId`, the `paymentAcceptedUrl`, `paymentRefusedUrl`, `paymentWaitingUrl`, `paymentCanceledUrl` and `paymentExceptionUrl` fields are mandatory. CSS of the payment page can be customized. |
                    | `24` | IFrame Payment Form. Please note that if you use this `paymentMethodId`, the `paymentAcceptedUrl`, `paymentRefusedUrl`, `paymentWaitingUrl`, `paymentCanceledUrl` and `paymentExceptionUrl` fields are mandatory. CSS of the payment page can be customized. |
                    | `25` | Card topup - You cannot create a payin directly with this method id. The payin will be automatically created by Treezor. |
                    | `26` | Check |
                    | `27` | Instant Credit Transfers (SCTR Inst) – You cannot create a payin directly with this method id. The payin will be automatically created by Treezor. |
                  enum: [20, 21, 23, 24, 25, 26, 27]
                paymentAcceptedUrl:
                  type: string
                  description: |
                    URL to which the cardholder is redirected if payment is successful. When
                    using `paymentMethodId` `23` and `24` an HTTPS URL is mandatory.
                paymentWaitingUrl:
                  type: string
                  description: | 
                    URL to which the cardholder is redirected to wait payment processing. When
                    using `paymentMethodId` `23` and `24` an HTTPS URL is mandatory.
                paymentCanceledUrl:
                  type: string
                  description: |
                    URL to which the cardholder is redirected if payment is canceled. When
                    using `paymentMethodId` `23` and `24` an HTTPS URL is mandatory.
                paymentRefusedUrl:
                  type: string
                  description: |
                    URL to which the cardholder is redirected if payment is refused. When using
                    `paymentMethodId` `23` and `24` an HTTPS URL is mandatory.
                paymentExceptionUrl:
                  type: string
                  description: |
                    URL to which the cardholder is redirected if the payment process raised an
                    exception. When using `paymentMethodId` `23` and `24` an HTTPS URL is mandatory.
                amount:
                  type: number
                  format: float
                  description: The amount of the payin.
                distributorFee:
                  type: number
                  format: float
                  description: Distributor fee.
                currency:
                  type: string
                  description: |
                    The currency of the payin. Must be the same as the Wallet currency.
                    Format: [ISO 4217](/guide/api-basics/data-format.html#currencies).
                messageToUser:
                  type: string
                  description:
                    Message to send to Wallet of the user. In the case of a SEPA Direct Debit
                    Core payment method, this parameter will be the reconciliation
                    information transmitted to the Debtor (i.e., Invoice number). In
                    this case it can't exceed 140 characters.
                language:
                  type: string
                  description: Language for the third party interface.
                  enum:
                    - FRA
                    - GBR
                    - ESP
                    - ITA
                    - PRT
                createdIp:
                  type: string
                  description: The IP address of the User.
                payinDate:
                  type: string
                  description: |
                    The date at which the SDD should be presented. 
                    
                    In the case of SDD Core, this parameter defaults to the third working day following the payin creation if left empty. 
                    
                    Format: YYYY-MM-DD, a [SEPA Open Banking Day](/guide/overview/glossary.html#sepa-open-banking-days) is expected (at least 3 days after the creation).
                mandateId: 
                  type: integer
                  description: The unique identifier of the Mandate. This parameter is mandatory when performing a payin with method SDD Core.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  payins:
                    type: array
                    items:
                      type: object
                      properties:
                        payinId:
                          type: integer
                        payinTag:
                          type: string
                        payinStatus:
                          type: string
                          enum:
                            - PENDING
                            - CANCELED
                            - VALIDATED
                        codeStatus:
                          type: integer
                        informationStatus:
                          type: string
                        walletId:
                          type: integer
                        userId:
                          type: integer
                        cartId:
                          type: integer
                        walletEventName:
                          type: string
                        walletAlias:
                          type: string
                        userFirstname:
                          type: string
                        userLastname:
                          type: string
                        messageToUser:
                          type: string
                        paymentMethodId:
                          type: integer
                        subtotalItems:
                          type: string
                        subtotalServices:
                          type: string
                        subtotalTax:
                          type: string
                        amount:
                          type: string
                        currency:
                          type: string
                        distributorFee:
                          type: string
                        createdDate:
                          type: string
                          description: Date YYYY-MM-DD HH:MM:SS
                        createdIp:
                          type: string
                        paymentHtml:
                          type: string
                        paymentLanguage:
                          type: string
                        paymentPostUrl:
                          type: string
                        paymentPostDataUrl:
                          type: string
                        paymentAcceptedUrl:
                          type: string
                        paymentWaitingUrl:
                          type: string
                        paymentRefusedUrl:
                          type: string
                        paymentCanceledUrl:
                          type: string
                        paymentExceptionUrl:
                          type: string
                        ibanFullname:
                          type: string
                        DbtrIBAN:
                          type: string
                        ibanId:
                          type: string
                        ibanBic:
                          type: string
                        ibanTxEndToEndId:
                          type: string
                        ibanTxId:
                          type: string
                        refundAmount:
                          type: string
                        totalRows:
                          type: integer
                        forwardUrl:
                          type: string
                        payinDate:
                          type: string
                          description: Date YYYY-MM-DD
                        mandateId:
                          type: integer
                        creditorName:
                          type: string
                        creditorAddressLine:
                          type: string
                        creditorCountry:
                          type: string
                        creditorIban:
                          type: string
                        creditorBIC:
                          type: string
                        virtualIbanId:
                          type: integer
                        virtualIbanReference:
                          type: string
        '405':
          $ref: '#/components/responses/NotAllowedError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt: []
  /v1/payins/{payinId}:
    get:
      tags:
        - Payins
      summary: Get Payin
      description: Retrieve a payin by its id.
      operationId: getPayin
      parameters:
        - name: payinId
          in: path
          description: The unique identifier of the payin.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  payins:
                    type: array
                    items:
                      type: object
                      properties:
                        payinId:
                          type: integer
                        payinTag:
                          type: string
                        payinStatus:
                          type: string
                          enum:
                            - PENDING
                            - CANCELED
                            - VALIDATED
                        codeStatus:
                          type: integer
                        informationStatus:
                          type: string
                        walletId:
                          type: integer
                        userId:
                          type: integer
                        cartId:
                          type: integer
                        walletEventName:
                          type: string
                        walletAlias:
                          type: string
                        userFirstname:
                          type: string
                        userLastname:
                          type: string
                        messageToUser:
                          type: string
                        paymentMethodId:
                          type: integer
                        subtotalItems:
                          type: string
                        subtotalServices:
                          type: string
                        subtotalTax:
                          type: string
                        amount:
                          type: string
                        currency:
                          type: string
                        distributorFee:
                          type: string
                        createdDate:
                          type: string
                          description: Date YYYY-MM-DD HH:MM:SS
                        createdIp:
                          type: string
                        paymentHtml:
                          type: string
                        paymentLanguage:
                          type: string
                        paymentPostUrl:
                          type: string
                        paymentPostDataUrl:
                          type: string
                        paymentAcceptedUrl:
                          type: string
                        paymentWaitingUrl:
                          type: string
                        paymentRefusedUrl:
                          type: string
                        paymentCanceledUrl:
                          type: string
                        paymentExceptionUrl:
                          type: string
                        ibanFullname:
                          type: string
                        DbtrIBAN:
                          type: string
                        ibanId:
                          type: string
                        ibanBic:
                          type: string
                        ibanTxEndToEndId:
                          type: string
                        ibanTxId:
                          type: string
                        refundAmount:
                          type: string
                        totalRows:
                          type: integer
                        forwardUrl:
                          type: string
                        payinDate:
                          type: string
                          description: Date YYYY-MM-DD
                        mandateId:
                          type: integer
                        creditorName:
                          type: string
                        creditorAddressLine:
                          type: string
                        creditorCountry:
                          type: string
                        creditorIban:
                          type: string
                        creditorBIC:
                          type: string
                        virtualIbanId:
                          type: integer
                        virtualIbanReference:
                          type: string
        '405':
          $ref: '#/components/responses/NotAllowedError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt: []
    delete:
      tags:
        - Payins
      summary: Delete Payin
      description: Deactivate a payin.
      operationId: deletePayin
      parameters:
        - name: payinId
          in: path
          description: The unique identifier of the payin.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  payins:
                    type: array
                    items:
                      type: object
                      properties:
                        payinId:
                          type: integer
                        payinTag:
                          type: string
                        payinStatus:
                          type: string
                          enum:
                            - PENDING
                            - CANCELED
                            - VALIDATED
                        codeStatus:
                          type: integer
                        informationStatus:
                          type: string
                        walletId:
                          type: integer
                        userId:
                          type: integer
                        cartId:
                          type: integer
                        walletEventName:
                          type: string
                        walletAlias:
                          type: string
                        userFirstname:
                          type: string
                        userLastname:
                          type: string
                        messageToUser:
                          type: string
                        paymentMethodId:
                          type: integer
                        subtotalItems:
                          type: string
                        subtotalServices:
                          type: string
                        subtotalTax:
                          type: string
                        amount:
                          type: string
                        currency:
                          type: string
                        distributorFee:
                          type: string
                        createdDate:
                          type: string
                          description: Date YYYY-MM-DD HH:MM:SS
                        createdIp:
                          type: string
                        paymentHtml:
                          type: string
                        paymentLanguage:
                          type: string
                        paymentPostUrl:
                          type: string
                        paymentPostDataUrl:
                          type: string
                        paymentAcceptedUrl:
                          type: string
                        paymentWaitingUrl:
                          type: string
                        paymentRefusedUrl:
                          type: string
                        paymentCanceledUrl:
                          type: string
                        paymentExceptionUrl:
                          type: string
                        ibanFullname:
                          type: string
                        ibanId:
                          type: string
                        ibanBic:
                          type: string
                        ibanTxEndToEndId:
                          type: string
                        ibanTxId:
                          type: string
                        refundAmount:
                          type: string
                        totalRows:
                          type: integer
                        forwardUrl:
                          type: string
                        payinDate:
                          type: string
                          description: Date YYYY-MM-DD
                        mandateId:
                          type: integer
                        creditorName:
                          type: string
                        creditorAddressLine:
                          type: string
                        creditorCountry:
                          type: string
                        creditorIban:
                          type: string
                        creditorBIC:
                          type: string
                        virtualIbanId:
                          type: integer
                        virtualIbanReference:
                          type: string
        '405':
          $ref: '#/components/responses/NotAllowedError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt: []
  /v1/payinrefunds:
    get:
      tags:
        - Payin Refunds
      summary: Search Payin Refunds
      description: | 
        Search for payin refunds. These can relate to [Acquiring](/guide/acquiring/legacy-v1.html#refunds) or [SEPA recalls](/guide/transfers/sepa-recalls.html).
      operationId: getPayinrefunds
      parameters:
        - name: accessSignature
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
        - name: accessTag
          in: query
          description: |
            A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.
          schema:
            type: string
        - name: accessUserId
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: integer
        - name: accessUserIp
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
        - name: payinId
          in: query
          description: The unique identifier of the payin.
          schema:
            type: integer
        - name: payinrefundId
          in: query
          description: Payinrefund's id.
          schema:
            type: integer
        - name: payinrefundTag
          in: query
          description: Custom data.
          schema:
            type: string
        - name: payinrefundStatus
          in: query
          description: The status of the payin refund.
          schema:
            type: string
            enum:
              - PENDING
              - CANCELED
              - VALIDATED
        - name: walletId
          in: query
          description: The unique identifier of the Wallet to refund.
          schema:
            type: integer
        - name: payinrefundDate
          in: query
          description: |
            The date of the payin refund. Format: YYYY-MM-DD
          schema:
            type: string
            format: date-time
        - name: userId
          in: query
          description: The unique identifier of the User who made the refund.
          schema:
            type: integer
        - name: amount
          in: query
          description: The amount of the refund.
          schema:
            type: string
        - name: currency
          in: query
          description: |
            The currency of the amount. Format: [ISO 4217](/guide/api-basics/data-format.html#currencies).
          schema:
            type: string
        - name: pageNumber
          in: query
          description: |
            The page number, only available on /v1/ endpoints 
          schema:
            type: integer
        - name: cursor
          in: query
          description: |
            Pagination cursor, if you don't pass a cursor, result will start at the first page.
          schema:
            type: string
        - name: pageCount
          in: query
          description: |
            The number of items per page, only available on /v1/ endpoints.
          schema:
            type: integer
        - name: sortBy
          in: query
          description: |
            The transaction element you want to sort the list with. Default value: _createdDate_. 
          schema:
            type: string
        - name: sortOrder
          in: query
          description: |
            The order you want to sort the list.
            * **DESC** for a descending sort
            * **ASC** for a ascending sort.
          schema:
            type: string
            default: DESC
            enum:
              - DESC
              - ASC
        - name: createdDateFrom
          in: query
          description: |
            The creation date from which you want to filter the request result.
            Format: YYYY-MM-DD HH:MM:SS. 
          schema:
            type: string
            format: date-time
        - name: createdDateTo
          in: query
          description: |
            The creation date up to which you want to filter the request result.
            Format: YYYY-MM-DD HH:MM:SS. 
          schema:
            type: string
            format: date-time
        - name: updatedDateFrom
          in: query
          description: |
            The modification date from which you want to filter the request
            result. Format: YYYY-MM-DD HH:MM:SS. 
          schema:
            type: string
            format: date-time
        - name: updatedDateTo
          in: query
          description: |
            The modification date up to which you want to filter the request
            result. Format: YYYY-MM-DD HH:MM:SS. 
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  payinrefunds:
                    type: array
                    items:
                      type: object
                      properties:
                        payinrefundId:
                          type: integer
                        payinrefundTag:
                          type: string
                        payinrefundStatus:
                          type: string
                          enum:
                            - PENDING
                            - CANCELED
                            - VALIDATED
                        walletId:
                          type: integer
                        payinId:
                          type: integer
                        payinrefundDate:
                          type: integer
                        amount:
                          type: string
                        currency:
                          type: string
                        createdDate:
                          type: string
                          description: Date YYYY-MM-DD HH:MM:SS
                        modifiedDate:
                          type: string
                          description: Date YYYY-MM-DD HH:MM:SS
                        totalRows:
                          type: integer
        '405':
          $ref: '#/components/responses/NotAllowedError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt: []
  /v1/payinrefunds/{id}:
    get:
      tags:
        - Payin Refunds
      summary: Get Payin Refund
      description: Get a payin refund.
      operationId: getPayinrefund
      parameters:
        - name: id
          in: path
          description: The unique identifier of the payin refund.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  payinrefunds:
                    type: array
                    items:
                      type: object
                      properties:
                        payinrefundId:
                          type: integer
                        payinrefundTag:
                          type: string
                        payinrefundStatus:
                          type: string
                          enum:
                            - PENDING
                            - CANCELED
                            - VALIDATED
                        walletId:
                          type: integer
                        payinId:
                          type: integer
                        payinrefundDate:
                          type: integer
                        amount:
                          type: string
                        currency:
                          type: string
                        createdDate:
                          type: string
                          description: Date YYYY-MM-DD HH:MM:SS
                        modifiedDate:
                          type: string
                          description: Date YYYY-MM-DD HH:MM:SS
                        totalRows:
                          type: integer
        '405':
          $ref: '#/components/responses/NotAllowedError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt: []
  /v1/payouts:
    get:
      tags:
        - Payouts
      summary: Search Payouts
      description: |
        Retrieve Payouts that match search criteria. The request must contain at least one of the following inputs: `payoutId`, `bankaccountId` (deprecated), `beneficiaryId`, `payoutTag`.
      operationId: getPayouts
      parameters:
        - name: accessSignature
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
        - name: accessTag
          in: query
          description: |
            A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.
          schema:
            type: string
        - name: accessUserId
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: integer
        - name: accessUserIp
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
        - name: payoutId
          in: query
          description: The unique identifier of the payout.
          schema:
            type: integer
        - name: payoutTag
          in: query
          description: Custom data.
          schema:
            type: string
        - name: payoutStatus
          in: query
          description: |
            The status of the payout.
          schema:
            type: string
            enum:
              - CANCELED
              - PENDING
              - VALIDATED
        - name: payoutTypeId
          in: query
          description: |
            Payout type's id:

            | ID | Description |
            |-----|-----|
            | 1 | Credit Transfer |
            | 2 | Direct Debit |
            | 3 | Sepa Instant Credit Transfer |
          schema:
            type: integer
            enum:
              - 1
              - 2
              - 3
        - name: walletId
          in: query
          description: Payout wallet's id.
          schema:
            type: integer
        - name: userId
          in: query
          description: Payout user's id.
          schema:
            type: integer
        - name: payoutDate
          in: query
          description: |
            Payout execution date. Format: YYYY-MM-DD HH:MM:SS
          schema:
            type: string
            format: date-time
        - name: bankaccountId
          in: query
          description: Legacy attribute, do not use.
          deprecated: true
          schema:
            type: integer
        - name: beneficiaryId
          in: query
          description: The unique identifier of the payout Beneficiary.
          schema:
            type: integer
        - name: amount
          in: query
          description: The amount of the payout.
          schema:
            type: string
        - name: currency
          in: query
          description: |
            The currency of the amount. Format: [ISO 4217](/guide/api-basics/data-format.html#currencies).
          schema:
            type: string
        - name: pageNumber
          in: query
          description: |
            The page number, only available on /v1/ endpoints 
          schema:
            type: integer
        - name: pageCount
          in: query
          description: |
            The number of items per page, only available on /v1/ endpoints  
          schema:
            type: integer
        - name: sortBy
          in: query
          description: |
            The transaction element you want to sort the list with. Default
            value: _createdDate_. 
          schema:
            type: string
        - name: sortOrder
          in: query
          description: |
            The order you want to sort the list.
            * **DESC** for a descending sort
            * **ASC** for a ascending sort.
          schema:
            type: string
            default: DESC
            enum:
              - DESC
              - ASC
        - name: createdDateFrom
          in: query
          description: |
            The creation date from which you want to filter the request result.
            Format: YYYY-MM-DD HH:MM:SS. 
          schema:
            type: string
            format: date-time
        - name: createdDateTo
          in: query
          description: |
            The creation date up to which you want to filter the request result. Format: YYYY-MM-DD HH:MM:SS. 
          schema:
            type: string
            format: date-time
        - name: updatedDateFrom
          in: query
          description: |
            The modification date from which you want to filter the request result. Format: YYYY-MM-DD HH:MM:SS. 
          schema:
            type: string
            format: date-time
        - name: updatedDateTo
          in: query
          description: |
            The modification date up to which you want to filter the request result. Format: YYYY-MM-DD HH:MM:SS. 
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  payouts:
                    type: array
                    items:
                      type: object
                      properties:
                        payoutId:
                          type: integer
                        payoutTag:
                          type: string
                        payoutStatus:
                          type: string
                          enum:
                            - PENDING
                            - CANCELED
                            - VALIDATED
                        payoutTypeId:
                          type: integer
                        payoutType:
                          type: string
                          enum:
                            - Credit Transfer
                            - Direct Debit
                            - Sepa Instant Credit Transfer
                        walletId:
                          type: integer
                        payoutDate:
                          type: string
                          description: Date YYYY-MM-DD
                        walletEventName:
                          type: string
                        walletAlias:
                          type: string
                        userFirstname:
                          type: string
                        userLastname:
                          type: string
                        userId:
                          type: integer
                        bankaccountId:
                          type: integer
                          deprecated: true
                        beneficiaryId:
                          type: integer
                        uniqueMandateReference:
                          type: string
                        bankaccountIBAN:
                          type: string
                        virtualIbanId:
                          type: integer
                        virtualIbanReference:
                          type: string
                        label:
                          type: string
                        endToEndId:
                          type: string
                        reasonCode:
                          type: string
                        reasonDescription:
                          type: string
                        codeStatus:
                          type: integer
                        informationStatus:
                          type: string
                        supportingFileLink:
                          type: string
                        amount:
                          type: string
                        currency:
                          type: string
                        partnerFee:
                          type: string
                        createdDate:
                          type: string
                          description: Date YYYY-MM-DD HH:MM:SS
                        modifiedDate:
                          type: string
                          description: Date YYYY-MM-DD HH:MM:SS
                        totalRows:
                          type: integer
        '405':
          $ref: '#/components/responses/NotAllowedError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt: []
    post:
      tags:
        - Payouts
      summary: Create Payout
      description: | 
        Create a new payout.

        This endpoint requires per-operation [SCA](/guide/strong-customer-authentication/introduction.html).
      operationId: postPayout
      parameters:
        - name: accessSignature
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
        - name: accessTag
          in: query
          description: |
            A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.
          schema:
            type: string
        - name: accessUserId
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: integer
        - name: accessUserIp
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              required:
                - walletId
                - beneficiaryId
                - amount
                - currency
              type: object
              properties:
                payoutTag:
                  type: integer
                  description: |
                    Custom attribute to use as you see fit. Learn more in the [Object tags](/guide/api-basics/objects-tags.html#objects-tags) article.
                    <br>Max length: 250 characters 
                    <br>Format: hc characters and `/` `!` `-` `_` `.` `*` `'` `(` `)`
                walletId:
                  type: integer
                  description: The unique identifier of the debited Wallet.
                payoutTypeId:
                  type: integer
                  description: |
                    Type of payout among the following:
                    * `1` for SEPA Credit Transfer (default)
                    * `2` for SEPA Direct Debit
                    * `3` for SEPA Instant Credit Transfer
                  enum: [1,2,3]
                bankAccountId:
                  deprecated: true
                  type: integer
                  description: DEPRECATED - Do not use this field as it is deprecated. Please use `beneficiaryId` instead.
                beneficiaryId:
                  type: integer
                  description: The unique identifier of the payout Beneficiary.
                label:
                  type: string
                  description: | 
                    The payout label that will be displayed on the receiver's bank account. <br> Max length: 140 characters.
                    * Allowed characters: `a b c d e f g h i j k l m n o p q r s t u v w x y z A B C D E F G H I J K L M N O P Q R S T U V W X Y Z 0 1 2 3 4 5 6 7 8 9 / - ? : ( ) . , ' + Space“.` 
                    * Accentuated characters will be replaced by the same characters without accent 
                    * `/n` character are removed
                    * Must not start or end with `/`
                    * Must not contain `//`
                endToEndId:
                  type: string
                  description: |
                    Unique identification assigned by the final client to unumbiguously identify the transaction. This identification is passed on, unchanged, throughout the entire end-to-end chain. Length is 35 chars max
                    * Allowed characters: `a b c d e f g h i j k l m n o p q r s t u v w x y z A B C D E F G H I J K L M N O P Q R S T U V W X Y Z 0 1 2 3 4 5 6 7 8 9 / - ? : ( ) . , ' + Space“.` 
                    * Accentuated characters will be replaced by the same characters without accent 
                    * `/n` character are removed
                    * Must not start or end with `/`
                    * Must not contain `//`
                amount:
                  type: number
                  format: float
                  description: | 
                    The amount of the payout.
                    * Must be greater than `0`. 
                    * Must be specified as a float with two decimals. 
                    
                    For example `180.99` for 180,99 euros and `120.00` for 120 euros. 
                currency:
                  type: string
                  description: |
                    The currency of the transfer amount. Format: [ISO 4217](/guide/api-basics/data-format.html#currencies).
                supportFileLink:
                  type: string
                  description: The link of the support file.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  payouts:
                    type: array
                    items:
                      type: object
                      properties:
                        payoutId:
                          type: integer
                        payoutTag:
                          type: string
                        payoutStatus:
                          type: string
                          enum:
                            - PENDING
                            - CANCELED
                            - VALIDATED
                        payoutTypeId:
                          type: integer
                        payoutType:
                          type: string
                          enum:
                            - Credit Transfer
                            - Direct Debit
                            - Instant Sepa Credit Transfer
                        walletId:
                          type: integer
                        payoutDate:
                          type: string
                          description: Date YYYY-MM-DD
                        walletEventName:
                          type: string
                        walletAlias:
                          type: string
                        userFirstname:
                          type: string
                        userLastname:
                          type: string
                        userId:
                          type: integer
                        bankaccountId:
                          type: integer
                          deprecated: true
                        beneficiaryId:
                          type: integer
                        uniqueMandateReference:
                          type: string
                        bankaccountIBAN:
                          type: string
                        virtualIbanId:
                          type: integer
                        virtualIbanReference:
                          type: string
                        label:
                          type: string
                        endToEndId:
                          type: string
                        reasonCode:
                          type: string
                        reasonDescription:
                          type: string
                        codeStatus:
                          type: integer
                        informationStatus:
                          type: string
                        supportingFileLink:
                          type: string
                        amount:
                          type: string
                        currency:
                          type: string
                        partnerFee:
                          type: string
                        createdDate:
                          type: string
                          description: Date YYYY-MM-DD HH:MM:SS
                        modifiedDate:
                          type: string
                          description: Date YYYY-MM-DD HH:MM:SS
                        totalRows:
                          type: integer
        '405':
          $ref: '#/components/responses/NotAllowedError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt: []
  /v1/payouts/{payoutId}:
    get:
      tags:
        - Payouts
      summary: Get Payout
      description: Retrieve a given Payout.
      operationId: getPayout
      parameters:
        - name: payoutId
          in: path
          description: The unique identifier of the Payout.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  payouts:
                    type: array
                    items:
                      type: object
                      properties:
                        payoutId:
                          type: integer
                        payoutTag:
                          type: string
                        payoutStatus:
                          type: string
                          enum:
                            - PENDING
                            - CANCELED
                            - VALIDATED
                        payoutTypeId:
                          type: integer
                        payoutType:
                          type: string
                          enum:
                            - Credit Transfer
                            - Direct Debit
                            - Instant Sepa Credit Transfer
                        walletId:
                          type: integer
                        payoutDate:
                          type: string
                          description: Date YYYY-MM-DD
                        walletEventName:
                          type: string
                        walletAlias:
                          type: string
                        userFirstname:
                          type: string
                        userLastname:
                          type: string
                        userId:
                          type: integer
                        bankaccountId:
                          type: integer
                          deprecated: true
                        beneficiaryId:
                          type: integer
                        uniqueMandateReference:
                          type: string
                        bankaccountIBAN:
                          type: string
                        virtualIbanId:
                          type: integer
                        virtualIbanReference:
                          type: string
                        label:
                          type: string
                        endToEndId:
                          type: string
                        reasonCode:
                          type: string
                        reasonDescription:
                          type: string
                        codeStatus:
                          type: integer
                        informationStatus:
                          type: string
                        supportingFileLink:
                          type: string
                        amount:
                          type: string
                        currency:
                          type: string
                        partnerFee:
                          type: string
                        createdDate:
                          type: string
                          description: Date YYYY-MM-DD HH:MM:SS
                        modifiedDate:
                          type: string
                          description: Date YYYY-MM-DD HH:MM:SS
                        totalRows:
                          type: integer
        '405':
          $ref: '#/components/responses/NotAllowedError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt: []
    delete:
      tags:
        - Payouts
      summary: Cancel Payout
      description: |
        Change payout status to `CANCELED`. A `VALIDATED` payout can't be canceled.
      operationId: deletePayout
      parameters:
        - name: payoutId
          in: path
          description: The unique identifier of the Payout.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  payouts:
                    type: array
                    items:
                      type: object
                      properties:
                        payoutId:
                          type: integer
                        payoutTag:
                          type: string
                        payoutStatus:
                          type: string
                          enum:
                            - PENDING
                            - CANCELED
                            - VALIDATED
                        payoutTypeId:
                          type: integer
                        payoutType:
                          type: string
                          enum:
                            - Credit Transfer
                            - Direct Debit
                            - Instant Sepa Credit Transfer
                        walletId:
                          type: integer
                        payoutDate:
                          type: string
                          description: Date YYYY-MM-DD
                        walletEventName:
                          type: string
                        walletAlias:
                          type: string
                        userFirstname:
                          type: string
                        userLastname:
                          type: string
                        userId:
                          type: integer
                        bankaccountId:
                          type: integer
                          deprecated: true
                        beneficiaryId:
                          type: integer
                        uniqueMandateReference:
                          type: string
                        bankaccountIBAN:
                          type: string
                        virtualIbanId:
                          type: integer
                        virtualIbanReference:
                          type: string
                        label:
                          type: string
                        endToEndId:
                          type: string
                        reasonCode:
                          type: string
                        reasonDescription:
                          type: string
                        codeStatus:
                          type: integer
                        informationStatus:
                          type: string
                        supportingFileLink:
                          type: string
                        amount:
                          type: string
                        currency:
                          type: string
                        partnerFee:
                          type: string
                        createdDate:
                          type: string
                          description: Date YYYY-MM-DD HH:MM:SS
                        modifiedDate:
                          type: string
                          description: Date YYYY-MM-DD HH:MM:SS
                        totalRows:
                          type: integer
        '400':
          $ref: '#/components/responses/BadRequestError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt: []
  /v1/payoutRefunds:
    post:
      tags:
        - Payout Refunds
      summary: Create Payout Refund
      description: |
        Create a Payout Refund. 
        As of today, this feature is only available for [emitting SCTE Inst Recalls](/guide/transfers/sepa-recalls.html#emitting-scte-inst-recalls).
        Otherwise, you need to [open a ticket](https://treezor.zendesk.com/hc/fr/articles/4402731372306-Comment-cr%C3%A9er-un-ticket-Zendesk) to request payout recalls.
      operationId: postPayoutRefund
      requestBody:
        content:
          application/json:
            schema:
              required:
                - payoutId
                - reasonCode
              type: object
              properties:
                payoutId:
                  type: string
                  description: The unique identifier of the payout for which the recall is to be made.
                accessTag:
                  type: string
                  description: |
                    A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). 
                    <br>Max length: 250 characters.
                payoutRefundTag:
                  type: string
                  description: |
                    Custom attribute to use as you see fit. Learn more in the [Object tags](/guide/api-basics/objects-tags.html#objects-tags) article.
                    <br>Max length: 250 characters
                    <br>Format: hc characters and `/` `!` `-` `_` `.` `*` `'` `(` `)`
                requestAmount:
                  type: number
                  description: The amount of the recall request. Defaults to the initial Payout amount.
                  format: float
                requestCurrency:
                  type: string
                  description: The currency of the recall request.
                  default: The initial Payout amount currency.
                requestComment: 
                  type: string
                  description: | 
                    Max length: 105 characters.
                reasonCode:
                  type: string
                  description: |
                    The reason for the recall, as listed in the [Types of Recalls](/guide/transfers/sepa-recalls.html#types-of-recalls-reasoncode) article.
                  enum: [DUPL, TECH, FRAD, CUST, AM09, AC03]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  payoutRefunds:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid v4
                        payoutRefundTag:
                          type: string
                        codeStatus:
                          type: string
                        informationStatus:
                          type: string
                          enum:
                            - PENDING
                            - VALIDATED
                            - CANCELED
                        payoutId:
                          type: string
                          format: uuid v4
                        requestAmount:
                          type: number
                        requestCurrency:
                          type: string
                          enum: [EUR]
                        requestComment:
                          type: string
                        reasonCode:
                          type: string
                          enum: [DUPL, TECH, FRAD, CUST, AM09, AC03]
                        refundAmount:
                          type: number
                          format: float
                        refundCurrency:
                          type: string
                          enum: [EUR]
                        refundDate:
                          type: string
                        refundComment:
                          type: string
                        negativeResponseReasonCode:
                          type: string
                        createdDate:
                          type: string
                        modifiedDate:
                          type: string     
        default:
          $ref: '#/components/responses/DefaultError'
  /v1/payoutRefunds/{payoutRefundId}:
    get:
      tags:
        - Payout Refunds
      summary: Get Payout Refund
      description: |
        Retrieve a given Payout Refund with its `id`.
      operationId: getPayoutRefund 
      parameters:
        - name: payoutRefundId
          required: true
          in: path
          description: The unique identifier of the payout refund.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  payoutRefunds:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid v4
                        payoutRefundTag:
                          type: string
                        codeStatus:
                          type: string
                        informationStatus:
                          type: string
                          enum:
                            - PENDING
                            - VALIDATED
                            - CANCELED
                        payoutId:
                          type: string
                          format: uuid v4
                        requestAmount:
                          type: number
                        requestCurrency:
                          type: string
                          enum: [EUR]
                        requestComment:
                          type: string
                        reasonCode:
                          type: string
                          enum: [DUPL, TECH, FRAD, CUST, AM09, AC03]
                        refundAmount:
                          type: number
                          format: float
                        refundCurrency:
                          type: string
                          enum: [EUR]
                        refundDate:
                          type: string
                        refundComment:
                          type: string
                        negativeResponseReasonCode:
                          type: string
                        createdDate:
                          type: string
                        modifiedDate:
                          type: string     
        default:
          $ref: '#/components/responses/DefaultError'
  /v1/recallRs:
    get:
      tags:
        - Recalls
      summary: Get Recalls or RRO
      description: Retrieve recalls or RROs
      operationId: getRecallRs
      parameters:
        - name: accessSignature
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
        - name: accessTag
          in: query
          description: |
            A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.
          schema:
            type: string
        - name: accessUserId
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: integer
        - name: accessUserIp
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
        - name: pageCount
          in: query
          description: |
            The number of items per page, only available on /v1/ endpoints
          schema:
            type: integer
        - name: pageNumber
          in: query
          description: |
            The page number, only available on /v1/ endpoints
          schema:
            type: integer
        - name: filter
          in: query
          description: |
            List of available filters:
            - id
            - recallRSepaMessageId
            - cxlId
            - statusId
            - reasonCode
            - clientId
            - userId
            - walletId
            - sctrId
            - receivedDate
            - frozenWalletFollowingRecallr
            - createdDate
            - inError
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  recallrs:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        recallRSepaMessageId:
                          type: integer
                        cxlId:
                          type: integer
                        statusId:
                          type: integer
                        statusLabel:
                          type: string
                        reasonCode:
                          type: string
                        additionalInformation:
                          type: string
                        clientId:
                          type: integer
                        userId:
                          type: integer
                        userTypeId:
                          type: integer
                        userName:
                          type: string
                        userStatusId:
                          type: integer
                        walletId:
                          type: integer
                        walletStatusId:
                          type: integer
                        walletActivationDate:
                          type: string
                        walletDesactivationDate:
                          type: string
                        sctrAmount:
                          type: string
                        sctrSettelmentDate:
                          type: string
                        sctrDbtrIBAN:
                          type: string
                        sctrDbtrBIC:
                          type: string
                        sctrDbtrName:
                          type: string
                        responseSepaMessageId:
                          type: integer
                        receivedDate:
                          type: string
                        payinId:
                          type: integer
                        payinRefundId:
                          type: integer
                        responseType:
                          type: integer
                        negativeResponseReasonCode:
                          type: string
                        negativeResponseAdditionalInformation:
                          type: string
                        responseComment:
                          type: string
                        boResponse:
                          type: boolean
                        frozenWalletFollowingRecallr:
                          type: boolean
                        automaticResponse:
                          type: string
                        comment:
                          type: string
                        fraudConfirmed:
                          type: boolean
                        partialRefund:
                          type: boolean
                        inError:
                          type: boolean
                        createdDate:
                          type: string
                        updatedDate:
                          type: string
        '401':
          description: Unauthorized credentials
          content: {}
        '403':
          description: Forbidden action
          content: {}
        '405':
          $ref: '#/components/responses/NotAllowedError'
        '500':
          description: Internal error
          content: {}
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt: []
  /v1/recallRs/{recallId}:
    get:
      tags:
        - Recalls
      summary: Get Recall or RRO
      description: Retrieve a given recall or RRO.
      operationId: getRecallR
      parameters:
        - name: recallId
          in: path
          required: true
          description: |
            The unique identifier of the recall.
          schema:
            type: string
        - name: accessSignature
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
        - name: accessTag
          in: query
          description: |
            A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.
          schema:
            type: string
        - name: accessUserId
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: integer
        - name: accessUserIp
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
        - name: pageCount
          in: query
          description: |
            The number of items per page, only available on /v1/ endpoints
          schema:
            type: integer
        - name: pageNumber
          in: query
          description: |
            The page number, only available on /v1/ endpoints
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  recallrs:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        recallRSepaMessageId:
                          type: integer
                        cxlId:
                          type: integer
                        statusId:
                          type: integer
                        statusLabel:
                          type: string
                        reasonCode:
                          type: string
                        additionalInformation:
                          type: string
                        clientId:
                          type: integer
                        userId:
                          type: integer
                        userTypeId:
                          type: integer
                        userName:
                          type: string
                        userStatusId:
                          type: integer
                        walletId:
                          type: integer
                        walletStatusId:
                          type: integer
                        walletActivationDate:
                          type: string
                        walletDesactivationDate:
                          type: string
                        sctrAmount:
                          type: string
                        sctrSettelmentDate:
                          type: string
                        sctrDbtrIBAN:
                          type: string
                        sctrDbtrBIC:
                          type: string
                        sctrDbtrName:
                          type: string
                        responseSepaMessageId:
                          type: integer
                        receivedDate:
                          type: string
                        payinId:
                          type: integer
                        payinRefundId:
                          type: integer
                        responseType:
                          type: integer
                        negativeResponseReasonCode:
                          type: string
                        negativeResponseAdditionalInformation:
                          type: string
                        responseComment:
                          type: string
                        boResponse:
                          type: boolean
                        frozenWalletFollowingRecallr:
                          type: boolean
                        automaticResponse:
                          type: string
                        comment:
                          type: string
                        fraudConfirmed:
                          type: boolean
                        partialRefund:
                          type: boolean
                        inError:
                          type: boolean
                        createdDate:
                          type: string
                        updatedDate:
                          type: string
        '401':
          description: Unauthorized credentials
          content: {}
        '403':
          description: Forbidden action
          content: {}
        '405':
          $ref: '#/components/responses/NotAllowedError'
        '500':
          description: Internal error
          content: {}
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt: []
  /v1/recallRs/{recallId}/response:
    put:
      tags:
        - Recalls
      summary: Respond to Recall or RRO
      description: Respond to a Recall or a RRO.
      operationId: putRecallR
      parameters:
        - name: recallId
          in: path
          description: The unique identifier of the recall.
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              required:
                - responseType
              type: object
              properties:
                accessSignature:
                  type: string
                  deprecated: true 
                  description: Legacy attribute, do not use.
                accessTag:
                  type: string
                  description: |
                    A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.
                accessUserId:
                  type: string
                  deprecated: true 
                  description: Legacy attribute, do not use.
                accessUserIp:
                  type: string
                  deprecated: true 
                  description: Legacy attribute, do not use.
                responseType:
                  type: integer
                  description: | 
                    Response to the received recall request. The recall request can be:
                    * `1` – Accepted and generates a positive response to the originating bank.
                    * `0` – Refused and generates a negative response to the originating bank.
                  enum:
                    - 0
                    - 1
                negativeResponseReasonCode:
                  type: string
                  description: |
                    Reason of negative response type. Required if `responseType` is false.
                    This field is non case sensitive.
                  enum:
                    - CUST
                    - LEGL
                    - AC04
                    - NOOR
                    - AM04
                    - NOAS
                    - ARDT
                negativeResponseAdditionalInformation:
                  type: string
                  description: |
                    Free field to add more informations of a negative response type.
                responseComment:
                  type: string
                  description: |
                    Free field to add more informations regardless the response type.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  recallrs:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        recallRSepaMessageId:
                          type: integer
                        cxlId:
                          type: integer
                        statusId:
                          type: integer
                        statusLabel:
                          type: string
                        reasonCode:
                          type: string
                        additionalInformation:
                          type: string
                        clientId:
                          type: integer
                        userId:
                          type: integer
                        userTypeId:
                          type: integer
                        userName:
                          type: string
                        userStatusId:
                          type: integer
                        walletId:
                          type: integer
                        walletStatusId:
                          type: integer
                        walletActivationDate:
                          type: string
                        walletDesactivationDate:
                          type: string
                        sctrAmount:
                          type: string
                        sctrSettelmentDate:
                          type: string
                        sctrDbtrIBAN:
                          type: string
                        sctrDbtrBIC:
                          type: string
                        sctrDbtrName:
                          type: string
                        responseSepaMessageId:
                          type: integer
                        receivedDate:
                          type: string
                        payinId:
                          type: integer
                        payinRefundId:
                          type: integer
                        responseType:
                          type: integer
                        negativeResponseReasonCode:
                          type: string
                        negativeResponseAdditionalInformation:
                          type: string
                        responseComment:
                          type: string
                        boResponse:
                          type: boolean
                        frozenWalletFollowingRecallr:
                          type: boolean
                        automaticResponse:
                          type: string
                        comment:
                          type: string
                        fraudConfirmed:
                          type: boolean
                        partialRefund:
                          type: boolean
                        inError:
                          type: boolean
                        createdDate:
                          type: string
                        updatedDate:
                          type: string
        '405':
          $ref: '#/components/responses/NotAllowedError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt: []
  /v1/recall-sct-inst/{sctInstId}/{recallId}:
    get:
      tags:
        - Recalls
      summary: Get SCT Inst Recall
      operationId: getRecallSctInst
      description: Retrieve an SCT Inst Recall.
      parameters:
        - name: sctInstId
          in: path
          required: true
          schema:
            type: string
          description: The unique identifier of the initial SCT Inst.
        - name: recallId
          in: path
          required: true
          schema:
            type: string
          description: The unique identifier of the recall.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  recalls:
                    type: array
                    items:
                      type: object
                      properties:
                        recallId:
                          type: string
                        creationDateTIme:
                          type: string
                        statusLabel:
                          type: string
                        cxId:
                          type: string
                        reasonCode:
                          type: string
                        additionalInformation:
                          type: string
                        sctrDbtrIBAN:
                          type: string
                        sctrDbtrBIC:
                          type: string
                        sctrDbtrName:
                          type: string
                        sctrDbtrAddress:
                          type: string
                        sctrDbtrCountry:
                          type: string
                        sctrCdtrIBAN:
                          type: string
                        sctrCdtrBIC:
                          type: string
                        sctrCdtrName:
                          type: string
                        sctrCdtrAddress:
                          type: string
                        sctrCdtrCountry:
                          type: string
                        sctrMsgId:
                          type: string
                        sctrInstrId:
                          type: string
                        sctrTxId:
                          type: string
                        sctrE2EID:
                          type: string
                        sctrAmount:
                          type: string
                        sctrSettlementDate:
                          type: string
                        sctrRemittanceInformation:
                          type: string
                        sctrTrzId:
                          type: string
                        sctrExternalId:
                          type: string
                        clientId:
                          type: integer
                        userId:
                          type: integer
                        walletId:
                          type: integer
                        receivedDate:
                          type: string
                        payinRefundId:
                          type: integer
                        responseType:
                          type: integer
                        negativeResponseReasonCode:
                          type: string
                        negativeResponseAdditionalInformation:
                          type: string
                        responseComment:
                          type: string
                        automaticResponse:
                          type: string
                        createdDate:
                          type: string
                        updatedDate:
                          type: string
        '401':
          description: Unauthorized
          content: {}
        '403':
          description: Forbidden
          content: {}
        '404':
          description: Not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  reason:
                    type: string
                    example: "item not found"
                  details:
                    type: string
        '405':
          $ref: '#/components/responses/NotAllowedError'
        '500':
          description: Internal error
          content: {}
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt: []
  /v1/recall-sct-inst/{sctInstId}/{recallId}/response:
    put:
      tags:
        - Recalls
      summary: Respond to SCT Inst Recall
      operationId: putRecallSctInst
      description: Provide your decision following an SCT Inst Recall.
      parameters:
        - name: sctInstId
          in: path
          required: true
          schema:
            type: string
          description: The unique identifier of the initial SCT Inst.
        - name: recallId
          in: path
          required: true
          schema:
            type: string
          description: The unique identifier of the recall.
      requestBody:
        content:
          application/json:
            schema:
              required:
                - responseType
              type: object
              properties:
                responseType:
                  type: integer
                  description: |
                    Indicates whether to accept (`1`) or decline (`0`) the recall.
                  enum: [0,1]
                negativeResponseAdditionalInformation:
                  type: string
                  description: | 
                    Additional information for rejecting a Recall. May be mandatory in some situations, learn more in the [Reject a Recall](/guide/transfers/sepa-recalls.html#reject-a-recall-2) article.
                negativeResponseReasonCode:
                  type: string
                  description: The [type of Recall Rejection](/guide/transfers/sepa-recalls.html#types-of-recalls-reasoncode). This field is mandatory if the `responseType` is `0`.
                  enum: ["NOOR", "ARDT", "AC04", "NOAS", "CUST", "AM04", "LEGL"]
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  recallID:
                    type: string
                    example: "a14d728e-b02a-43c2-9b2d-a394fc45xx1d"
        '405':
          $ref: '#/components/responses/NotAllowedError'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                type: object
                properties:
                  reason:
                    type: string
                  details:
                    type: string
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt: []

  /v1/taxResidences:
    get:
      tags:
        - User Tax Residences
      summary: Search Tax Residences
      operationId: getTaxresidences
      description: Retrieve Tax Residences that match your search conditions.
      parameters:
        - name: accessSignature
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
        - name: id
          in: query
          description: The unique identifier of the Tax Residence.
          schema:
            type: integer
        - name: userId
          in: query
          description: The unique identifier of the User.
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TaxResidenceObject'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        default:
          description: Unexpected error
          content:
            '*/*':
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        errorCode:
                          type: integer
                        errorMessage:
                          type: string
                        additionalInformation:
                          type: array
                          items:
                            type: string
      security:
        - jwt: []
    post:
      tags:
        - User Tax Residences
      summary: Create Tax Residence 
      operationId: postTaxresidence
      description: |
        Create a new Tax Residence.

        This endpoint requires per-session [SCA](/guide/strong-customer-authentication/introduction.html).
      parameters:
        - name: accessSignature
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              required:
                - userId
                - country
                - liabilityWaiver
              type: object
              properties:
                userId:
                  type: integer
                  description: The unique identifier of the user.
                country: 
                  type: string
                  description: The country of the resident.
                taxPayerId:
                  type: string
                  description: |
                    Tax payer's id. This field is mandatory if the country of the resident is `US`, but optional otherwise.
                liabilityWaiver:
                  type: boolean
                  description: |
                    Must be set to true if the `taxPayerId` is empty or null, and set to false otherwise.
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TaxResidenceObject'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        default:
          description: Unexpected error
          content:
            '*/*':
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        errorCode:
                          type: integer
                        errorMessage:
                          type: string
                        additionalInformation:
                          type: array
                          items:
                            type: string
      security:
        - jwt: []
  /v1/taxResidences/{taxResidenceId}:
    get:
      tags:
        - User Tax Residences
      operationId: getTaxresidence
      summary: Get Tax Residence
      description: Retrieve a Tax Residence based on its `id`.
      parameters:
        - name: accessSignature
          deprecated: true
          in: query
          description: |-
            Legacy attribute, do not use.
          schema:
            type: string
        - name: taxResidenceId
          in: path
          description: The unique identifier of the TaxResidence.
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TaxResidenceObject'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        default:
          description: Unexpected error
          content:
            '*/*':
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        errorCode:
                          type: integer
                        errorMessage:
                          type: string
                        additionalInformation:
                          type: array
                          items:
                            type: string
      security:
        - jwt: []
    put:
      tags:
        - User Tax Residences
      summary: Update Tax Residence
      operationId: putTaxresidence
      description: | 
        Modify an existing Tax Residence.

        This endpoint requires per-session [SCA](/guide/strong-customer-authentication/introduction.html).
      parameters:
        - name: accessSignature
          deprecated: true
          in: query
          description: |-
            Legacy attribute, do not use.
          schema:
            type: string
        - name: taxResidenceId
          in: path
          description: The unique identifier of the TaxResidence
          required: true
          schema:
            type: integer
        - name: userId
          in: query
          description: User's id residence
          schema:
            type: integer
        - name: country
          in: query
          description: country of the resident
          schema:
            type: string
        - name: taxPayerId
          in: query
          description: Tax payer's id
          schema:
            type: string
        - name: liabilityWaiver
          in: query
          description: Tax declaration
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TaxResidenceObject'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        default:
          description: Unexpected error
          content:
            '*/*':
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        errorCode:
                          type: integer
                        errorMessage:
                          type: string
                        additionalInformation:
                          type: array
                          items:
                            type: string
      security:
        - jwt: []
    delete:
      tags:
        - User Tax Residences
      summary: Delete a residence
      operationId: deleteTaxresidence
      description: Delete a residence that match id
      parameters:
        - name: accessSignature
          deprecated: true
          in: query
          description: |-
            Legacy attribute, do not use.
          schema:
            type: string
        - name: taxResidenceId
          in: path
          description: The unique identifier of the Tax Residence
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TaxResidenceObject'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        default:
          description: Unexpected error
          content:
            '*/*':
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        errorCode:
                          type: integer
                        errorMessage:
                          type: string
                        additionalInformation:
                          type: array
                          items:
                            type: string
      security:
        - jwt: []
  /v1/transactions:
    get:
      tags:
        - Transactions
      summary: Search Transactions
      description: |
        Retrieve Transactions that match search criteria. The request must contain at least one of the following inputs: `walletId`, `transactionId`, `executionDate`, `valueDate`
      operationId: getTransactions
      parameters:
        - name: accessSignature
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
        - name: accessTag
          in: query
          description: |
            A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.
          schema:
            type: string
        - name: accessUserId
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: integer
        - name: accessUserIp
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
        - name: transactionId
          in: query
          description: Transaction's Id
          schema:
            type: integer
        - name: transactionType
          in: query
          description: |
            Transaction types. Possible values:
            * Payin
            * Payout
            * Transfer
            * Transfer Refund
            * Payin Refund
            * Discount
            * Bill
          schema:
            type: string
        - name: walletId
          in: query
          description: Transactions' wallet id.
          schema:
            type: integer
        - name: userId
          in: query
          description: Transactions' user id.
          schema:
            type: integer
        - name: name
          in: query
          description: Transactions' name.
          schema:
            type: string
        - name: description
          in: query
          description: transactions' description.
          schema:
            type: string
        - name: amount
          in: query
          description: Transactions' amount.
          schema:
            type: string
        - name: currency
          in: query
          description: |
            Transfer amount currency. Format: [ISO 4217](/guide/api-basics/data-format.html#currencies).
          schema:
            type: string
        - name: valueDate
          in: query
          description: |-
            The value date of the transaction (date applied for the payment)
            Format: YYYY-MM-DD HH:MM:SS
          schema:
            type: string
            format: date-time
        - name: executionDate
          in: query
          description: |-
            Date of the execution of the transaction
            Format: YYYY-MM-DD HH:MM:SS
          schema:
            type: string
            format: date-time
        - name: pageNumber
          in: query
          description: |
            The page number, only available on /v1/ endpoints 
          schema:
            type: integer
        - name: pageCount
          in: query
          description: |
            The number of items per page, only available on /v1/ endpoints  
          schema:
            type: integer
        - name: sortBy
          in: query
          description: |
            The transaction element you want to sort the list with. Default value: _createdDate_. 
          schema:
            type: string
        - name: sortOrder
          in: query
          description: |
            The order you want to sort the list.
            * **DESC** for a descending sort
            * **ASC** for a ascending sort.
          schema:
            type: string
            default: DESC
            enum:
              - DESC
              - ASC
        - name: createdDateFrom
          in: query
          description: |
            The creation date from which you want to filter the request result.
            Format: YYYY-MM-DD HH:MM:SS. 
          schema:
            type: string
            format: date-time
        - name: createdDateTo
          in: query
          description: |
            The creation date up to which you want to filter the request result.
            Format: YYYY-MM-DD HH:MM:SS. 
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  transactions:
                    type: array
                    items:
                      type: object
                      properties:
                        transactionId:
                          type: integer
                        walletDebitId:
                          type: integer
                        walletCreditId:
                          type: integer
                        transactionType:
                          type: string
                        foreignId:
                          type: integer
                        name:
                          type: string
                        description:
                          type: string
                        valueDate:
                          type: string
                          description: Date YYYY-MM-DD
                        executionDate:
                          type: string
                          description: Date YYYY-MM-DD
                        amount:
                          type: string
                        walletDebitBalance:
                          type: string
                        walletCreditBalance:
                          type: string
                        currency:
                          type: string
                        createdDate:
                          type: string
                          description: Date YYYY-MM-DD HH:MM:SS
                        totalRows:
                          type: integer
        '405':
          $ref: '#/components/responses/NotAllowedError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt: []
  /v1/transactions/{transactionId}:
    get:
      tags:
        - Transactions
      summary: Get Transaction
      description: Retrieve a transaction.
      operationId: getTransaction
      parameters:
        - name: transactionId
          in: path
          description: The unique identifier of the Transaction.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  transactions:
                    type: array
                    items:
                      type: object
                      properties:
                        transactionId:
                          type: integer
                        walletDebitId:
                          type: integer
                        walletCreditId:
                          type: integer
                        transactionType:
                          type: string
                        foreignId:
                          type: integer
                        name:
                          type: string
                        description:
                          type: string
                        valueDate:
                          type: string
                          description: Date YYYY-MM-DD
                        executionDate:
                          type: string
                          description: Date YYYY-MM-DD
                        amount:
                          type: string
                        walletDebitBalance:
                          type: string
                        walletCreditBalance:
                          type: string
                        currency:
                          type: string
                        createdDate:
                          type: string
                          description: Date YYYY-MM-DD HH:MM:SS
                        totalRows:
                          type: integer
        '405':
          $ref: '#/components/responses/NotAllowedError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt: []
  /v1/transfers:
    get:
      tags:
        - Transfers
      summary: Search Transfers
      description: |
        Retrieve the list of transfers for at least one of those inputs:
        `walletId`, `beneficiaryWalletId`, `userId`, `beneficiaryUserId`, `transferId`, `transferTag`
      operationId: getTransfers
      parameters:
        - name: accessSignature
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
        - name: accessTag
          in: query
          description: |
            A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.
          schema:
            type: string
        - name: accessUserId
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: integer
        - name: accessUserIp
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
        - name: transferId
          in: query
          description: The unique identifier of the Transfer.
          schema:
            type: integer
        - name: transferTag
          in: query
          description: Custom data.
          schema:
            type: string
        - name: transferStatus
          in: query
          description: |
            The status of the Transfer. Possible values:
            * `PENDING`
            * `CANCELED`
            * `VALIDATED`
          schema:
            type: string
        - name: walletId
          in: query
          description: The unique identifier of the debited Wallet.
          schema:
            type: integer
        - name: beneficiaryWalletId
          in: query
          description: The unique identifier of the credited Wallet.
          schema:
            type: integer
        - name: userId
          in: query
          description: The unique identifier of the owner of the debited Wallet.
          schema:
            type: integer
        - name: beneficiaryUserId
          in: query
          description: The unique identifier of the owner of the credited Wallet.
          schema:
            type: integer
        - name: transferDate
          in: query
          description: |
            The date and time of the transfer. Format: YYYY-MM-DD HH:MM:SS
          schema:
            type: string
            format: date-time
        - name: amount
          in: query
          description: The amount of the Transfer.
          schema:
            type: string
        - name: currency
          in: query
          description: |
            The currency of the Transfer amount. Format: [ISO 4217](/guide/api-basics/data-format.html#currencies).
          schema:
            type: string
        - name: transferTypeId
          in: query
          description: |
            The type of the Transfer:
            * `1` – Wallet to wallet 
            * `2` – Card transaction
            * `3` – Client fees
            * `4` – Credit note
          schema:
            type: integer
        - name: pageNumber
          in: query
          description: |
            The page number, only available on /v1/ endpoints 
          schema:
            type: integer
        - name: pageCount
          in: query
          description: |
            The number of items per page, only available on /v1/ endpoints  
          schema:
            type: integer
        - name: sortBy
          in: query
          description: |
            The transaction element you want to sort the list with. Default value: `createdDate`. 
          schema:
            type: string
        - name: sortOrder
          in: query
          description: |
            The order you want to sort the list.
            * **DESC** for a descending sort
            * **ASC** for a ascending sort.
          schema:
            type: string
            default: DESC
            enum:
              - DESC
              - ASC
        - name: createdDateFrom
          in: query
          description: |
            The creation date from which you want to filter the request result.
            Format: YYYY-MM-DD HH:MM:SS. 
          schema:
            type: string
            format: date-time
        - name: createdDateTo
          in: query
          description: |
            The creation date up to which you want to filter the request result.
            Format: YYYY-MM-DD HH:MM:SS. 
          schema:
            type: string
            format: date-time
        - name: updatedDateFrom
          in: query
          description: |
            The modification date from which you want to filter the request result. Format YYYY-MM-DD HH:MM:SS. 
          schema:
            type: string
            format: date-time
        - name: updatedDateTo
          in: query
          description: |
            The modification date up to which you want to filter the request result. Format: YYYY-MM-DD HH:MM:SS. 
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransferObject'
        '405':
          $ref: '#/components/responses/NotAllowedError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt: []
    post:
      tags:
        - Transfers
      summary: Create Transfer
      description: | 
        Create a new Wallet-to-Wallet transfer.

        This endpoint requires per-session or per-operation [SCA](/guide/strong-customer-authentication/introduction.html) on if the `beneficiaryWalletId` belongs to the current User or not.
      operationId: postTransfers
      parameters:
        - name: accessSignature
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
        - name: accessTag
          in: query
          description: |
            A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.
          schema:
            type: string
        - name: accessUserId
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: integer
        - name: accessUserIp
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              required:
                - walletId
                - beneficiaryWalletId
                - amount
                - currency
              type: object
              properties:
                transferTag:
                  type: string
                  description: |
                    Custom attribute to use as you see fit. Learn more in the [Object tags](/guide/api-basics/objects-tags.html#objects-tags) article.
                    <br>Max length: 250 characters 
                    <br>Format: hc characters and `/` `!` `-` `_` `.` `*` `'` `(` `)`
                walletId:
                  type: integer
                  description: The debited Wallet unique identifier.
                beneficiaryWalletId:
                  type: integer
                  description: The credited Wallet unique identifier.
                amount:
                  type: number
                  format: float
                  description: The amount of the Transfer.
                currency:
                  type: string
                  description: | 
                    The currency of the Transfer. Debited wallet and credited wallet must share same currency.

                    Format: [ISO 4217](/guide/api-basics/data-format.html#currencies).
                  example: "EUR"
                label:
                  type: string
                  description: Custom data.
                transferTypeId:
                  type: integer
                  description: |
                    The type of the Transfer:
                    * `1` – Wallet to wallet 
                    * `3` – Client fees
                    * `4` – Credit note
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransferObject'
        '405':
          $ref: '#/components/responses/NotAllowedError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt: []
  /v1/transfers/{transferId}:
    get:
      tags:
        - Transfers
      summary: Get Transfer
      description: Retrieve a transfer using its `id`.
      operationId: getTransfer
      parameters:
        - name: transferId
          in: path
          description: The unique identifier of the Transfer.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransferObject'
        '405':
          $ref: '#/components/responses/NotAllowedError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt: []
    delete:
      tags:
        - Transfers
      summary: Cancel Transfer
      description: |
        Change status of the Transfer to `CANCELED`. A validated transfer can't be canceled.
      operationId: deleteTransfer
      parameters:
        - name: transferId
          in: path
          description: The unique identifier of the Transfer.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransferObject'
        '405':
          $ref: '#/components/responses/NotAllowedError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt: []

  /v1/users:
    get:
      tags:
        - Users
      summary: Search Users
      description: Retrieve Users matching your search criteria.
      operationId: getUsers
      parameters:
        - name: accessSignature
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
        - name: accessTag
          in: query
          description: |
            A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.
          schema:
            type: string
        - name: accessUserId
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: integer
        - name: accessUserIp
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
        - name: userId
          in: query
          description: The unique identifier of the User.
          schema:
            type: integer
        - name: userTypeId
          in: query
          description: The type of the user.
          schema:
            type: integer
            enum: [1, 2, 3, 4]
        - name: userStatus
          in: query
          description: Status of the user.
          schema:
            type: string
        - name: userTag
          in: query
          description: Custom data that you can add to this item.
          schema:
            type: string
        - name: specifiedUSPerson
          in: query
          description: |
            You may read more about who is considered a US Person in the [dedicated article](https://docs.treezor.com/guide/user-verification/tax-residence.html#the-specific-case-of-us-taxpayers).
          schema:
            type: integer
        - name: controllingPersonType
          in: query
          description: Type of relationship
          schema:
            type: integer
        - name: employeeType
          in: query
          description: Type of user's role
          schema:
            type: integer
        - name: email
          in: query
          description: User's email address (must be valid).
          schema:
            type: string
        - name: name
          in: query
          description: Name of the user.
          schema:
            type: string
        - name: legalName
          in: query
          description: Business name
          schema:
            type: string
        - name: parentUserId
          in: query
          description: Unique identifier of the parent of the user.
          schema:
            type: string
        - name: pageNumber
          in: query
          description: |
            The page number, only available on /v1/ endpoints 
          schema:
            type: integer
        - name: pageCount
          in: query
          description: |
            The number of items per page, only available on /v1/ endpoints  
          schema:
            type: integer
        - name: sortBy
          in: query
          description: |
            The transaction element you want to sort the list with.
          schema:
            type: string
            default: createdDate
        - name: sortOrder
          in: query
          description: |
            The order you want to sort the list.
          schema:
            type: string
            default: DESC
            enum:
              - DESC
              - ASC
        - name: createdDateFrom
          in: query
          description: |
            The creation date from which you want to filter the request result.
            Format: YYYY-MM-DD HH:MM:SS.
          schema:
            type: string
            format: date-time
        - name: createdDateTo
          in: query
          description: |
            The creation date up to which you want to filter the request result.
            Format YYYY-MM-DD HH:MM:SS. 
          schema:
            type: string
            format: date-time
        - name: updatedDateFrom
          in: query
          description: |
            The modification date from which you want to filter the request
            result. Format YYYY-MM-DD HH:MM:SS. 
          schema:
            type: string
            format: date-time
        - name: updatedDateTo
          in: query
          description: |
            The modification date up to which you want to filter the request
            result. Format YYYY-MM-DD HH:MM:SS. 
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserObject'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '405':
          $ref: '#/components/responses/NotAllowedError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt:
          - read_only
    post:
      tags:
        - Users
      summary: Create User
      description: | 
        You may read [the dedicated documentation for this feature](/guide/users/introduction.html#creation)
      operationId: postUsers
      parameters:
        - name: accessSignature
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
        - name: accessTag
          in: query
          description: |
            A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.
          schema:
            type: string
        - name: accessUserId
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: integer
        - name: accessUserIp
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              required:
                - userTypeId
                - specifiedUSPerson
                - email
              type: object
              properties:
                userTypeId:
                  type: integer
                  description: |
                    The type of the user. May be one of the following:
                    * `1` – Natural person (default)
                    * `2` – Business entity
                    * `3` – Non - governmental organization
                    * `4` – Governmental organization

                    You may read more about [Users](/guide/users/introduction.html)
                  enum: [1, 2, 3, 4]
                userTag:
                  type: string
                  description: |
                    Custom attribute to use as you see fit. Learn more in the [Object tags](/guide/api-basics/objects-tags.html#objects-tags) article.
                    <br>Max length: 250 characters 
                    <br>Format: hc characters and `/` `!` `-` `_` `.` `*` `'` `(` `)`
                parentUserId:
                  type: integer
                  description: The unique identifier of the parent user (if any).
                parentType:
                  type: string
                  description: |
                    The type of relationship between the parent and the current users.

                    You may read more about [parent-children relationships](/guide/users/parent-children.html).
                  enum:
                    - shareholder
                    - employee
                    - leader
                specifiedUSPerson:
                  type: integer
                  description: |
                    Should be set to `1` for any citizen or resident of the United States, e.g. at least one of the following conditions is true: 
                    * `country` or `secondaryCountry` = US (the address or the secondary address is in the US)
                    * `nationality` or `nationalityOther` = US (the user has the US nationality)
                    * `birthCountry` = US (the user is born in the US)
            
                    When set to `1`, the user must have a US tax residence declared.
            
                    Should be set to `0` otherwise.
            
                    You may read more about who is considered a US Person in the [dedicated article](https://docs.treezor.com/guide/user-verification/tax-residence.html#the-specific-case-of-us-taxpayers).
                  enum: [0, 1]
                controllingPersonType:
                  type: integer
                  description: |
                    Type of relationship:
                    * `0` – None (default)
                    * `1` – Shareholder
                    * `2` – Other_relationship
                    * `3` – Director

                    You may read more about [parent-children relationships](/guide/users/parent-children.html).
                  enum: [1, 2, 3, 4]
                employeeType:
                  type: integer
                  description: | 
                    Type of user role:
                    * `0` – None (default)
                    * `1` – Leader
                    * `2` – Employee
                  enum: [1, 2, 3, 4]
                entityType:
                  type: integer
                  description: |
                    The entity type of the legal entity:
                    * `1` – Reporting Financial Institution
                    * `2` – Non-Reporting Financial Institution
                    * `3` – Active Non-Financial Entity - Governmental entities, Int. organizations
                    * `4` – Active Non-Financial Entity - Other
                    * `5` – Passive Non-Financial Entity - Investment entity that is not Participating Jurisdiction FI
                  enum: [1, 2, 3, 4, 5]
                title:
                  type: string
                  description: |
                    The title of the user, which can be one of the following:
                    * `M` – Stands for mister (Mr.)
                    * `MME` – Stands for misses (Mrs.)
                    * `MLLE` – Stands for miss
                  enum:
                    - M
                    - MME
                    - MLLE
                firtname:
                  type: string
                  description: The User first name.
                lastname:
                  type: string
                  description: The User last name.
                middleNames:
                  type: string
                  description: The User middle names, if any.
                birthday:
                  type: string
                  description: | 
                    The birth date of the User. Format: YYYY-MM-DD
                email:
                  type: string
                  description: The User email. Must be valid and unique.
                address1:
                  type: string
                  description: The User postal address (main). Cannot contain carriage return.
                address2:
                  type: string
                  description: The User postal address (complement). Cannot contain carriage return.
                address3:
                  type: string
                  description: The User postal address (complement2). Cannot contain carriage return.
                postcode:
                  type: string
                  description: The User address postcode.
                city:
                  type: string
                  description: The User address city.
                state:
                  type: string
                  description: The User address state.
                country:
                  type: string
                  description: The country of the user's address.
                  format: ISO  3166-1 alpha-2
                distributionCountry:
                  type: string
                  description: | 
                    The country in which the end user is using your services. Available values may vary depending on your configuration. Please contact Treezor to configure this feature.

                    This field is only required when you operate in multiple countries. Otherwise, it either defaults to your country or is set to `null`.
                  format: ISO 3166-1 alpha-2
                  enum:
                    - FR
                    - ES
                    - IT
                    - DE
                    - BE
                    - NL
                secondaryAddress1:
                  type: string
                  description: The User secondary postal address (main).
                secondaryAddress2:
                  type: string
                  description: The User secondary postal address (complement)
                secondaryAddress3:
                  type: string
                  description: The User secondary postal address (complement2)
                secondaryPostcode:
                  type: string
                  description: The User secondary address postcode.
                secondaryCity:
                  type: string
                  description: The User secondary address city.
                secondaryState:
                  type: string
                  description: The User secondary address state.
                secondaryCountry:
                  type: string
                  description: | 
                    The User secondary address country. Format: ISO 3166-1 alpha-2
                phone:
                  type: string
                  description: |
                    The User phone number in [international E.164 format](https://en.wikipedia.org/wiki/E.164).
                mobile:
                  type: string
                  description: |
                    The User mobile phone number in [international E.164 format](https://en.wikipedia.org/wiki/E.164).
                nationality:
                  type: string
                  description: | 
                    The User nationality. Format: ISO 3166-1 alpha-2
                nationalityOther:
                  type: string
                  description: |
                    The User other nationality. Format: ISO 3166-1 alpha-2
                placeOfBirth:
                  type: string
                  description: The User place of birth.
                birthCountry: 
                  type: string
                  description: |
                    The User country of Birth. Format: ISO 3166-1 alpha-2
                occupation:
                  type: string
                  deprecated: true
                  description: Deprecated. You must use the `occupationType` field instead.
                incomeRange:
                  type: string
                  description: The User income range.
                  enum:
                    - 0-18
                    - 19-23
                    - 24-27
                    - 28-35
                    - 36-56
                    - 57-*
                legalName:
                  type: string
                  description: The Business legal name.
                legalRegistrationNumber:
                  type: string
                  description: The Business registration number.
                legalTvaNumber:
                  type: string
                  description: The Business VAT number.
                legalRegistrationDate:
                  type: string
                  format: date
                  description: The Business registration date.
                legalForm:
                  type: string
                  description: |
                    The legal form/category of the company. 
                    <br />
                    You may check out [the authoritative list](https://www.insee.fr/fr/information/2028129)
                legalShareCapital:
                  type: integer
                  description: The Business share capital.
                legalSector:
                  type: string
                  description: |
                    The Business Sector of the company (NAF or NACE code in France). The expected format depends on `legalSectorType`
                    <br />
                    You may check out [the authoritative list](https://www.insee.fr/fr/information/2120875)
                legalAnnualTurnOver:
                  type: string
                  description: The Business annual turnover (in k€).
                  enum:
                    - 0-39
                    - 40-99
                    - 100-249
                    - 250-999
                    - 1000-2999
                    - 3000-9999
                    - 10000-99999
                    - 100000-*
                legalNetIncomeRange:
                  type: string
                  description: The Business net income range (in k€).
                  enum:
                    - 0-4
                    - 5-9
                    - 10-49
                    - 50-149
                    - 150-499
                    - 500-*
                legalNumberOfEmployeeRange:
                  type: string
                  description: The Business number of employees.
                  enum:
                    - '0'
                    - 1-9
                    - 10-99
                    - 100-249
                    - 250-*
                effectiveBeneficiary:
                  type: integer
                  description: The effective beneficiary shares of the legal entity (e.g., for a beneficiary holding 70% of a company, value must be `70`). For shareholders only.
                language: 
                  type: string
                  description: |
                    The User preferred language. Format: ISO 639-1
                taxNumber:
                  type: string
                  deprecated: true
                  description: Deprecated. Your must use the `taxResidence` endpoint.
                taxResidence:
                  type: string
                  deprecated: true
                  description: Deprecated. Your must use the `taxResidence` endpoint.
                position:
                  type: string
                  description: The geographic activity coverage (for NGOs only).
                personalAssets:
                  type: string
                  description: The User personal assets range (in k€).
                  enum:
                    - 0-2
                    - 3-22
                    - 23-128
                    - 129-319
                    - 320-464
                    - 465-
                activityOutsideEu:
                  type: integer
                  description: |
                    For Users obligated to complete a due diligence questionnaire regarding sanctions and embargoes. 

                    Whether the entity and its business units, subsidiaries, and joint ventures have a commercial activity outside of the European Union.

                    Can be:
                    * `0` – False
                    * `1` – True. When set to this value, the next attributes become mandatory. 

                    See the [Sanctions and embargo](/guide/users/legal-entity.html#sanctions-and-embargo) article for more information.
                  enum:
                    - 0
                    - 1
                economicSanctions:
                  type: integer
                  description: |
                    For Users obligated to complete a due diligence questionnaire regarding sanctions and embargoes, and for which the `activityOutsideEu` value is set to `1`.

                    Whether the entity, its subsidiaries, entities, employees, directors, beneficial owners, or joint ventures are subject to Economic Sanctions.

                    Can be:
                    * `0` – False
                    * `1` – True 

                    See the [Sanctions and embargo](/guide/users/legal-entity.html#sanctions-and-embargo) article for more information.
                  enum:
                    - 0
                    - 1
                residentCountriesSanctions:
                  type: integer
                  description: |
                    For Users obligated to complete a due diligence questionnaire regarding sanctions and embargoes, and for which the `activityOutsideEu` value is set to `1`.

                    Whether the entity, its subsidiaries, or joint ventures, located within or operating from any countries or territories are subject to Comprehensive Sanctions. 

                    Can be:
                    * `0` – False
                    * `1` – True 

                    See the [Sanctions and embargo](/guide/users/legal-entity.html#sanctions-and-embargo) article for more information.
                  enum:
                    - 0
                    - 1
                involvedSanctions:
                  type: integer
                  description: |
                    For Users obligated to complete a due diligence questionnaire regarding sanctions and embargoes, and for which the `activityOutsideEu` value is set to `1`.

                    Whether the entity, its subsidiaries, or joint ventures, are engaged in transactions, investments, business, or other dealings that directly or indirectly involve or benefit:
                    * Any countries or territories subject to Comprehensive Sanctions (Cuba, Iran, North Korea, Syria, Crimea, Ukrainian Oblasts not controlled by the government, or Russia), or 
                    * Any person or entity which is the target of any Sanctions (“Sanctioned Targets”).

                    Can be:
                    * `0` – False
                    * `1` – True 

                    See the [Sanctions and embargo](/guide/users/legal-entity.html#sanctions-and-embargo) article for more information.
                  enum:
                    - 0
                    - 1
                entitySanctionsQuestionnaire:
                  type: integer
                  description: |
                    For Users obligated to complete a due diligence questionnaire regarding sanctions and embargoes, and for which the `activityOutsideEu` value is set to `1`.

                    Defines the scope to which the `activityOutsideEu` field applies:
                    * `0` – Not applicable
                    * `1` – Only the legal entity
                    * `2` – The legal entity and all its subsidiaries held at 100%
                    * `3` – The legal entity and all its subsidiaries held at 50% or more
                    * `4` – The legal entity and a list of subsidiaries

                    See the [Sanctions and embargo](/guide/users/legal-entity.html#sanctions-and-embargo) article for more information.

                  enum: [0, 1, 2, 3, 4]
                timezone:
                  type: string
                  description: |
                    The User timezone in the [tz database](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones) format.
                    The timezones have unique names in the form "Area/Location" (e.g. "America/New_York", "Europe/Paris").

                    It may be used to enforce a card `paymentDailyLimit` based on the cardholder's timezone.
                occupationType:
                  type: string
                  description: | 
                    The type of occupation of the User.
                  enum:
                    - self_employed
                    - public_sector_employees
                    - private_sector_employees
                    - retired_people_and_students
                    - without_any_professional_activity
                sourceOfFunds:
                  type: string
                  description: The source of funds for opening an account for a company or self-employed person.
                  enum: 
                    - donation
                    - inheritance
                    - loan 
                    - lottery
                    - pension
                    - proceeds_from_investment
                    - proceeds_from_sale
                    - salary
                    - savings
                legalSectorType:
                  type: string
                  description: |
                    Qualify the type of data in the `legalSector` field:
                    * If it is set to NACE the legalSector needs to be in a NACE format (4 digits). 
                    * If it is set to NAF (or not set at all) the legalSector needs to be in a NAF format (4 digits followed by a capital letter).
                  enum:
                    - NAF
                    - NACE
                isOnStockExchange:
                  type: integer
                  description: |
                    The user is a corporation and is quoted on an organized stock exchange.
                    * `0` – No
                    * `1` – Yes
                  enum: [0, 1]
                webauthn:
                  type: string
                  description: |
                    The `PublicKeyCredential` after the WebAuthn Register, encoded in base64.

                    See the Web Native article, [Device enrollment](/guide/strong-customer-authentication/web-native.html#device-enrollment) section for more information.
                passcode:
                  type: string
                  description: |
                    Required if the `webauthn` field is provided. Must be base64 encoded and encrypted.

                    See the Web Native article, [Device enrollment](/guide/strong-customer-authentication/web-native.html#device-enrollment) section for more information.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserObject'
        '405':
          $ref: '#/components/responses/NotAllowedError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt:
          - legal
          - admin
  /v1/users/{userId}:
    get:
      tags:
        - Users
      summary: Get User
      description: Retrieve user's information for given user's `id`.
      operationId: getUser
      parameters:
        - name: userId
          in: path
          description: The unique identifier of the User.
          required: true
          schema:
            type: integer
        - name: accessSignature
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
        - name: accessTag
          in: query
          description: |
            A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.
          schema:
            type: string
        - name: accessUserId
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: integer
        - name: accessUserIp
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserObject'
        '405':
          $ref: '#/components/responses/NotAllowedError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt:
          - read_only
    put:
      tags:
        - Users
      summary: Update User
      description: | 
        Update user's information.

        This endpoint may require per-operation [SCA](/guide/strong-customer-authentication/introduction.html).
      operationId: putUser
      parameters:
        - name: userId
          in: path
          description: The unique identifier of the User.
          required: true
          schema:
            type: integer
        - name: accessSignature
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
        - name: accessTag
          in: query
          description: |
            A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.
          schema:
            type: string
        - name: accessUserId
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: integer
        - name: accessUserIp
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                userTag:
                  type: string
                  description: Custom data.
                specifiedUSPerson:
                  type: integer
                  description: | 
                    You may read more about who is considered a US Person in the [dedicated article](https://docs.treezor.com/guide/user-verification/tax-residence.html#the-specific-case-of-us-taxpayers).
                controllingPersonType:
                  type: integer
                  description: |
                    Type of relationship, among the following:
                    * `0` – None (default)
                    * `1` – Shareholder
                    * `2` – Other_relationship
                    * `3` – Director
                employeeType:
                  type: integer
                  description: |
                    The tyoe of relationship among the following:
                    * `0` – None (default)
                    * `1` – Leader
                    * `2` – Employee
                title:
                  type: string
                  description: |
                    The title of the user, which can be one of the following:
                    * `M` – Stands for mister (Mr.)
                    * `MME` – Stands for misses (Mrs.)
                    * `MLLE` – Stands for miss
                firstname:
                  type: string
                  description: The first name of the User.
                lastname:
                  type: string
                  description: The last name of the User.
                middleNames:
                  type: string
                  description: The middle names of the User, if any.
                birthday:
                  type: string
                  description: | 
                    The birth date of the User. Format: YYYY-MM-DD
                email:
                  type: string
                  description: The email address of the User. Must be valid.
                address1:
                  type: string
                  description: The User postal address (main).
                address2:
                  type: string
                  description: The User postal address (complement). Cannot contain carriage return.
                address3:
                  type: string
                  description: The User postal address (complement2). Cannot contain carriage return.
                postcode:
                  type: string
                  description: The User address postcode.
                city:
                  type: string
                  description: The User address city.
                state:
                  type: string
                  description: The User address state.
                country:
                  type: string
                  description: The country of the user's address.
                  format: ISO  3166-1 alpha-2
                distributionCountry:
                  type: string
                  description: | 
                    The country in which the end user is using your services. Available values may vary depending on your configuration. Please contact Treezor to configure this feature.

                    This field is only required when you operate in multiple countries. Otherwise, it either defaults to your country or is set to `null`.
                  format: ISO 3166-1 alpha-2
                  enum:
                    - FR
                    - ES
                    - IT
                    - DE
                    - BE
                    - NL
                secondaryAddress1:
                  type: string
                  description: The User secondary postal address (main).
                secondaryAddress2:
                  type: string
                  description: The User secondary postal address (complement)
                secondaryAddress3:
                  type: string
                  description: The User secondary postal address (complement2)
                secondaryPostcode:
                  type: string
                  description: The User secondary address postcode.
                secondaryCity:
                  type: string
                  description: The User secondary address city.
                secondaryState:
                  type: string
                  description: The User secondary address state.
                secondaryCountry:
                  type: string
                  description: | 
                    The User secondary address country. Format: ISO  3166-1 alpha-2
                phone:
                  type: string
                  description: |
                    The User phone number in [international E.164 format](https://en.wikipedia.org/wiki/E.164).
                mobile:
                  type: string
                  description: |
                    The User mobile phone number in [international E.164 format](https://en.wikipedia.org/wiki/E.164).
                nationality:
                  type: string
                  description: | 
                    The User nationality. Format: ISO 3166-1 alpha-2
                nationalityOther:
                  type: string
                  description: |
                    The User other nationality. Format: ISO 3166-1 alpha-2
                placeOfBirth:
                  type: string
                  description: The User place of birth.
                birthCountry: 
                  type: string
                  description: |
                    The User country of Birth. Format: ISO 3166-1 alpha-2
                occupation:
                  type: string
                  deprecated: true
                  description: Deprecated. You must use the `occupationType` field instead.
                incomeRange:
                  type: string
                  description: The User income range.
                  enum:
                    - 0-18
                    - 19-23
                    - 24-27
                    - 28-35
                    - 36-56
                    - 57-*
                legalName:
                  type: string
                  description: The Business legal name.
                legalRegistrationNumber:
                  type: string
                  description: The Business registration number.
                legalTvaNumber:
                  type: string
                  description: The Business VAT number.
                legalRegistrationDate:
                  type: string
                  format: date
                  description: The Business registration date.
                legalForm:
                  type: string
                  description: |
                    The legal form/category of the company. 
                    <br />
                    You may check out [the authoritative list](https://www.insee.fr/fr/information/2028129)
                legalShareCapital:
                  type: integer
                  description: The Business share capital.
                legalSector:
                  type: string
                  description: |
                    The Business Sector of the company (NAF or NACE code in France). The expected format depends on `legalSectorType`
                    <br />
                    You may check out [the authoritative list](https://www.insee.fr/fr/information/2120875)
                legalAnnualTurnOver:
                  type: string
                  description: The Business annual turnover (in k€).
                  enum:
                    - 0-39
                    - 40-99
                    - 100-249
                    - 250-999
                    - 1000-2999
                    - 3000-9999
                    - 10000-99999
                    - 100000-*
                legalNetIncomeRange:
                  type: string
                  description: The Business net income range (in k€).
                  enum:
                    - 0-4
                    - 5-9
                    - 10-49
                    - 50-149
                    - 150-499
                    - 500-*
                legalNumberOfEmployeeRange:
                  type: string
                  description: The Business number of employees.
                  enum:
                    - '0'
                    - 1-9
                    - 10-99
                    - 100-249
                    - 250-*
                effectiveBeneficiary:
                  type: integer
                  description:  The effective beneficiary shares of the legal entity (e.g., for a beneficiary holding 70% of a company, value must be `70`). For shareholders only.
                language: 
                  type: string
                  description: |
                    The User preferred language. Format: ISO 639-1
                taxNumber:
                  type: string
                  deprecated: true
                  description: Deprecated. Your must use the `taxResidence` endpoint.
                taxResidence:
                  type: string
                  deprecated: true
                  description: Deprecated. Your must use the `taxResidence` endpoint.
                position:
                  type: string
                  description: The geographic activity coverage (for NGOs only).
                personalAssets:
                  type: string
                  description: The User personal assets range (in k€).
                  enum:
                    - 0-2
                    - 3-22
                    - 23-128
                    - 129-319
                    - 320-464
                    - 465-
                activityOutsideEu:
                  type: integer
                  description: |
                    For Users obligated to complete a due diligence questionnaire regarding sanctions and embargoes. 

                    Whether the entity and its business units, subsidiaries, and joint ventures have a commercial activity outside of the European Union.

                    Can be:
                    * `0` – False
                    * `1` – True. When set to this value, the next attributes become mandatory. 

                    See the [Sanctions and embargo](/guide/users/legal-entity.html#sanctions-and-embargo) article for more information.
                  enum:
                    - 0
                    - 1
                economicSanctions:
                  type: integer
                  description: |
                    For Users obligated to complete a due diligence questionnaire regarding sanctions and embargoes, and for which the `activityOutsideEu` value is set to `1`.

                    Whether the entity, its subsidiaries, entities, employees, directors, beneficial owners, or joint ventures are subject to Economic Sanctions.

                    Can be:
                    * `0` – False
                    * `1` – True 

                    See the [Sanctions and embargo](/guide/users/legal-entity.html#sanctions-and-embargo) article for more information.
                  enum:
                    - 0
                    - 1
                residentCountriesSanctions:
                  type: integer
                  description: |
                    For Users obligated to complete a due diligence questionnaire regarding sanctions and embargoes, and for which the `activityOutsideEu` value is set to `1`.

                    Whether the entity, its subsidiaries, or joint ventures, located within or operating from any countries or territories are subject to Comprehensive Sanctions. 

                    Can be:
                    * `0` – False
                    * `1` – True 

                    See the [Sanctions and embargo](/guide/users/legal-entity.html#sanctions-and-embargo) article for more information.
                  enum:
                    - 0
                    - 1
                involvedSanctions:
                  type: integer
                  description: |
                    For Users obligated to complete a due diligence questionnaire regarding sanctions and embargoes, and for which the `activityOutsideEu` value is set to `1`.

                    Whether the entity, its subsidiaries, or joint ventures, are engaged in transactions, investments, business, or other dealings that directly or indirectly involve or benefit:
                    * Any countries or territories subject to Comprehensive Sanctions (Cuba, Iran, North Korea, Syria, Crimea, Ukrainian Oblasts not controlled by the government, or Russia), or 
                    * Any person or entity which is the target of any Sanctions (“Sanctioned Targets”).

                    Can be:
                    * `0` – False
                    * `1` – True 

                    See the [Sanctions and embargo](/guide/users/legal-entity.html#sanctions-and-embargo) article for more information.
                  enum:
                    - 0
                    - 1
                entitySanctionsQuestionnaire:
                  type: integer
                  description: |
                    For Users obligated to complete a due diligence questionnaire regarding sanctions and embargoes, and for which the `activityOutsideEu` value is set to `1`.

                    Defines the scope to which the `activityOutsideEu` field applies:
                    * `0` – Not applicable
                    * `1` – Only the legal entity
                    * `2` – The legal entity and all its subsidiaries held at 100%
                    * `3` – The legal entity and all its subsidiaries held at 50% or more
                    * `4` – The legal entity and a list of subsidiaries

                    See the [Sanctions and embargo](/guide/users/legal-entity.html#sanctions-and-embargo) article for more information.

                  enum: [0, 1, 2, 3, 4]
                timezone:
                  type: string
                  description: |
                    The User timezone in the [tz database](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones) format.
                    The timezones have unique names in the form "Area/Location" (e.g. "America/New_York", "Europe/Paris").

                    It may be used to enforce a card `paymentDailyLimit` based on the cardholder's timezone.
                occupationType:
                  type: string
                  description: | 
                    The type of occupation of the User:
                    * self_employed
                    * public_sector_employees
                    * private_sector_employees
                    * retired_people_and_students
                    * without_any_professional_activity
                  enum:
                    - self_employed
                    - public_sector_employees
                    - private_sector_employees
                    - retired_people_and_students
                    - without_any_professional_activity
                sourceOfFunds:
                  type: string
                  description: The source of funds for opening an account for a company or self-employed person.
                  enum: 
                    - donation
                    - inheritance
                    - loan 
                    - lottery
                    - pension
                    - proceeds_from_investment
                    - proceeds_from_sale
                    - salary
                    - savings
                legalSectorType:
                  type: string
                  description: |
                    Qualify the type of data in the `legalSector` field:
                    * If it is set to NACE the legalSector needs to be in a NACE format (4 digits). 
                    * If it is set to NAF (or not set at all) the legalSector needs to be in a NAF format (4 digits followed by a capital letter).
                  enum:
                    - NAF
                    - NACE
                isOnStockExchange:
                  type: integer
                  description: |
                    The user is a corporation and is quoted on an organized stock exchange.
                    * `0` – No
                    * `1` – Yes
                  enum:
                    - 0
                    - 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserObject'
        '405':
          $ref: '#/components/responses/NotAllowedError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt:
          - read_write
    delete:
      tags:
        - Users
      summary: Disable User
      description: | 
        Update the user Status to `CANCELED`. See the [Deletion](/guide/users/modifications.html#deletion) article for more information.
      operationId: deleteUser
      parameters:
        - name: userId
          in: path
          description: The unique identifier of the User.
          required: true
          schema:
            type: integer
        - name: accessSignature
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
        - name: accessTag
          in: query
          description: |
            A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.
          schema:
            type: string
        - name: accessUserId
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: integer
        - name: accessUserIp
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
        - name: origin
          in: query
          description: |
            The origin of the request for cancelling the User, which can be one of the following:

            * `OPERATOR` – When you are at the origin of the deactivation.
            * `USER` – When the end user is at the origin of the deactivation.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserObject'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        default:
          description: Unexpected error
          content:
            '*/*':
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        errorCode:
                          type: integer
                        errorMessage:
                          type: string
                        additionalInformation:
                          type: array
                          items:
                            type: string
      security:
        - jwt:
          - read-write
          - admin
  /v1/users/{userId}/Kycreview:
    put:
      tags:
        - Users
        - User KYC Review
      summary: Request KYC Review
      operationId: putKycreview
      description: |
        Request a KYC review for a given user and its children to Treezor. Learn more in the [KYC Request](/guide/user-verification/kyc-request.html) article.
      parameters:
        - name: userId
          in: path
          description: The unique identifier of the User.
          required: true
          schema:
            type: integer
        - name: accessSignature
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
        - name: accessTag
          in: query
          description: |
            A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.
          schema:
            type: string
        - name: accessUserId
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: integer
        - name: accessUserIp
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserObject'
        '400':
          description: Bad Request
          content: {}
        '403':
          description: Forbidden
          content: {}
        default:
          description: Unexpected error
          content:
            '*/*':
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        errorCode:
                          type: integer
                        errorMessage:
                          type: string
                        additionalInformation:
                          type: array
                          items:
                            type: string
      security:
        - jwt:
          - read-write
  /v1/users/{userId}/kycliveness:
    post:
      tags:
        - User Live Verification
      description: | 
        Start the Live Verficiation process, whether it is KYC Liveness or Certified Video. You may read [the dedicated documentation for this feature](/guide/user-verification/live-verification.html).
      operationId: postKycliveness
      summary: Initiate Live Verification
      parameters:
        - name: userId
          in: path
          description: The unique identifier of the user.
          required: true
          schema:
            type: integer
      requestBody:
        content:
          'application/json':
            schema:
              type: object
              properties:
                redirectUrl: 
                  type: string
                  description: |
                    Specify the URL where the User should be redirected after the Live verification process. This overrides the default configured value.
        required: false
      responses:
        '201':
          description: 201 response
          content:
            application/json:
              schema:
                type: object
                properties:
                  user_kyc:
                    type: array
                    items:
                      type: object
                      properties:
                        identification-id:
                          type: string
                        identification-url:
                          type: string
        '400':
          description: |
            400 response is returned when the request is invalid i.e missing userId
          content: {}
            # application/json:
            #   example:
            #     error: invalid request
        '401':
          description: 401 response is returned when the Authorization header is missing
          content: {}
            # application/json:
            #   example:
            #     error: missing authorization header
        '403':
          description: |
            403 response is returned when your agent is not found in our services
          content: {}
            # application/json:
            #   example:
            #     error: user does not belong to client
        '428':
          description: |
            428 response is returned if specified userId is not found in our services
          content: {}
            # application/json:
            #   example:
            #     error: user not found
        '500':
          description: 500 response is returned for an internal error
          content: {}
            # application/json:
            #   example:
            #     error: internal server error
        '504':
          description: |
            Internal server error : response is returned when the request did not respond on time
          content: {}
        default:
          description: Unexpected error
          content:
            '*/*':
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        errorCode:
                          type: integer
                        errorMessage:
                          type: string
                        additionalInformation:
                          type: array
                          items:
                            type: string
      security:
        - jwt:
          - read-write
          - admin
    put:
      tags:
        - User Live Verification
      summary: Retrieve and Upload Live Verification Result
      description: | 
        Retrieve the live verification results, and make them available to Treezor.
        You may read [the dedicated documentation for this feature](/guide/user-verification/live-verification.html)
      operationId: put-kyc-liveness
      parameters:
        - name: userId
          in: path
          description: The unique identifier of the user.
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 200 response
          content:
            '*/*':
              schema:
                type: object
        '400':
          description: |
            400 response is returned when the request is incorrect e.g., missing userId
          content: {}
            # application/json:
            #   example:
            #     error: 'invalid request: invalid user id'
        '401':
          description: 401 response is returned when the Authorization header is missing
          content: {}
            # application/json:
            #   example:
            #     error: missing authorization header
        '403':
          description: |
            403 response is returned when your agent is not found in our services
          content: {}
            # application/json:
            #   example:
            #     error: agent not found
        '404':
          description: |
            404 response is returned when the identification is not found in our services
          content: {}
            # application/json:
            #   example:
            #     error: invalid identification id
        '405':
          description: |
            405 response is returned when the documents can not be stored in our services
          content: {}
            # application/json:
            #   example:
            #     error: invalid input
        '406':
          description: |
            406 response is returned when last initiated identification for userId is not in processed state.
          content: {}
          # content:
          #   application/json:
          #     example:
          #       error: invalid identification status
        '410':
          description: 410 response is returned when the identification no longer exists
          content: {}
        '504':
          description: |
            Internal server error : response is returned when the request did not respond on time
          content: {}
        default:
          description: Unexpected error
          content:
            '*/*':
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        errorCode:
                          type: integer
                        errorMessage:
                          type: string
                        additionalInformation:
                          type: array
                          items:
                            type: string
      security:
        - jwt:
          - read-write
          - admin
  /v1/users/{userId}/qes:
    post:
      tags:
        - User QES Verification
      summary: Initiate QES Verification
      description: |
        Start the qualified electronic signature (QES) verification. 
      operationId: postKycqes
      parameters:
        - name: userId
          in: path
          description: The unique identifier of the user.
          required: true 
          schema: 
            type: integer
      requestBody:
        content:
          'application/json':
            schema:
              type: object
              properties:
                redirectUrl:
                  type: string
                  description: |
                    Specify the URL where the user should be redirected after the QES verification process. This overrides the configured default value.
      responses:
        '201':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  identification-id:
                    type: string
                  identification-url:
                    type: string
        '400':
          description: Bad request
          content: {}
            # application/json:
            #   example:
            #     error: 'invalid request: invalid user id'
        '401':
          description: Unauthorized
          content: {}
            # application/json:
            #   example:
            #     error: missing authorization header
        '404':
          description: Not found
          content: {}
            # application/json:
            #   example:
            #     error: invalid identification id
        '410':
          description: Gone
          content: {}
            # application/json:
            #   example:
            #     error: invalid input
        '500':
          description: nternal server error
          content: {}
        default:
          description: Unexpected error
          content:
            '*/*':
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        errorCode:
                          type: integer
                        errorMessage:
                          type: string
                        additionalInformation:
                          type: array
                          items:
                            type: string
      security:
        - jwt:
          - read-write
          - admin
  /v1/virtualibans:
    get:
      tags:
        - Virtual IBANs
      summary: Search Virtual IBANs
      description: Retrieve virtual IBANs that match search criteria.
      operationId: getvirtualibans
      parameters:
        - name: accessSignature
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
        - name: accessTag
          in: query
          description: |
            A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.
          schema:
            type: string
        - name: accessUserId
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: integer
        - name: accessUserIp
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: integer
        - name: virtualIbanId
          in: query
          description: The unique identifier of the Virtual IBAN.
          schema:
            type: integer
        - name: walletId
          in: query
          description: The unique identifier of the Wallet to which the Virtual IBAN is associated.
          schema:
            type: integer
        - name: typeId
          in: query
          description: The type of the Virtual IBAN.
          schema:
            type: integer
        - name: tag
          in: query
          description: |
            Custom attribute that you can use as you see fit. <br> Learn more in the [Object tags](/guide/api-basics/objects-tags.html) article.
          schema:
            type: integer
        - name: reference
          in: query
          description: The client's internal reference of the Virtual IBAN.
          schema:
            type: string
        - name: validFrom
          in: query
          description: The date from which the Virtual IBAN validity starts. Defaults to today's date and must be set in the future.
          schema:
            type: string
            format: date
        - name: validTo
          in: query
          description: |
            The date from which the Virtual IBAN validity ends. Must be set after the `validFrom` date.
          schema:
            type: string
            format: date
        - name: maxUsage
          in: query
          description: The maximum number of transactions allowed.
          schema:
            type: integer
        - name: maxAmount
          in: query
          description: The maximum cumulated amount allowed.
          schema:
            type: number
            format: float
        - name: numberOfTransactions
          in: query
          description: The current number of transactions for the Virtual IBAN.
          schema:
            type: integer
        - name: cumulatedAmount
          in: query
          description: The cumulated amount of transactions for the Virtual IBAN.
          schema:
            type: number
            format: float
        - name: createdDateFrom
          in: query
          description: |
            The creation date from which you want to filter the request result.
            Format: YYYY-MM-DD HH:MM:SS. 
          schema:
            type: string
            format: date-time
        - name: createdDateTo
          in: query
          description: |
            The creation date up to which you want to filter the request result.
            Format: YYYY-MM-DD HH:MM:SS. 
          schema:
            type: string
            format: date-time
        - name: updatedDateFrom
          in: query
          description: |
            The modification date from which you want to filter the request
            result. Format: YYYY-MM-DD HH:MM:SS. 
          schema:
            type: string
            format: date-time
        - name: updatedDateTo
          in: query
          description: |
            The modification date up to which you want to filter the request
            result. Format: YYYY-MM-DD HH:MM:SS. 
          schema:
            type: string
            format: date-time
        - name: pageNumber
          in: query
          description: |
            The page number, only available on /v1/ endpoints 
          schema:
            type: integer
        - name: pageCount
          in: query
          description: |
            The number of items per page, only available on /v1/ endpoints  
          schema:
            type: integer
        - name: sortBy
          in: query
          description: |
            The transaction element you want to sort the list with. Default
            value: createdDate. 
          schema:
            type: string
        - name: sortOrder
          in: query
          description: |
            The order you want to sort the list.
            * **DESC** for a descending sort
            * **ASC** for a ascending sort.
          schema:
            type: string
            default: DESC
            enum:
              - DESC
              - ASC
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VirtualIbanObject'
        '405':
          $ref: '#/components/responses/NotAllowedError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt: []
    post:
      tags:
        - Virtual IBANs
      summary: Create Virtual IBAN
      description: Create a new virtual IBAN associated with a given Wallet.
      operationId: postVirtualIban
      parameters:
        - name: accessSignature
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
        - name: accessTag
          in: query
          description: |
            A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.
          schema:
            type: string
        - name: accessUserId
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: integer
        - name: accessUserIp
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              required:
                - walletId
                - typeId
              type: object
              properties:
                walletId:
                  type: integer
                  description: |
                    The unique identifier of the Wallet to which the Virtual IBAN is associated. Must be a `walletType` of `9` or `10`.
                typeId:
                  type: integer
                  description: |
                    The type of IBAN, allowing for a specific transfer direction. 
                    Can be: <ul><li>`1` for `SCT` [SEPA Credit Transfer](/guide/transfers/credit-transfer.html#received-credit-transfers-sctr)</li><li>`2` for `SDD` [SEPA Direct Debit](/guide/transfers/direct-debit.html)</li></ul>
                tag:
                  type: string
                  description: |
                    Custom attribute that you can use as you see fit.
                    
                    Learn more in the [Object tags](/guide/api-basics/objects-tags.html) article.
                validFrom:
                  type: string
                  description: |
                    The date from which the Virtual IBAN validity starts. Defaults to today's date and must be set in the future.<br> Format: YYYY-MM-DD
                validTo:
                    type: string
                    description: |
                      The date from which the Virtual IBAN validity ends. Must be set after the `validFrom` date.<br> Format: YYYY-MM-DD
                maxUsage:
                  type: integer
                  description: |
                    The maximum number of transactions allowed (`0` = unlimited). 
                maxAmount:
                  type: string
                  format: float
                  description: | 
                    The maximum cumulated amount of all transactions (`"0.00"` = unlimited).
                reference:
                  type: string
                  description: |
                    Custom field for your internal reference of the Virtual IBAN.
                    
                    Max. length: 255 characters.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VirtualIbanObject'
        '405':
          $ref: '#/components/responses/NotAllowedError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt: []
  /v1/virtualibans/{virtualIbanId}:
    get:
      tags:
        - Virtual IBANs
      summary: Get Virtual IBAN
      description: Retrieve a Virtual IBAN based on its `id`.
      operationId: getvirtualiban
      parameters:
        - name: virtualIbanId
          in: path
          description: The unique identifier of the Virtual IBAN.
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VirtualIbanObject'
        '405':
          $ref: '#/components/responses/NotAllowedError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt: []
    put:
      tags:
        - Virtual IBANs
      summary: Update Virtual IBAN
      description: Update a Virtual IBAN's information.
      operationId: putVirtualIban
      parameters:
        - name: virtualIbanId
          in: path
          description: The unique identifier of the Virtual IBAN.
          required: true
          schema:
            type: integer
        - name: accessSignature
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
        - name: accessTag
          in: query
          description: |
            A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.
          schema:
            type: string
        - name: accessUserId
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: integer
        - name: accessUserIp
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                validFrom:
                  type: string
                  description: |
                    The date from which the Virtual IBAN validity starts. Defaults to today's date and must be set in the future.<br> Format: YYYY-MM-DD
                validTo:
                    type: string
                    description: |
                      The date from which the Virtual IBAN validity ends. Must be set after the `validFrom` date.<br> Format: YYYY-MM-DD
                maxUsage:
                  type: integer
                  description: |
                    The maximum number of transactions allowed (`0` = unlimited). 
                maxAmount:
                  type: string
                  format: float
                  description: | 
                    The maximum cumulated amount of all transactions (`"0.00"` = unlimited).
                reference:
                  type: string
                  description: |
                    Custom field for your internal reference of the Virtual IBAN.
                    
                    Max. length: 255 characters.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VirtualIbanObject'
        '405':
          $ref: '#/components/responses/NotAllowedError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt: []
  /v1/wallets:
    get:
      tags:
        - Wallets
      summary: Search Wallets
      description: |
        Retrieve Wallets that match your search conditions. The request must specify at least one of those fields: `walletId`, `eventAlias`, `userId`, `walletTypeId`.
      operationId: getWallets
      parameters:
        - name: accessSignature
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
        - name: accessTag
          in: query
          description: |
            A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.
          schema:
            type: string
        - name: accessUserId
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: integer
        - name: accessUserIp
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: integer
        - name: walletId
          in: query
          description: The unique identifier of the Wallet.
          schema:
            type: integer
        - name: walletStatus
          in: query
          description: | 
            The status of the Wallet, which can be one of the following:
            * `PENDING` – The Wallet has just been created.
            * `VALIDATED` – The Wallet is active.
            * `CANCELED` – The Wallet is deactivated.
          schema:
            type: string
            enum:
              - PENDING
              - VALIDATED
              - CANCELED
        - name: userId
          in: query
          description: The unique identifier of the User owning the Wallet.
          schema:
            type: integer
        - name: parentUserId
          in: query
          description: The unique identifier of the Parent User of the Wallet owner.
          schema:
            type: integer
        - name: walletTag
          in: query
          description: |
            Custom attribute to use as you see fit. Learn more in the [Object tags](/guide/api-basics/objects-tags.html#objects-tags) article.
            <br>Max length: 250 characters 
            <br>Format: hc characters and `/` `!` `-` `_` `.` `*` `'` `(` `)`
          schema:
            type: string
        - name: walletTypeId
          in: query
          description: |
            The type of Wallet. The following values are allowed:
            * `9` – Electronic Money Wallet
            * `10` – Payment Account Wallet
            * `13` – Mirror Wallet
            <br> Other types are available but can only be set by Treezor. Learn more in the [Wallet Types](/guide/wallets/introduction.html#types-of-wallets) documentation.
          schema:
            type: integer
        - name: eventAlias
          in: query
          deprecated: true
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
        - name: tariffId
          in: query
          description: The fees applied to the Wallet, as defined by your contract with Treezor. Usually required, but may have a default value set by Treezor.
          schema:
            type: integer
        - name: pageNumber
          in: query
          description: |
            The page number, only available on /v1/ endpoints 
          schema:
            type: integer
        - name: pageCount
          in: query
          description: |
            The number of items per page, only available on /v1/ endpoints  
          schema:
            type: integer
        - name: sortBy
          in: query
          description: |
            The transaction element you want to sort the list with.
          schema:
            type: string
            default: createdDate
        - name: sortOrder
          in: query
          description: |
            The order you want to sort the list.
            * **DESC** for a descending sort
            * **ASC** for a ascending sort.
          schema:
            type: string
            default: DESC
            enum:
              - DESC
              - ASC
        - name: createdDateFrom
          in: query
          description: |
            The creation date from which you want to filter the request result.
            Format: YYYY-MM-DD HH:MM:SS. 
          schema:
            type: string
            format: date-time
        - name: createdDateTo
          in: query
          description: |
            The creation date up to which you want to filter the request result.
            Format: YYYY-MM-DD HH:MM:SS. 
          schema:
            type: string
            format: date-time
        - name: updatedDateFrom
          in: query
          description: |
            The modification date from which you want to filter the request
            result. Format: YYYY-MM-DD HH:MM:SS. 
          schema:
            type: string
            format: date-time
        - name: updatedDateTo
          in: query
          description: |
            The modification date up to which you want to filter the request
            result. Format: YYYY-MM-DD HH:MM:SS. 
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletObject'
        '400':
          $ref: '#/components/responses/BadRequestError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt:
          - read_only
    post:
      tags:
        - Wallets
      summary: Create Wallet
      description: | 
        Create a new Wallet

        This endpoint requires per-session [SCA](/guide/strong-customer-authentication/introduction.html).
      operationId: postWallets
      parameters:
        - name: accessSignature
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
        - name: accessTag
          in: query
          description: |
            A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.
          schema:
            type: string
        - name: accessUserId
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: integer
        - name: accessUserIp
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              required:
                - walletTypeId
                - tariffId
                - userId
                - currency
                - eventName
              type: object
              properties:
                walletTypeId:
                  type: integer
                  description: |
                    The type of Wallet. The following values are allowed:
                    * `9` – Electronic Money Wallet
                    * `10` – Payment Account Wallet
                    * `13` – Mirror Wallet
                  
                    Other types are available but can only be set by Treezor. Learn more in the [Wallet Types](/guide/wallets/introduction.html#types-of-wallets) documentation.
                tariffId:
                  type: integer
                  description: The fees applied to the Wallet, as defined by your contract with Treezor. Usually required, but may have a default value set by Treezor.
                userId:
                  type: integer
                  description: The unique identifier of the User owning the Wallet.
                jointUserId:
                  type: integer
                  deprecated: true
                  description: Legacy attribute, do not use.
                walletTag:
                  type: string
                  description: |
                    Custom attribute to use as you see fit. Learn more in the [Object tags](/guide/api-basics/objects-tags.html#objects-tags) article.
                    <br>Max length: 250 characters 
                    <br>Format: hc characters and `/` `!` `-` `_` `.` `*` `'` `(` `)`
                currency:
                  type: string
                  description: |
                    The currency of the Wallet, which will be used for money transactions.
                    <br>Format: [ISO 4217 3-letter code](/guide/api-basics/data-format.html#currencies)
                eventName:
                  type: string
                  description: The name of the Wallet.
                eventAlias:
                  type: string
                  deprecated: true
                  description: Legacy attribute, do not use.
                eventMessage:
                  type: string
                  description: Can be used to describe the Wallet.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletObject'
        '400':
          $ref: '#/components/responses/BadRequestError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt:
          - read_write
  /v1/wallets/{walletId}:
    get:
      tags:
        - Wallets
      summary: Get Wallet
      description: Retrieve a Wallet based on its `id`.
      operationId: getWallet
      parameters:
        - name: walletId
          in: path
          description: The unique identifier of the Wallet.
          required: true
          schema:
            type: integer
            format: int64
        - name: accessSignature
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
        - name: accessTag
          in: query
          description: |
            A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.
          schema:
            type: string
        - name: accessUserId
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: integer
        - name: accessUserIp
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletObject'
        '405':
          $ref: '#/components/responses/NotAllowedError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt:
          - read_only
    put:
      tags:
        - Wallets
      summary: Update Wallet
      description: Modifiy a Wallet information
      operationId: putWallet
      parameters:
        - name: walletId
          in: path
          description: The unique identifier of the Wallet.
          required: true
          schema:
            type: integer
            format: int64
        - name: accessSignature
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
        - name: accessTag
          in: query
          description: |
            A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.
          schema:
            type: string
        - name: accessUserId
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: integer
        - name: accessUserIp
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                tariffId:
                  type: integer
                  description: The fees applied to the Wallet, as defined by your contract with Treezor.
                walletTypeId:
                  type: integer
                  description: |
                    The type of Wallet. The following values are allowed:
                    * `9` – Electronic Money Wallet
                    * `10` – Payment Account Wallet
                    * `13` – Mirror Wallet
                  
                    Other types are available but can only be set by Treezor. Learn more in the [Wallet Types](/guide/wallets/introduction.html#types-of-wallets) documentation.
                walletTag:
                  type: string
                  description: |
                    Custom attribute to use as you see fit. Learn more in the [Object tags](/guide/api-basics/objects-tags.html#objects-tags) article.
                    <br>Max length: 250 characters 
                    <br>Format: hc characters and `/` `!` `-` `_` `.` `*` `'` `(` `)`
                eventName:
                  type: string
                  description: The name of the Wallet.
                eventMessage:
                  type: string
                  description: Can be used to describe the Wallet.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletObject'
        '405':
          $ref: '#/components/responses/NotAllowedError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt:
          - read_write
    delete:
      tags:
        - Wallets
      summary: Delete Wallet
      description: Change the status of the Wallet to `CANCELED`. This action is irreversible.
      operationId: deleteWallet
      parameters:
        - name: walletId
          in: path
          description: The unique identifier of the Wallet.
          required: true
          schema:
            type: integer
        - name: accessSignature
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
        - name: accessTag
          in: query
          description: |
            A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.
          schema:
            type: string
        - name: accessUserId
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: integer
        - name: accessUserIp
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
        - name: origin
          in: query
          description: |
            The origin of the request for cancelling the Wallet, which can be one of the following: <ul><li>`OPERATOR` – When **you** are at the origin of the deactivation.</li><li>`USER` – When the **end user** is at the origin of the deactivation.</li></ul>
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  wallets:
                    type: array
                    items:
                      type: object
                      properties:
                        walletId:
                          type: integer
                        walletTypeId:
                          type: integer
                          description: |
                            | Id | Description |
                            |----|----|
                            | 9 | Electronic Money Wallet |
                            | 10 | Payment Account Wallet |
                            | 13 | Mirror Wallet |
                        walletStatus:
                          type: string
                          enum:
                            - PENDING
                            - CANCELED
                            - VALIDATED
                        codeStatus:
                          type: integer
                        informationStatus:
                          type: string
                        walletTag:
                          type: string
                        userId:
                          type: integer
                        userLastname:
                          type: string
                        userFirstname:
                          type: string
                        jointUserId:
                          type: integer
                          deprecated: true
                        tariffId:
                          type: integer
                        eventName:
                          type: string
                        eventAlias:
                          type: string
                        eventDate:
                          type: string
                          description: Date YYYY-MM-DD
                        eventMessage:
                          type: string
                        eventPayinStartDate:
                          type: string
                          description: Date YYYY-MM-DD
                        eventPayinEndDate:
                          type: string
                          description: Date YYYY-MM-DD
                        contractSigned:
                          type: integer
                        bic:
                          type: string
                        iban:
                          type: string
                        urlImage:
                          type: string
                        currency:
                          type: string
                        createdDate:
                          type: string
                          description: Date YYYY-MM-DD HH:MM:SS
                        modifiedDate:
                          type: string
                          description: Date YYYY-MM-DD HH:MM:SS
                        payinCount:
                          type: integer
                        payoutCount:
                          type: integer
                        transferCount:
                          type: integer
                        solde:
                          type: integer
                          format: decimal
                        authorizedBalance:
                          type: integer
                          format: decimal
                        totalRows:
                          type: integer
        '405':
          $ref: '#/components/responses/NotAllowedError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt:
          - read_write
  /v1/mdc/rulesets:
    get:
      tags:
      - Card Rulesets (MDC)
      operationId: get-rulesets
      summary: Get Rulesets
      description: Retrieve all rulesets.
      security:
        - jwt: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ruleset:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                          example: "9ea4c7f6-50a2-4679-8634-dfe42f03cbdc"
                        name:
                          type: string
                          example: "Example of a Ruleset"
                        description:
                          type: string
                          example: ""
                        status:
                          type: string
                          enum: [ "ENABLED", "DELETE" ]
                          example: "ENABLED"
        '400':
          $ref: '#/components/responses/BadRequestError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/DefaultError'
    post:
      tags:
      - Card Rulesets (MDC)
      operationId: create-ruleset
      summary: Create Ruleset
      description: Create a Ruleset.
      security:
        - jwt: []
      requestBody:
        content:
          'application/json':
            schema:
              type: object
              properties:
                metadata:
                  $ref: '#/components/schemas/RulesetMetadata'
                ruleset:
                  $ref: '#/components/schemas/Ruleset'
        required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  rulesetId:
                    type: string
                    example: 200cf363-32cd-4edd-a9ff-bc4aee6ba070
        '400':
          $ref: '#/components/responses/BadRequestError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/DefaultError'
  /v1/mdc/rulesets/{rulesetId}:
    get:
      tags:
      - Card Rulesets (MDC)
      operationId: get-ruleset
      summary: Get Ruleset
      description: Retrieve a Ruleset with its `id`.
      security:
        - jwt: []
      parameters:
      - name: rulesetId
        in: path
        description: The unique identifier of the Ruleset.
        required: true
        schema: {}
      responses:
        '200':
          description: OK
          content: 
            'application/json':
              schema:
                $ref: '#/components/schemas/FullRuleset'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/DefaultError'
    put:
      tags:
      - Card Rulesets (MDC)
      operationId: put-ruleset
      summary: Update Ruleset
      description: Modify a Ruleset.
      security:
        - jwt: []
      parameters:
      - name: rulesetId
        in: path
        description: The unique identifier of the Ruleset.
        required: true 
        schema: {}
      requestBody:
        content:
          'application/json':
            schema:
              type: object
              properties:
                metadata:
                  $ref: '#/components/schemas/RulesetMetadata'
                ruleset:
                  $ref: '#/components/schemas/Ruleset'
        required: true
      responses:
        '204':
          description: No Content
          content: {}
        '400':
          $ref: '#/components/responses/BadRequestError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/DefaultError'
    delete:
      tags:
      - Card Rulesets (MDC)
      summary: Disable Ruleset
      description: Disable a Ruleset.
      operationId: disable-ruleset
      security:
        - jwt: []
      parameters:
      - name: rulesetId
        in: path
        description: The unique identifier of the Ruleset.
        required: true
        schema: {}
      responses:
        '204':
          description: No content
          content: {}
        '400':
          $ref: '#/components/responses/BadRequestError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/DefaultError'
  /v1/mdc/{cardId}/rulesets:
    get:
      tags:
      - Card Rulesets (MDC)
      operationId: get-ruleset-from-card
      summary: Retrieve Card Rulesets
      description: Get all rulesets assigned to a given card.
      security:
        - jwt: []
      parameters:
      - name: cardId
        in: path
        description: The unique identifier of the Card.
        required: true
        schema: {}
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    rulesetId:
                      type: string
                      format: uuid
                      example: "404b794e-6e19-495a-bd21-51d5adb82b94"
                    metadata:
                      type: object
        '400':
          $ref: '#/components/responses/BadRequestError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/DefaultError'
    post:
      tags:
      - Card Rulesets (MDC)
      summary: Assign Ruleset
      description: Assign rulesets to a given card.
      operationId: attach-ruleset-to-card
      security:
        - jwt: []
      parameters:
      - name: cardId
        in: path
        description: The unique identifier of the Card.
        required: true
        schema: {}
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/CardRulesets'
        required: true
      responses:
        '201':
          description: Created
          content: {}
        '400':
          $ref: '#/components/responses/BadRequestError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/DefaultError'
  /v1/mdc/{cardId}/ruleset/{rulesetId}/factsBalance:
    get:
      tags:
        - Card Rulesets (MDC)
      summary: Retrieve Ruleset virtual balance
      description: Retrieve a ruleset virtual balance.
      operationId: getFactsBalance
      security:
        - jwt: []
      parameters:
      - name: cardId
        in: path
        description: The unique identifier of the Card.
        required: true
        schema: {}
      - name: rulesetId
        in: path
        description: The unique identifier of the Ruleset.
        required: true
        schema: {}
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  facts:
                    type: object
                    properties:
                      month_total_amount:
                        type: object
                        properties:
                          definedValue:
                            type: integer
                            example: 50
                          consumedValue:
                            type: integer
                            example: 0
                          remainingValue:
                            type: integer
                            example: 50
                  error:
                    type: string
                    nullable: true
        '400':
          $ref: '#/components/responses/BadRequestError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/DefaultError'
  /v1/cardDigitalizations:
    get:
      tags:
        - Cards Digitalization
      summary: Search Card Digitalizations
      description: Search for card digitalizations.
      operationId: readcardDigitalizations
      parameters:
        - name: accessSignature
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
        - name: accessTag
          in: query
          description: |
            A unique identifier used to enforce [Idempotency](/guide/api-basics/idempotency.html). Max length: 250 characters.
          schema:
            type: string
        - name: accessUserId
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: integer
        - name: accessUserIp
          deprecated: true
          in: query
          description: |
            Legacy attribute, do not use.
          schema:
            type: string
        - name: filter
          in: query
          description: |
            Filterable fields are : - id - externalId - cardId - status -
            detailsFromGPS - createdDate - modifiedDate
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  cardDigitalizations:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        cardId:
                          type: string
                        externalId:
                          type: integer
                        status:
                          type: string
                          description: |
                            | Status | Description |
                            | ---- | ----------- |
                            | A | Active |
                            | U | Not tokenized |
                            | S | Suspended |
                            | D (or X) | Deactivated (Final status, cannot be changed)|
                        createdDate:
                          type: string
                        modifiedDate:
                          type: string
        '405':
          $ref: '#/components/responses/NotAllowedError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt: []
  /v1/cardDigitalizations/{id}:
    get:
      tags:
        - Cards Digitalization
      summary: Get Card Digitalization
      description: Retrieve a Card Digitalization based on its `id`.
      operationId: cardDigitalizationsId
      parameters:
        - name: id
          in: path
          description: Card digitalization internal id.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  cardDigitalizations:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        cardId:
                          type: integer
                        externalId:
                          type: integer
                        status:
                          type: string
                          description: |
                            | Status | Description |
                            | ---- | ----------- |
                            | A | Active |
                            | U | Not tokenized |
                            | S | Suspended |
                            | D (or X) | Deactivated (Final status, cannot be changed)|
                        createdDate:
                          type: string
                        modifiedDate:
                          type: string
        '405':
          $ref: '#/components/responses/NotAllowedError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt: []
    put:
      tags:
        - Cards Digitalization
      summary: Update Payment Token Status
      description: | 
        Update the status of a payment Token

        This endpoint requires per-operation [SCA](/guide/strong-customer-authentication/introduction.html).
      operationId: putcardDigitalizationsId
      parameters:
        - name: id
          in: path
          description: Card digitalization internal id.
          required: true
          schema:
            type: integer
            format: int64
        - name: status
          in: query
          description: |
            The new status for the payment Token. Possible values are :

            | Status | Description |
            | ---- | ----------- |
            | unsuspend | Unsuspend |
            | suspend | Suspend |
          required: true
          schema:
            type: string
        - name: reasonCode
          in: query
          description: |
            The reason code for the action. Possible values are:

            For a suspension:

            | Reason code | Description |
            | ---- | ----------- |
            | L | Cardholder confirmed token device lost |
            | S | Cardholder confirmed token device stolen |
            | T | Issuer or cardholder confirmed fraudulent token transactions |
            | Z | Other |

            For an unsuspension:

            | Reason code | Description |
            | ---- | ----------- |
            | F | Cardholder reported token device found or not stolen |
            | T | Issuer or cardholder confirmed no fraudulent token transactions |
            | Z | Other |
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  cardDigitalizations:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        cardId:
                          type: integer
                        status:
                          type: string
                          description: |
                            | Status | Description |
                            | ---- | ----------- |
                            | A | Active |
                            | U | Not tokenized |
                            | S | Suspended |
                            | D (or X) | Deactivated (Final status, cannot be changed)|
                        createdDate:
                          type: string
                        modifiedDate:
                          type: string
        '405':
          $ref: '#/components/responses/NotAllowedError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt: []
    delete:
      tags:
        - Cards Digitalization
      summary: Delete Payment Token
      description: Delete a payment Token
      operationId: deletecardDigitalizationsId
      parameters:
        - name: id
          in: path
          description: The unique identifier of the Card Digitalization (internal).
          required: true
          schema:
            type: integer
            format: int64
        - name: reasonCode
          in: query
          description: |
            The reason code for the action. Possible values are:

            | Reason code | Description |
            | ---- | ----------- |
            | L | Cardholder confirmed token device lost |
            | S | Cardholder confirmed token device stolen |
            | F | Issuer or cardholder confirmed fraudulent token transactions (Deprecated) |
            | T | Issuer or cardholder confirmed fraudulent token transactions |
            | C | Account closed |
            | Z | Other |
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  cardDigitalizations:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        cardId:
                          type: string
                        status:
                          type: string
                          description: |
                            | Status | Description |
                            | ---- | ----------- |
                            | A | Active |
                            | U | Not tokenized |
                            | S | Suspended |
                            | D (or X) | Deactivated (Final status, cannot be changed)|
                        createdDate:
                          type: string
                        modifiedDate:
                          type: string
        '405':
          $ref: '#/components/responses/NotAllowedError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt: []
  /core-connect/scheduledPayment:
    post:
      tags:
        - Scheduled Payments
      summary: Create Scheduled Payment
      description: | 
        Schedule a Payout or a Wallet-to-Wallet transfer for a future date.

        This endpoint requires per-operation [SCA](/guide/strong-customer-authentication/introduction.html).
      operationId: postScheduledPayment
      requestBody:
        content:
          application/json:
            schema:
              required:
                - walletId
                - beneficiaryType
                - beneficiary
                - amount
                - type
                - currency
              type: object
              properties:
                scheduledPaymentName:
                  type: string
                  description: The label describing the goal of the Scheduled Payment.
                walletId:
                  type: integer
                  description: The unique identifier of the Wallet to debit.
                beneficiaryType:
                  type: string
                  description: |
                    The type of beneficiary for the operation, which can be:
                    * `payout` – The Scheduled Payment targets an external account.
                    * `walletTransfer` – The Scheduled Payment targets another Wallet in your Treezor environment.
                  enum:
                    - payout
                    - walletTransfer
                beneficiary:
                  type: integer
                  description: |
                    The unique identifier of the beneficiary of the Scheduled Payment, which can be either `beneficiaryId` for Payouts or `beneficiaryWalletId` for Wallet-to-Wallet transfers.
                amount:
                  type: number
                  description: The amount of the Scheduled Payment.
                type:
                  type: string
                  description: | 
                    The type of Scheduled Payment, which can be: 
                    * `oneshot` – The payment will occur only once.
                    * `periodic` – The payment will occur periodically over a defined timeframe.
                  enum:
                    - oneshot
                    - periodic
                execAt:
                  type: string
                  description: |
                    The date on which the a `oneshot` Scheduled Payment is to be executed. This date must be set at least one day in the future. Format: YYYY-MM-DD.
                startAt:
                  type: string
                  description: |
                    The date from which a `periodic` Scheduled Payment execution starts. This date must be set at least one day in the future. Format: YYYY-MM-DD.
                endAt:
                  type: string
                  description: |
                    The date on which a `periodic` Scheduled Payment ends. This date must be set after the `startAt` date. Format: YYYY-MM-DD.
                period:
                  type: string
                  description: |
                    The frequency at which a `periodic` Scheduled Payment is to occur.
                  enum:
                    - weekly
                    - monthly
                    - quarterly
                    - bi-annual
                    - annual
                beneficiaryLabel:
                  type: string
                  description: The label that will be displayed for the Scheduled Payments, regardless of the type. Max. 140 characters.
                currency:
                  type: string
                  description: | 
                    The currency of the Scheduled Payments (ISO-4217). Can only be `EUR`.
                endToEndId:
                  type: string
                  description: The end-to-end identifier, for Payouts only.  Max. 24 characters.
      responses:
        '200':
          description: OK – Scheduled payment created
          content:
            application/json:
              schema:
                title: ScheduledPayment
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                    description: The unique identifier of the Scheduled Payment order.
                  status:
                    type: string
                    description: The status of the Scheduled Payment.
                    enum:
                      - VALIDATED
                      - CANCELED
                  scheduledPaymentName:
                    type: string
                    description: The label describing the goal of the Scheduled Payment.
                  walletId:
                    type: integer
                    description: The unique identifier of the Wallet to be debited.
                  beneficiaryType:
                    type: string
                    description: |
                      The type of beneficiary for the operation.
                    enum:
                      - payout
                      - walletTransfer
                  beneficiary:
                    type: integer
                    description: |
                      The unique identifier of the beneficiary of the Scheduled Payment, which can be either `beneficiaryId` for Payouts or `beneficiaryWalletId` for Wallet-to-Wallet transfers.
                  amount:
                    type: number
                    description: The amount of the Scheduled Payment.
                  type:
                    type: string
                    description: | 
                      The type of Scheduled Payment, which can be: 
                      * `oneshot` – The payment will occur only once.
                      * `periodic` – The payment will occur periodically over a defined timeframe.
                    enum:
                      - oneshot
                      - periodic
                  execAt:
                    type: string
                    format: Y-m-d
                    description: |
                      The date on which the a `oneshot` Scheduled Payment is to be executed. This date must be set at least one day in the future. Format: YYYY-MM-DD.
                  startAt:
                    type: string
                    format: Y-m-d
                    description: |
                      The date from which a `periodic` Scheduled Payment execution starts. This date must be set at least one day in the future. Format: YYYY-MM-DD.
                  endAt:
                    type: string
                    format: Y-m-d
                    description: |
                      The date on which a `periodic` Scheduled Payment ends. This date must be set after the `startAt` date. Format: YYYY-MM-DD.
                  creationDate:
                    type: string
                    description: The date and time at which the Scheduled Payment was created.
                  period:
                    type: string
                    description: |
                      The frequency at which a `periodic` Scheduled Payment is to occur.
                  beneficiaryLabel:
                    type: string
                    description: The label that will be displayed for the Scheduled Payments, regardless of the type. Max. 140 characters.
                  currency:
                    type: string
                    description: | 
                      The currency of the Scheduled Payments (ISO-4217). Can only be `EUR`.
                  userId:
                    type: string
                    description: The unique identifier of the User owning the Wallet to debit.
                  amr:
                    type: array
                    description: | 
                      The type of SCA for per-operation SCA (e.g., `CLOUD_PIN`, `HYBRID_PIN`, `DEVICE_BIOMETRIC`).
                    items: 
                      type: string
                  failedPayment:
                    type: array
                    items: 
                      type: object
                      properties:
                        date:
                          type: string
                        errorCode:
                          type: string
                        errorMessage:
                          type: string
                  endToEndId: 
                    type: string
                    description: |
                      The end-to-end identifier, for Payouts only.  Max. 24 characters. <br> Allowed characters: alphanumeric and `/` `-` `?` `:` `(` `)` `.` `,` `+` ` ` (space). <br> Musn't start nor end with `/`, and musn't contain `//`.
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt:
          - read_write
    get:
      tags:
        - Scheduled Payments
      summary: Get Scheduled Payment
      description: Retrieve Scheduled Payment orders based on the corresponding `userId` and/or `walletId`
      operationId: getScheduledPayment
      parameters:
        - name: userId
          in: query
          description: The unique identifier of the Wallet to be debited.
          schema:
            type: integer
        - name: walletId
          in: query
          description: The unique identifier of the User owning the Wallet to debit.
          schema:
            type: integer
        - name: cursor
          required: false
          in: query
          description: Pagination cursor, if you don't pass a cursor, result will start at the first page.
          schema:
            type: string
        - name: pageSize
          in: query
          description: Number of results per page.
          schema:
            type: number
      responses:
        '200':
          description: OK – Scheduled payment created
          content:
            application/json:
              schema:
                title: ScheduledPayment
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                    description: The unique identifier of the Scheduled Payment order.
                  status:
                    type: string
                    description: The status of the Scheduled Payment.
                    enum:
                      - VALIDATED
                      - CANCELED
                  scheduledPaymentName:
                    type: string
                    description: The label describing the goal of the Scheduled Payment.
                  walletId:
                    type: integer
                    description: The unique identifier of the Wallet to be debited.
                  beneficiaryType:
                    type: string
                    description: |
                      The type of beneficiary for the operation.
                    enum:
                      - payout
                      - walletTransfer
                  beneficiary:
                    type: integer
                    description: |
                      The unique identifier of the beneficiary of the Scheduled Payment, which can be either `beneficiaryId` for Payouts or `beneficiaryWalletId` for Wallet-to-Wallet transfers.
                  amount:
                    type: number
                    description: The amount of the Scheduled Payment.
                  type:
                    type: string
                    description: | 
                      The type of Scheduled Payment, which can be: 
                      * `oneshot` – The payment will occur only once.
                      * `periodic` – The payment will occur periodically over a defined timeframe.
                    enum:
                      - oneshot
                      - periodic
                  execAt:
                    type: string
                    format: Y-m-d
                    description: |
                      The date on which the a `oneshot` Scheduled Payment is to be executed. This date must be set at least one day in the future. Format: YYYY-MM-DD.
                  startAt:
                    type: string
                    format: Y-m-d
                    description: |
                      The date from which a `periodic` Scheduled Payment execution starts. This date must be set at least one day in the future. Format: YYYY-MM-DD.
                  endAt:
                    type: string
                    format: Y-m-d
                    description: |
                      The date on which a `periodic` Scheduled Payment ends. This date must be set after the `startAt` date. Format: YYYY-MM-DD.
                  creationDate:
                    type: string
                    description: The date and time at which the Scheduled Payment was created.
                  period:
                    type: string
                    description: |
                      The frequency at which a `periodic` Scheduled Payment is to occur.
                  beneficiaryLabel:
                    type: string
                    description: The label that will be displayed for the Scheduled Payments, regardless of the type. Max. 140 characters.
                  currency:
                    type: string
                    description: | 
                      The currency of the Scheduled Payments (ISO-4217). Can only be `EUR`.
                  userId:
                    type: string
                    description: The unique identifier of the User owning the Wallet to debit.
                  amr:
                    type: array
                    description: | 
                      The type of SCA for per-operation SCA (e.g., `CLOUD_PIN`, `HYBRID_PIN`, `DEVICE_BIOMETRIC`).
                    items: 
                      type: string
                  failedPayment:
                    type: array
                    items: 
                      type: object
                      properties:
                        date:
                          type: string
                        errorCode:
                          type: string
                        errorMessage:
                          type: string
                  endToEndId: 
                    type: string
                    description: |
                      The end-to-end identifier, for Payouts only.  Max. 24 characters. <br> Allowed characters: alphanumeric and `/` `-` `?` `:` `(` `)` `.` `,` `+` ` ` (space). <br> Musn't start nor end with `/`, and musn't contain `//`.
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt:
          - read_only
          - read_write
  /core-connect/scheduledPayment/{scheduledPaymentId}:
    delete:
      tags:
        - Scheduled Payments
      summary: Delete Scheduled Payment
      description: Cancel a Scheduled Payment order
      operationId: deleteScheduledPayment
      parameters:
        - name: scheduledPaymentId
          in: path
          description: The unique identifier of the Scheduled Payment order.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: ScheduledPayment
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                    description: The unique identifier of the Scheduled Payment order.
                  status:
                    type: string
                    description: The status of the Scheduled Payment.
                    example: CANCELED
                    enum:
                      - VALIDATED
                      - CANCELED
                  scheduledPaymentName:
                    type: string
                    description: The label describing the goal of the Scheduled Payment.
                  walletId:
                    type: integer
                    description: The unique identifier of the Wallet to be debited.
                  beneficiaryType:
                    type: string
                    description: |
                      The type of beneficiary for the operation.
                    enum:
                      - payout
                      - walletTransfer
                  beneficiary:
                    type: integer
                    description: |
                      The unique identifier of the beneficiary of the Scheduled Payment, which can be either `beneficiaryId` for Payouts or `beneficiaryWalletId` for Wallet-to-Wallet transfers.
                  amount:
                    type: number
                    description: The amount of the Scheduled Payment.
                  type:
                    type: string
                    description: | 
                      The type of Scheduled Payment, which can be: 
                      * `oneshot` – The payment will occur only once.
                      * `periodic` – The payment will occur periodically over a defined timeframe.
                    enum:
                      - oneshot
                      - periodic
                  execAt:
                    type: string
                    format: Y-m-d
                    description: |
                      The date on which the a `oneshot` Scheduled Payment is to be executed. This date must be set at least one day in the future. Format: YYYY-MM-DD.
                  startAt:
                    type: string
                    format: Y-m-d
                    description: |
                      The date from which a `periodic` Scheduled Payment execution starts. This date must be set at least one day in the future. Format: YYYY-MM-DD.
                  endAt:
                    type: string
                    format: Y-m-d
                    description: |
                      The date on which a `periodic` Scheduled Payment ends. This date must be set after the `startAt` date. Format: YYYY-MM-DD.
                  creationDate:
                    type: string
                    description: The date and time at which the Scheduled Payment was created.
                  period:
                    type: string
                    description: |
                      The frequency at which a `periodic` Scheduled Payment is to occur.
                  beneficiaryLabel:
                    type: string
                    description: The label that will be displayed for the Scheduled Payments, regardless of the type. Max. 140 characters.
                  currency:
                    type: string
                    description: | 
                      The currency of the Scheduled Payments (ISO-4217). Can only be `EUR`.
                  userId:
                    type: string
                    description: The unique identifier of the User owning the Wallet to debit.
                  amr:
                    type: array
                    description: | 
                      The type of SCA for per-operation SCA (e.g., `CLOUD_PIN`, `HYBRID_PIN`, `DEVICE_BIOMETRIC`).
                    items: 
                      type: string
                  failedPayment:
                    type: array
                    items: 
                      type: object
                      properties:
                        date:
                          type: string
                        errorCode:
                          type: string
                        errorMessage:
                          type: string
                  endToEndId: 
                    type: string
                    description: |
                      The end-to-end identifier, for Payouts only.  Max. 24 characters. <br> Allowed characters: alphanumeric and `/` `-` `?` `:` `(` `)` `.` `,` `+` ` ` (space). <br> Musn't start nor end with `/`, and musn't contain `//`.
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt:
          - read_write
  /core-connect/scheduledPayment/{scheduledPaymentId}/payments:
    get:
      tags:
        - Scheduled Payments
      summary: Get Scheduled Payment Operations
      description: Retrieve the list of executed payments for a given Scheduled Payment order
      operationId: getScheduledPaymentOperations
      parameters:
        - name: scheduledPaymentId
          in: path
          description: The unique identifier of the Scheduled Payment order.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  cursor:
                    type: object
                    properties:
                      current:
                        type: string
                      prev:
                        type: string
                      next:
                        type: string
                  payments:
                    type: array
                    items:
                      type: object
                      properties:
                        date:
                          type: string
                        amount:
                          type: number
                        currency: 
                          type: string
                        endToEndId:
                          type: string
                        label: 
                          type: string
                        status:
                          type: string
                        paymentId:
                          type: integer
                        errorCode: 
                          type: string
                        errorMessage:
                          type: string
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt:
          - read_only
          - read_write
  /v1/topups/cards/authorizations:
    post:
      summary: Create Authorization
      description: | 
        Create an authorization to make a card topup payin within 7 days. The card must be [tokenized](/guide/acquiring/card-tokenization.html) first.
      operationId: postAcqAuth
      tags:
        - Acquiring (Card Topups)
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorizationRequest'
      responses:
        '200':
          description: An authorization has been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Authorization'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt:
            - read_write
  /v1/topups/cards/authorizations/{authorizationUuid}:
    get:
      summary: Get Authorization
      description: Retrieve an authorization from the system.
      operationId: getAcqAuth
      tags:
        - Acquiring (Card Topups)
      parameters:
        - in: path
          name: authorizationUuid
          required: true
          description: Universally unique identifier (UUID) of the authorization
          schema:
            type: string
      responses:
        '200':
          description: Authorization returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Authorization'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt:
            - read_write
            - read_only
    delete:
      summary: Delete Authorization
      description: Delete an authorization from the system
      operationId: deleteAcqAuth
      tags:
        - Acquiring (Card Topups)
      parameters:
        - in: path
          name: authorizationUuid
          required: true
          description: Universally unique identifier (UUID) of the authorization
          schema:
            type: string
      responses:
        '200':
          description: Authorization returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationDeleteResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt:
            - read_write
  /v1/topups/cards/authorizations/{authorizationUuid}/payins:
    post:
      summary: Create Payin from Authorization
      description: Create a payin from an authorization. The amount must be ≤ to the authorization amount. [Learn more](/guide/acquiring/preauthorized.html#advanced-capture).
      operationId: postAcqAuthPayin
      tags:
        - Acquiring (Card Topups)
      parameters:
        - in: path
          name: authorizationUuid
          required: true
          description: Universally unique identifier (UUID) of the authorization
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                amount:
                  type: number
                  description: The amount of the payin. Must be ≤ to the authorization amount.
                currency: 
                  type: string
                  description: |
                    The currency of the operation. Format: ISO-4217.
      responses:
        '200':
          description: Payin returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CaptureResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt:
            - read_write
    get:
      summary: Get Authorization Payins
      description: List payins created from a given authorization.
      operationId: getAcqAuthPayins
      tags:
        - Acquiring (Card Topups)
      parameters:
        - in: path
          name: authorizationUuid
          required: true
          description: Universally unique identifier (UUID) of the authorization
          schema:
            type: string
        - schema:
            type: string
          in: query
          name: exclusiveStartKey
          required: false
          description: The exclusive start key returned by a previous call
      responses:
        '200':
          description: List of Payins is returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AcquiringPayin'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt:
            - read_write
            - read_only

  /topups/cards/simulation/notification/authorizations:
    post:
      summary: Simulate an HiPay authorization notification
      description: |
        Mocks an HiPay authorization notification provided the minimal set of
        parameters to generate a refund notification.
      operationId: acquiringv2-topup-cards-simulation-notification-autorization
      tags:
        - Acquiring (Simulation)
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationSimulationAuthorizations'
      responses:
        '200':
          description: Authorization notification successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationSimulationAuthorizationResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt:
            - admin
  /topups/cards/simulation/notification/payins:
    post:
      summary: Simulate an HiPay payin notification
      description: |
        Mocks an HiPay payin notification providing the minimal set of
        parameters to generate a payin notification.
      operationId: acquiringv2-topup-cards-simulation-notification-payins
      tags:
        - Acquiring (Simulation)
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NotificationSimulationPayins'
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationSimulationPayins'
      responses:
        '200':
          description: Payin notification successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationSimulationPayinResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt:
            - admin
  /topups/cards/simulation/notification/refunds:
    post:
      summary: Simulate an HiPay refund notification
      description: |
        Mocks an HiPay refund notification providing the minimal set of
        parameters to generate a refund notification.
      operationId: acquiringv2-topup-cards-simulation-notification-refunds
      tags:
        - Acquiring (Simulation)
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NotificationSimulationRefunds'
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationSimulationRefunds'
      responses:
        '200':
          description: Refund notification successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationSimulationRefundResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt:
            - admin
  /topups/cards/simulation/notification/chargebacks:
    post:
      summary: Simulate an HiPay chargeback notification
      description: |
        Mocks an HiPay chargeback notification providing the minimal set of
        parameters to generate a chargeback notification.
      operationId: acquiringv2-topup-cards-simulation-notification-chargebacks
      tags:
        - Acquiring (Simulation)
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NotificationSimulationChargebacks'
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationSimulationChargebacks'
      responses:
        '200':
          description: Chargeback notification successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationSimulationChargebackResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt:
            - admin
  /v1/topups/cards/refunds/{refundUuid}:
    get:
      summary: Get Refund
      description: Retrieve a card acquring refund from the system.
      operationId: acquiringv2-topup-cards-refunds-get
      tags:
        - Acquiring (Card Topups)
      parameters:
        - in: path
          name: refundUuid
          required: true
          description: Universally unique identifier (UUID) of the refund
          schema:
            type: string
      responses:
        '200':
          description: Refund returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefundsResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt:
            - read_write
            - read_only
  /v1/topups/cards/refunds:
    post:
      summary: Create Refund
      description: Create a new card topup refund.
      operationId: acquiringv2-topup-cards-refunds-post
      tags:
        - Acquiring (Card Topups)
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RefundRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/RefundRequest'
      responses:
        '200':
          description: Payin successfully refunded. A list of refunds is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefundsResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt:
            - read_write
  /v1/topups/cards/chargebacks/{chargebackUuid}:
    get:
      summary: Get Chargeback
      description: Retrieve a card acquiring a chargeback from the system.
      operationId: acquiringv2-topup-cards-chargebacks-get
      tags:
        - Acquiring (Card Topups)
      parameters:
        - in: path
          name: chargebackUuid
          required: true
          description: Universally unique identifier (UUID) of the chargeback
          schema:
            type: string
      responses:
        '200':
          description: Chargeback returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChargebacksResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt:
            - read_write
            - read_only
  /v1/topups/cards/users/{userId}/topupCards:
    post:
      summary: Create Topup Card
      description: |
        Create a new topup card. The card must have been previously tokenized.
      operationId: postTopupCard
      tags:
        - Acquiring (Card Topups)
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TopupCardRequest'
      parameters:
        - in: path
          name: userId
          required: true
          description: The owning user identifier
          schema:
            type: string
      responses:
        '200':
          description: Topup card was created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopupCards'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt:
            - read_write
    get:
      summary: Search Topup Cards
      description: Get topup cards.
      operationId: getTopupCards
      tags:
        - Acquiring (Card Topups)
      parameters:
        - in: path
          name: userId
          required: true
          description: The owning user identifier
          schema:
            type: string
      responses:
        '200':
          description: A topup cards details search response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopupCards'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt:
            - read_write
            - read_only
  /v1/topups/cards/users/{userId}/topupCards/{topupCardId}:
    get:
      summary: Get Topup Card
      description: Retrieve the details of a Topup Card.
      operationId: getTopupCard
      tags:
        - Acquiring (Card Topups)
      parameters:
        - in: path
          name: userId
          required: true
          description: The owning user identifier
          schema:
            type: string
        - in: path
          name: topupCardId
          required: true
          description: The identifier of the topup card to be retrieved
          schema:
            type: string
      responses:
        '200':
          description: A topup card details search response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopupCards'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt:
            - read_write
            - read_only
    delete:
      summary: Cancel Topup Card
      description: Change topup card status to CANCELED.
      operationId: deleteTopupCard
      tags:
        - Acquiring (Card Topups)
      parameters:
        - in: path
          name: userId
          required: true
          description: The owning user identifier
          schema:
            type: string
        - in: path
          name: topupCardId
          required: true
          description: The identifier of the topup card to be cancelled
          schema:
            type: string
      responses:
        '200':
          description: Topup card was cancelled
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopupCards'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/DefaultError'
      security:
        - jwt:
            - read_write
components:
  securitySchemes:
    jwt:
      type: oauth2
      description: 'This API is secured by a JWT provided by Treezor with OAuth2 client credentials flow.'
      flows:
        clientCredentials:
          tokenUrl: https://connect.sandbox.treezor.co/oauth/token
          refreshUrl: https://connect.sandbox.treezor.co/oauth/token
          scopes:
            read_only: Gives access to all endpoints (expect keys, legal, admin) in GET (End user oriented)
            read_write: Gives access to all endpoints (expect keys, legal, admin) in PUT|POST|DELETE (End user oriented)
            read_all: Gives access to all endpoints in GET (Use carefully)
            admin: Gives access to API configuration related endpoints
            legal: Gives access to KYC, users and users documents related endpoints
            keys: Gives access to encryption keys management related endpoints
            support_user_management: Gives access to support users related endpoints
        # password:
        #   tokenUrl: https://connect.sandbox.treezor.co/oauth/token
        #   refreshUrl: https://connect.sandbox.treezor.co/oauth/toke/
        #   scopes:
            # read_only: Gives access to all endpoints (expect keys, legal, admin) in GET (End user oriented)
            # read_write: Gives access to all endpoints (expect keys, legal, admin) in PUT|POST|DELETE (End user oriented)
            # read_all: Gives access to all endpoints in GET (Use carefully)
            # admin: Gives access to API configuration related endpoints
            # legal: Gives access to KYC, users and users documents related endpoints
            # keys: Gives access to encryption keys management related endpoints
            # support_user_management: Gives access to support users related endpoints
        # implicit:
        #   authorizationUrl: https://connect.sandbox.treezor.co/oauth/token
        #   refreshUrl: https://connect.sandbox.treezor.co/oauth/token
        #   scopes:
            # read_only: Gives access to all endpoints (expect keys, legal, admin) in GET (End user oriented)
            # read_write: Gives access to all endpoints (expect keys, legal, admin) in PUT|POST|DELETE (End user oriented)
            # read_all: Gives access to all endpoints in GET (Use carefully)
            # admin: Gives access to API configuration related endpoints
            # legal: Gives access to KYC, users and users documents related endpoints
            # keys: Gives access to encryption keys management related endpoints
            # support_user_management: Gives access to support users related endpoints
  responses:
    DefaultError:
      description: Unexpected error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DefaultError'
    BadRequestError:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DefaultError'
    NotAllowedError:
      description: Method Not Allowed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DefaultError'
    NotFoundError:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DefaultError'
    ForbiddenError:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DefaultError'
  schemas:
    DefaultError:
      type: object
      properties:
        errors:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
                example: invalid_request
              code:
                type: string
                example: resource_not_found_error
              message:
                type: string
                description: The resource was not found
              docUrl:
                type: string
                example: https://docs.treezor.com/example.html
    DigitalizedCardsCardID:
      type: string
      description: |
        CardID is the identifier of the real card.
    DigitalizedCardsDigitalizedCardID:
      type: string
      description: |
        DigitalizedCardID is the identifier of a digitalized card.
    DigitalizedCardsReasonCode:
      description: |
        The reason code for the action. Possible values are:

        | Reason code | Description |
        | ---- | ----------- |
        | L | Cardholder confirmed token device lost |
        | S | Cardholder confirmed token device stolen |
        | F | Cardholder reported token device found or not stolen |
        | T | Issuer or cardholder confirmed fraudulent token transactions |
        | C | Account closed |
        | D | Issuer consumer deleted |
        | Z | Other |
      type: string
      enum: [ L, S, F, T, C, D, Z ]
    DigitalizedCardsPutDigitalizedCardRequest:
      type: object
      description: |
        PutDigitalizedCardRequest defines the request content.
      properties:
        status:
          type: string
          description: |
            The new status for the payment Token.
          enum: [suspend, unsuspend]
        reasonCode:
          description: |
            The reason code for the action. Possible values are :
            - For a suspension:
            
            | Reason code | Description |
            | ---- | ----------- |
            | L | Cardholder confirmed token device lost |
            | S | Cardholder confirmed token device stolen |
            | T | Issuer or cardholder confirmed fraudulent token transactions |
            | Z | Other |
            
            - To release a suspension:
            
            | Reason code | Description |
            | ---- | ----------- |
            | F | Cardholder reported token device found or not stolen |
            | T | Issuer or cardholder confirmed no fraudulent token transactions |
            | Z | Other |
          type: string
          enum: [L, S, T, F, Z]
    DigitalizedCardsPutDigitalizedCardResponse:
      type: object
      description: |
        PutDigitalizedCardResponse is used to generate the successful JSON response.
      properties:
        id:
          type: string
        cardId:
          type: string
        status:
          type: string
        createdDate:
          type: string
        modifiedDate:
          type: string
    DigitalizedCardsDeactivateDigitalizedCardResponse:
      type: object
      description: |
        DeactivateDigitalizedCardResponse is used to generate the successful JSON response.
      properties:
        id:
          type: string
        cardId:
          type: string
        status:
          type: string
        createdDate:
          type: string
        modifiedDate:
          type: string
    DigitalizedCardsListDigitalizedCardResponse:
      type: array
      description: list of digitalized cards.
      items:
        $ref: '#/components/schemas/DigitalizedCardsGetDigitalizedCardResponse'
    DigitalizedCardsGetDigitalizedCardResponse:
      type: object
      description: |
        GetDigitalizedCardResponse is used to generate the successful JSON response.
      properties:
        id:
          type: string
        cardId:
          type: string
        status:
          type: string
        walletProvider:
          type: string
        tokenUniqueReference:
          type: string
        merchantName:
          type: string
        deviceType:
          type: string
        deviceId:
          type: string
        deviceName:
          type: string
        activationMethod:
          type: string
        tokenServiceProvider:
          type: string
        expirationDate:
          type: string
        createdDate:
          type: string
        modifiedDate:
          type: string

    DigitalizedCardsBadRequest:
      type: array
      description: |
        BadRequest error indicates that the server cannot understand or process the request due to a client side error.
      items:
        properties:
          type:
            type: string
            example: invalid_request
          code:
            type: string
            example: invalid_parameter_in_request
          message:
            type: string
            description: Error description for human use. Content subject to change without notice.
          docUrl:
            type: string
            example: https://www.treezor.com/api-documentation/#/cardDigitalizations/putcardDigitalizationsId_

    DigitalizedCardsUnauthorizedError:
      type: array
      description: |
        UnauthorizedError error indicates that authentication is required and has failed or has not yet been provided.
      items:
        properties:
          type:
            type: string
            example: invalid_client
          code:
            type: string
            example: authorization_error
          message:
            type: string
            description: Error description for human use. Content subject to change without notice.
          docUrl:
            type: string
            example: https://www.treezor.com/api-documentation/#/cardDigitalizations/putcardDigitalizationsId_

    DigitalizedCardsNotFound:
      type: array
      description: |
        NotFound error indicates that the browser was able to communicate with the given server, but the server could not find the ressource requested.
      items:
        properties:
          type:
            type: string
            example: not_found
          code:
            type: string
            example: resource_not_found_error
          message:
            type: string
            description: Error description for human use. Content subject to change without notice.
          docUrl:
            type: string
            example: https://www.treezor.com/api-documentation/#/cardDigitalizations/putcardDigitalizationsId_
    
    DigitalizedCardsInternalError:
      type: array
      description: |
        InternalError indicates cases in which the server is aware that it has encountered an error or is otherwise unable to complete the request.
      items:
        properties:
          type:
            type: string
            example: unexpected_internal_server_error
          code:
            type: string
            example: unexpected_error
          message:
            type: string
            description: Error description for human use. Content subject to change without notice.
          docUrl:
            type: string
            example: https://www.treezor.com/api-documentation/#/cardDigitalizations/putcardDigitalizationsId_
    FullRuleset:
      title: Ruleset
      required:
      - metadata
      - ruleset
      type: object
      properties:
        # id:
        #   type: string
        #   example: 200cf363-32cd-4edd-a9ff-bc4aee6ba070
        metadata:
          $ref: '#/components/schemas/RulesetMetadataWithIdAndStatus'
        ruleset:
          $ref: '#/components/schemas/Ruleset'
    RulesetMetadata:
      title: Ruleset metadata definition
      required:
      - name
      type: object
      properties:
        name:
          type: string
        description:
          type: string
    RulesetMetadataWithIdAndStatus:
      title: Ruleset metadata definition
      required:
      - name
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        status:
          type: string
          enum: [ "ENABLED", "DISABLED" ]
          example: ENABLED
        rulesetId:
          type: string
          format: uuid
          example: 200cf363-32cd-4edd-a9ff-bc4aee6ba070
    Ruleset:
      title: Ruleset definition
      required:
      - attributes
      - decisions
      type: object
      properties:
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/RulesetAttribute'
        decisions:
          type: array
          items:
            $ref: '#/components/schemas/RulesetDecision'
    RulesetAttribute:
      title: Ruleset attribute definition
      required:
      - name
      - type
      type: object
      properties:
        name:
          type: string
        type:
          type: string
    RulesetDecision:
      title: Ruleset decision definition
      required:
      - conditions
      - event
      type: object
      properties:
        conditions:
          $ref: '#/components/schemas/RulesetConditions'
        event:
          $ref: '#/components/schemas/RulesetEvent'
    RulesetConditions:
      title: Ruleset condition definition
      type: object
      properties:
        all:
          type: array
          items:
            type: object
        any:
          type: array
          items:
            type: object
    RulesetEvent:
      title: Ruleset event definition
      required:
      - params
      - type
      type: object
      properties:
        type:
          type: string
        params:
          type: object
          properties: {}
    CardRulesets:
      title: CardRuleset definition
      type: array
      items:
        $ref: '#/components/schemas/CardRuleset'
    CardRuleset:
      title: CardRuleset definition
      required:
      - metadata
      - rulesetId
      type: object
      properties:
        rulesetId:
          type: string
        metadata:
          type: object
          properties: {}
    AuthorizationDeleteResponse:
      properties:
        operation:
          type: string
          description: This value will always be 'cancel'.
        profile:
          type: string
          description: HiPay merchant identifier (mid)
        authorizationCode:
          type: string
          description: HiPay authorization code linked to the authorization
        transactionReference:
          type: string
          description: The reference of the transaction
        dateCreated:
          type: string
          description: The creation date of the authorization
        dateUpdated:
          type: string
          description: The last update date of the authorization
        dateAuthorized:
          type: string
          description: The authorized date of the authorization
        status:
          type: string
          description: Transaction status returned by HiPay
        message:
          type: string
          description: Message returned by HiPay
        authorizedAmount:
          type: string
          description: Authorized amount
        capturedAmount:
          type: string
          description: Captured amount
        refundedAmount:
          type: string
          description: Refunded amount
        decimals:
          type: string
          description: |
            The number of digits after the decimal point of the transaction
            amount
        currency:
          type: string
          description: |-
            Base currency for this authorization

            This three-character currency code must comply with ISO-4217
    AcquiringPayin:
      properties:
        payinId:
          type: string
          description: The universally unique identifier (UUID) of the payin
        userId:
          type: string
          description: The unique identifier of the User requesting the payin
        walletId:
          type: string
          description: The unique identifier of the wallet to be credited
        userFirstName:
          type: string
          description: The firstname of the user
        walletEventName:
          type: string
          description: The name of the wallet
        walletAlias:
          type: string
          description: Short URL wallet name
        userLastName:
          type: string
          description: The lastname of the user
        messageToUser:
          type: string
          description: Message to send to user owning the wallet
        payinStatus:
          type: string
          description: |-
            Status of the payin. 

            Possible values: 
             - *PENDING* 
             - *CANCELED* 
             - *VALIDATED*
          enum:
            - PENDING
            - CANCELED
            - VALIDATED
        paymentMethodId:
          type: string
          description: Treezor internal payment method identifier
        amount:
          type: number
          description: The amount of the payin.
        currency:
          type: string
          description: |-
            Base currency for thisthe payin.

            This three-character currency code must comply with ISO-4217
        createdDate:
          type: string
          description: The ceation date of the payin
        codeStatus:
          type: string
          description: |
            Treezor status code mixed with HiPay notification status code: 150000 + (status code). 
            
            Example: For a successful payin, the HiPay notification status code will be 118. The codeStatus will be 150118
        informationStatus:
          type: string
          description: |
            Informational message related to the HiPay status code. This message is destined to the user
        refundAmount:
          type: number
          description: Refunded amount
        createdIp:
          type: string
          description: The IP address of the end user making a top-up
        profile:
          type: string
          description: Your HiPay Merchant ID. 
        payinTag:
          nullable: true
          type: string
          default: 'null'
          description: This field is not used, always empty
        payinDate:
          nullable: true
          type: string
          default: 'null'
          description: This field is not used, always 0000-00-00
        cartId:
          type: number
          description: This field is not used, always 0
        subtotalItems:
          nullable: true
          type: string
          default: 'null'
          description: This field is not used, always 0.00
        subtotalServices:
          nullable: true
          type: string
          default: 'null'
          description: This field is not used always 0.00
        subtotalTax:
          nullable: true
          type: string
          default: 'null'
          description: This field is not used always 0.00
        distributorFee:
          nullable: true
          type: string
          default: 'null'
          description: This field is not used, always null
        paymentHtml:
          nullable: true
          type: string
          default: 'null'
          description: This field is not used, always null
        paymentLanguage:
          nullable: true
          type: string
          default: 'null'
          description: This field is not used, always null
        paymentPostUrl:
          nullable: true
          type: string
          default: 'null'
          description: This field is not used, always null
        paymentPostDataUrl:
          nullable: true
          type: string
          default: 'null'
          description: This field is not used, always null
        paymentAcceptedUrl:
          nullable: true
          type: string
          default: 'null'
          description: This field is not used, always null
        paymentWaitingUrl:
          nullable: true
          type: string
          default: 'null'
          description: This field is not used, always null
        paymentCanceledUrl:
          nullable: true
          type: string
          default: 'null'
          description: This field is not used, always null
        paymentRefusedUrl:
          nullable: true
          type: string
          default: 'null'
          description: This field is not used, always null
        paymentExceptionUrl:
          nullable: true
          type: string
          default: 'null'
          description: This field is not used, always null
        ibanFullname:
          nullable: true
          type: string
          default: 'null'
          description: This field is not used, always null
        ibanId:
          nullable: true
          type: string
          default: 'null'
          description: This field is not used, always null
        ibanBic:
          nullable: true
          type: string
          default: 'null'
          description: This field is not used, always null
        ibanTxEndToEndId:
          nullable: true
          type: string
          default: 'null'
          description: This field is not used, always null
        ibanTxId:
          nullable: true
          type: string
          default: 'null'
          description: This field is not used, always null
        forwardUrl:
          nullable: true
          type: string
          default: 'null'
          description: |
            For some payment methods, the end-user must be redirected to this URL in order for him to enter additional payment information.
        mandateId:
          nullable: true
          type: number
          default: 0
          description: This field is not used, always 0
        creditorName:
          nullable: true
          type: string
          default: 'null'
          description: This field is not used, always null
        creditorAddressLine:
          nullable: true
          type: string
          default: 'null'
          description: This field is not used, always null
        creditorCountry:
          nullable: true
          type: string
          default: 'null'
          description: This field is not used, always null
        creditorIban:
          nullable: true
          type: string
          default: 'null'
          description: This field is not used, always null
        creditorBIC:
          nullable: true
          type: string
          default: 'null'
          description: This field is not used, always null
        virtualIbanId:
          nullable: true
          type: number
          default: null
          description: This field is not used, always null
        virtualIbanReference:
          nullable: true
          type: string
          default: 'null'
          description: This field is not used, always null
        additionalData:
          nullable: true
          type: string
          default: 'null'
          description: This field is not used, always empty
    RefundResponse:
      properties:
        payinrefundId:
          type: string
          description: The universally unique identifier (UUID) of the refund
        payinrefundTag:
          type: string
          nullable: true
          default: 'null'
        payinrefundStatus:
          type: string
          description: |-
            Status of the refund.

             Possible values: 
             - *PENDING* 
             - *VALIDATED* 
             - *CANCELED*
          enum: 
            - PENDING
            - VALIDATED
            - CANCELED
        walletId:
          type: string
          description: Identifier of the wallet to be debited
        payinId:
          type: string
          description: The universally unique identifier (UUID) of the payin
        amount:
          type: number
          description: The amount to be refunded
        currency:
          type: string
          description: |-
            Base currency for the refund.

            This three-character currency code must comply with ISO-4217
        createdDate:
          type: string
          description: The creation date of the refund
        modifiedDate:
          type: string
          description: The last updated date of the refund
        payinrefundDate:
          type: string
          description: The date of the refund
        profile:
          type: string
          description: Your HiPay Merchant ID. 
    RefundsResponse:
      properties:
        payinRefunds:
          type: array
          items:
            $ref: '#/components/schemas/RefundResponse'
    ChargebackResponse:
      properties:
        chargebackId:
          type: string
          description: The universally unique identifier (UUID) of the chargeback
        chargebackTag:
          type: string
          nullable: true
          default: 'null'
        chargebackStatus:
          type: string
          description: The status of the chargeback.
        chargebackDate:
          type: string
          description: The date of the chargeback
        walletId:
          type: string
          description: The identifier of the wallet to be debited
        amount:
          type: number
          description: The amount to be chargebacked
        currency:
          type: string
          description: |-
            Base currency for the chargeback.

            This three-character currency code must comply with ISO-4217
        createdDate:
          type: string
          description: Creation date of the chargeback
        modifiedDate:
          type: string
          description: Last updated date of the chargeback
        profile:
          type: string
          description: HiPay merchant identifier (mid)
    ChargebacksResponse:
      properties:
        chargebacks:
          type: array
          items:
            $ref: '#/components/schemas/ChargebackResponse'
    NotificationSimulationPayins:
      type: object
      properties:
        userId:
          type: string
          description: |
            Identifier of the user on behalf of which the simulated payin should be executed
        walletId:
          type: string
          description: Identifier of the wallet to be credited
        amount:
          type: number
          description: Payin amount
        currency:
          type: string
          description: |-
            Base currency for this payin

            This three-character currency code must comply with ISO-4217
        status:
          type: integer
          description: The status code of the simulated notification
        transactionReference:
          type: string
          description: The reference of the transaction
        cardPaymentMethod:
          type: object
          description: Payment card used during payin
          properties:
            brand:
              type: string
            cardExpiryMonth:
              type: string
            cardExpiryYear:
              type: string
            cardHolder:
              type: string
            country:
              type: string
            issuer:
              type: string
            maskedPan:
              type: string
            token:
              type: string
        profile:
          type: string
          description: |
            HiPay merchant identifier (mid) to be used for the operation.
            Required if the client has multiple merchant identifiers associated.
            If only one mid is associated, then that one is used for the
            operation.
      required:
        - walletId
        - amount
        - currency
    NotificationSimulationRefunds:
      type: object
      properties:
        userId:
          type: string
          description: |
            Identifier of the user on behalf of which the simulated refund
            should be executed
        walletId:
          type: string
          description: Identifier of the wallet to be credited
        amount:
          type: number
          description: Refund amount
        currency:
          type: string
          description: |-
            Base currency for this refund

            This three-character currency code must comply with ISO-4217
        status:
          type: integer
          description: The status code of the simulated notification
        transactionReference:
          type: string
          description: The reference of the transaction
        payinId:
          type: string
          description: The universally unique identifier (UUID) of the payin
      required:
        - payinId
    NotificationSimulationChargebacks:
      type: object
      properties:
        transactionReference:
          type: string
          description: The reference of the transaction
      required:
        - transactionReference
    NotificationSimulationAuthorizations:
      type: object
      properties:
        amount:
          type: number
          description: Authorization amount
        cardPaymentMethod:
          type: object
          description: Payment card used during authorization
          properties:
            brand:
              type: string
            cardExpiryMonth:
              type: string
            cardExpiryYear:
              type: string
            cardHolder:
              type: string
            country:
              type: string
            issuer:
              type: string
            maskedPan:
              type: string
            token:
              type: string
        currency:
          type: string
          description: |-
            Base currency for this authorization

            This three-character currency code must comply with ISO-4217
        status:
          type: integer
          description: The status code of the simulated notification
        transactionReference:
          type: string
          description: The reference of the transaction
        userId:
          type: string
          description: |
            Identifier of the user on behalf of which the simulated
            authorization should be executed
        walletId:
          type: string
          description: Identifier of the wallet to be credited
        profile:
          type: string
          description: |
            HiPay merchant identifier (mid) to be used for the operation.
            Required if the client has multiple merchant identifiers associated.
            If only one mid is associated, then that one is used for the
            operation.
      required:
        - amount
        - currency
        - walletId
    RefundRequest:
      type: object
      properties:
        payinId:
          type: string
          description: The payin universally unique identifier (UUID)
        amount:
          type: number
          description: Refund amount
        currency:
          type: string
          description: |-
            Base currency for this refund

            This three-character currency code must comply with ISO-4217
        profile:
          type: string
          description: |
            HiPay merchant identifier (mid) to be used for the operation.
            Required if the client has multiple merchant identifiers associated.
            If only one mid is associated, then that one is used for the
            operation. Mandatory for legacy payins refunds
      required:
        - payinUid
    TopupCardRequest:
      type: object
      properties:
        token:
          type: string
          description: |
            The Card token generated by HiPay. Learn more in the [Tokenization](/guide/acquiring/card-tokenization.html) article.
        profile:
          type: string
          description: Your HiPay Merchant ID. Required if you have multiple MIDs, otherwise empty.
      required:
        - token
    CaptureResponse:
      type: object
      properties:
        operation:
          type: string
          description: This value will always be 'capture'.
        profile:
          type: string
          description: HiPay merchant identifier (mid), also known as profile
        authorizationCode:
          type: string
          description: HiPay authorization code linked to the payin
        transactionReference:
          type: string
          description: The reference of the transaction
        dateCreated:
          type: string
          description: The creation date of the payin
        dateUpdated:
          type: string
          description: The last update date of the payin
        dateAuthorized:
          type: string
          description: The authorized date of the payin
        status:
          type: string
          description: Transaction status returned by HiPay
        message:
          type: string
          description: Message returned by HiPay
        authorizedAmount:
          type: string
          description: Authorized amount
        capturedAmount:
          type: string
          description: Captured amount
        refundedAmount:
          type: string
          description: Refunded amount
        decimals:
          type: string
          description: |
            The number of digits after the decimal point of the transaction
            amount
        currency:
          type: string
          description: |-
            Base currency for this payin

            This three-character currency code must comply with ISO-4217
    AuthorizationRequest:
      type: object
      properties:
        amount:
          type: number
          description: The amount of the operation.
        currency:
          type: string
          description: |
            The currency of the operation. Format: ISO-4217.
        walletId:
          type: string
          description: The unique identifier of the wallet to be credited.
        userId:
          type: string
          description: The unique identifier of the user requesting the operation.
        topupCardId:
          type: string
          description: The unique identifier for the user's Topup Card.
        acceptUrl:
          type: string
          description: |
            The URL to return the end user to once the payment process is completed successfully.
        declineUrl:
          type: string
          description: |
            The URL to return the end user to after the acquirer declines the payment.
        pendingUrl:
          type: string
          description: |
            The URL to return your end-user to when the payment request was
            submitted to the acquirer but response is not yet available.
        exceptionUrl:
          type: string
          description: The URL to return your end-user to after a system failure
        cancelUrl:
          type: string
          description: The URL to return your end-user to after a system failure
        eci:
          type: string
          description: |
            The ECI indicates the security level at which the payment
            information is processed between the cardholder and Treezor customer
        authenticationIndicator:
          type: string
          description: |
            If the payment product is a credit or debit card, this parameter
            indicates if the 3-D Secure authentication should be performed for
            this transaction
        orderId:
          type: string
          description: |
            The unique identifier of the order, guaranteeing the uniqueness of the transaction. 
            
            Must be unique and abide by the following rules:
            * Length: min. 32 characters
            * Structure: `<yourCompanyName>_order_<uniqueIdentifier>`
        description:
          type: string
          description: The order short description.
        paymentProduct:
          type: string
          description: |
            The payment method used for the top-up.

            Depending on the payment product, parameters specific to the payment method are required.
        issuerBankId:
          type: string
          description: |
            This parameter is specific to the iDEAL payment product.

            This is the Business Identifier Code (BIC) of the end user issuer bank
        ipaddr:
          type: string
          description: The IP address of the end user making a top-up
        deviceChannel:
          type: integer
          description: |-
            This parameter is specific to the PSD2

            Channel through which the transaction is being processed
        browserInfo:
          type: object
          properties:
            javaEnabled:
              type: boolean
              description: |
                Represents the ability of the device's browser to run Java, when applicable
            javascriptEnabled:
              type: boolean
              description: |
                Represents the ability for the client's browser to run JavaScript
            ipaddr:
              type: string
              description: The IP address of the end-user making a top-up
            httpAccept:
              type: string
              description: |
                This element must include the exact content of the HTTP Accept header, as sent to the Treezor customer from the end-user
            httpUserAgent:
              type: string
              description: |
                This element must include the exact content of the User_Agent HTTP header, as sent to the Treezor customer from the end-user
            language:
              type: string
              description: |
                Value representing the client's browser language as defined in IETF-BCP47
            colorDepth:
              type: string
              description: |
                Value representing the depth of the color palette to display an image, in bits/pixel
            screenHeight:
              type: integer
              description: Total height of the device screen (in pixels), when applicable
            screenWidth:
              type: integer
              description: Total width of the end-user screen (in pixels)
            timezone:
              type: string
              description: |
                Time difference in minutes between UTC and cardholder's browser local time
            deviceFingerprint:
              type: string
        profile:
          type: string
          description: |
            Your HiPay Merchant ID. Required if you have multiple MIDs, otherwise empty.
        firstname:
          type: string
          description: The first name of the user.
        lastname:
          type: string
          description: The last name of the user.
        email:
          type: string
          description: The email of the user.
        phone:
          type: string
          description: The phone number of the user.
        streetAddress:
          type: string
          description: The residence street name and number of the user.
        city:
          type: string
          description: The residence city of the user.
        zipCode:
          type: string
          description: The residence city zipcode of the user.
        country: 
          type: string
          description: |
            The residence country of the user. Format: ISO 3166 alpha-2
        cardHolder:
          type: string
          description: The name associated to the card.
      required:
        - orderId
        - description
        - paymentProduct
        - userId
        - walletId
        - amount
        - currency
        - acceptUrl
        - declineUrl
        - pendingUrl
        - exceptionUrl
        - cancelUrl
        - eci
        - authenticationIndicator
        - firstname
        - lastname
        - email
        - phone
        - streetAddress
        - city
        - zipCode
        - country
        - cardHolder
        - browserInfo
        - deviceChannel
    TopupCards:
      type: object
      properties:
        topupCards:
          type: array
          items:
            type: object
            properties:
              topupCardId:
                type: string
                description: The tokenized card universally unique identifier (UUID)
              token:
                type: string
                description: HiPay token of the card
              userId:
                type: string
                description: Treezor user unique identifier
              brand:
                type: string
                description: Brand of the payment method
              maskedPan:
                type: string
                description: Masked card number
              cardHolder:
                type: string
                description: Cardholder name
              cardExpiryMonth:
                type: string
                description: Expiry month of the card
              cardExpiryYear:
                type: string
                description: Expiry year of the card
              issuer:
                type: string
                description: Issuer bank name
              country:
                type: string
                description: |
                  Country code of the bank where the card was issued. This two-letter
                  country code complies with ISO 3166-1 (alpha 2).
              domesticNetwork:
                type: string
                description: Card domestic network
              cardType:
                type: string
                description: |-
                  Type of the card.

                  Possible values: 
                  - *DEBIT* 
                  - *CREDIT* 
              createdDate:
                type: string
                description: Creation date of the TopupCard
              updatedDate:
                type: string
                description: Updated date of the TopupCard
              status:
                type: string
                description: |
                  Status of the TopupCard.
                enum:
                  - VALIDATED
                  - CANCELED
              providerName:
                type: string
                description: Token provider name (eg HiPay)
              profile:
                type: string
                description: Acquisition profile used for operations on this card
    Authorization:
      properties:
        authorizationId:
          type: string
          description: The universally unique identifier (UUID) of the authorization.
        userId:
          type: string
          description: The unique identifier of the User requesting the authorization.
        walletId:
          type: string
          description: IThe unique identifier of the wallet to be credited
        userFirstname:
          type: string
          description: The firstname of the user
        userLastname:
          type: string
          description: The lastname of the user
        walletEventName:
          type: string
          description: The name of the Wallet
        walletAlias:
          type: string
        messageToUser:
          type: string
          description: Message to send to wallet user
        authorizationStatus:
          type: string
          description: |-
            Status of the authorization.

             Possible values: 
             - *CANCELED* 
             - *EXPIRED*
          enum:
            - CANCELED
            - EXPIRED
        paymentMethodId:
          type: string
          description: Treezor internal payment method identifier
        amount:
          type: number
          description: Authorization amount
        currency:
          type: string
          description: |-
            Base currency for this authorization

            This three-character currency code must comply with ISO-4217
        createdDate:
          type: string
          description: Creation date of the authorization
        codeStatus:
          type: string
          description: |
            Treezor status code mixed with HiPay notification status code: 150000 + (status code). 
            
            Example: For a successful payin, the Hipay notification status code will be 118. The codeStatus will be 150118
        informationStatus:
          type: string
          description: Informational message towards the user related to the Hipay status code.
        refundAmount:
          type: number
          description: Refunded amount
        profile:
          type: string
          description: Your HiPay Merchant ID. Required if you have multiple MIDs, otherwise empty.
        DbtrIBAN:
          nullable: true
          type: string
          default: 'null'
          description: This field is not used, always null
        createdIp:
          type: string
          description: IP address of the customer making the top-up
        authorizationTag:
          nullable: true
          type: string
          default: 'null'
          description: This field is not used, always empty
        authorizationDate:
          nullable: true
          type: string
          default: 'null'
          description: This field is not used, always 0000-00-00
        cartId:
          type: number
          description: This field is not used, always 0
        subtotalItems:
          nullable: true
          type: string
          default: 'null'
          description: This field is not used, always 0.00
        subtotalServices:
          nullable: true
          type: string
          default: 'null'
          description: This field is not used always 0.00
        subtotalTax:
          nullable: true
          type: string
          default: 'null'
          description: This field is not used always 0.00
        distributorFee:
          nullable: true
          type: string
          default: 'null'
          description: This field is not used, always null
        paymentHtml:
          nullable: true
          type: string
          default: 'null'
          description: This field is not used, always null
        paymentLanguage:
          nullable: true
          type: string
          default: 'null'
          description: This field is not used, always null
        paymentPostUrl:
          nullable: true
          type: string
          default: 'null'
          description: This field is not used, always null
        paymentPostDataUrl:
          nullable: true
          type: string
          default: 'null'
          description: This field is not used, always null
        paymentAcceptedUrl:
          nullable: true
          type: string
          default: 'null'
          description: This field is not used, always null
        paymentWaitingUrl:
          nullable: true
          type: string
          default: 'null'
          description: This field is not used, always null
        paymentCanceledUrl:
          nullable: true
          type: string
          default: 'null'
          description: This field is not used, always null
        paymentRefusedUrl:
          nullable: true
          type: string
          default: 'null'
          description: This field is not used, always null
        paymentExceptionUrl:
          nullable: true
          type: string
          default: 'null'
          description: This field is not used, always null
        ibanFullname:
          nullable: true
          type: string
          default: 'null'
          description: This field is not used, always null
        ibanId:
          nullable: true
          type: string
          default: 'null'
          description: This field is not used, always null
        ibanBic:
          nullable: true
          type: string
          default: 'null'
          description: This field is not used, always null
        ibanTxEndToEndId:
          nullable: true
          type: string
          default: 'null'
          description: This field is not used, always null
        ibanTxId:
          nullable: true
          type: string
          default: 'null'
          description: This field is not used, always null
        forwardUrl:
          nullable: true
          type: string
          default: 'null'
          description: For some payment methods, the end user must be redirected to this URL in order for him to enter additional payment information.
        mandateId:
          nullable: true
          type: number
          default: 0
          description: This field is not used, always 0
        creditorName:
          nullable: true
          type: string
          default: 'null'
          description: This field is not used, always null
        creditorAddressLine:
          nullable: true
          type: string
          default: 'null'
          description: This field is not used, always null
        creditorCountry:
          nullable: true
          type: string
          default: 'null'
          description: This field is not used, always null
        creditorIban:
          nullable: true
          type: string
          default: 'null'
          description: This field is not used, always null
        creditorBIC:
          nullable: true
          type: string
          default: 'null'
          description: This field is not used, always null
        virtualIbanId:
          nullable: true
          type: number
          default: null
          description: This field is not used, always null
        virtualIbanReference:
          nullable: true
          type: string
          default: 'null'
          description: This field is not used, always null
        additionalData:
          nullable: true
          type: string
          default: 'null'
          description: |
            This field can be empty or contain information about an external provider. 
    NotificationSimulationAuthorizationResponse:
      type: object
      properties:
        transactionReference:
          type: string
          description: The reference of the transaction
        authorizationId:
          type: string
          description: The universally unique identifier (UUID) of the authorization
    NotificationSimulationPayinResponse:
      type: object
      properties:
        transactionReference:
          type: string
          description: The reference of the transaction
        payinId:
          type: string
          description: The universally unique identifier (UUID) of the payin
    NotificationSimulationRefundResponse:
      type: object
      properties:
        transactionReference:
          type: string
          description: The reference of the transaction
        refundId:
          type: string
          description: The universally unique identifier (UUID) of the refund
    NotificationSimulationChargebackResponse:
      type: object
      properties:
        transactionReference:
          type: string
          description: The reference of the transaction being chargebacked
        chargebackId:
          type: string
          description: The universally unique identifier (UUID) of the chargeback
    BeneficiaryObject:
      type: object
      properties:
        beneficiaries:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                description: |
                  The unique identifier of the Beneficiary.
              tag:
                type: string
                description: |
                  Custom data that could be used by caller to search
                  the instance.
              userId:
                type: integer
                description: The unique identifier of the User to which the Beneficiary is attached.
              nickName:
                type: string
                description: |
                  Name choosen by end user to easily recognize the
                  beneficiary.
              name:
                type: string
                description: Beneficiary name, linked to bank account.
              address:
                type: string
                description: Beneficiary address, linked to bank account.
              iban:
                type: string
                description: Beneficiary International Bank Account Number.
              bic:
                type: string
                description: Beneficiary Bank Identifier Code.
              sepaCreditorIdentifier:
                type: string
                description: |
                  Beneficiary SEPA Creditor Identifier. Mandatory to
                  validate B2B incoming direct debit, useless otherwise. Between 8 and 35 h.
              sddB2bWhitelist:
                type: array
                description: |
                  Each unique mandate reference, with its frequency
                  type, must be explicitely allowed when doing B2B
                  Direct Debit. Furthermore, a mandate not used during
                  more than 36 months will be automatically rejected
                  even if in the white list.
                items:
                  required:
                    - isRecurrent
                    - uniqueMandateReference
                  type: object
                  properties:
                    uniqueMandateReference:
                      type: string
                      description: |
                        Unique Mandate Reference that unambiguiously
                        identify a mandate signed between the user and
                        the beneficiary
                    isRecurrent:
                      type: boolean
                      description: |
                        If mandate is a recuring payment, this field
                        must be true.
                    walletId:
                      type: number
                      description: |
                        If present, the Direct Debit will be accepted
                        only if the targeted wallet is the wallet with
                        the given walletId. Without this value, the
                        SDD can target any wallets of the user. With
                        the value specified, only the explicitely
                        authorized wallet can be targeted by SDD.
              sddCoreBlacklist:
                type: array
                description: |
                  Core Direct Debit are accepted by default. If a Core
                  mandate is to be refused on reception, it has to be
                  added to this list. If wild char * (star) is used
                  instead of a UMR, all Direct Debit from this
                  beneficiary will be refused. Note that the mandate
                  ref entered is case sensitive.
                items:
                  type: string
                  description: |
                    Unique Mandate Reference that unambiguiously
                    identify a mandate signed between the user and the
                    beneficiary. Star character can also be used to
                    reject all Direct debit from the beneficiary.
              usableForSct:
                type: boolean
                description: |
                  Indicated if the beneficiary can be used for SEPA
                  Credit Transfer. This field is a conveniant way to
                  filter all beneficiaries for a user that would like
                  to do a Credit Transfer. Indeed, beneficaries are
                  created automatically when receiving a Core Direct
                  Debit and therefor by looking at the list you won't
                  be able to idnetify which beneficary to use on SCT.
                default: false
              sddCoreKnownUniqueMandateReference:
                type: array
                items:
                  type: string
                  description: |
                    List of all the unique mandate references received
                    from the beneficiary of Core Direct Debits for
                    given user
              isActive:
                type: boolean
                description: Indicates whether or not the Beneficiary is active. This value is set to `true` by default.
              createdDate:
                type: string
                description: Creation date.
              modifiedDate:
                type: string
                description: Update date.
    DocumentObject:
      type: object
      properties:
        documents:
          type: array
          items:
            type: object
            properties:
              documentId:
                type: integer
              documentTag:
                type: string
              userId: 
                type: integer
              userFirstname:
                type: string
              userLastname:
                type: string
              name: 
                type: string
              documentStatus:
                type: string
                enum:
                  - PENDING
                  - CANCELED
                  - VALIDATED
              documentTypeId:
                type: integer
              documentType:
                type: string
              fileName:
                type: string
              thumbfileName:
                type: string
              createdDate:
                type: string
                description: YYYY-MM-DD HH:MM:SS
              modifiedDate: 
                type: string
                description: YYYY-MM-DD HH:MM:SS
              codeStatus:
                type: string
              informationStatus:
                type: string
              residenceId:
                type: integer
              temporaryUrl: 
                type: string
              temporaryUrlThumb:
                type: string
    MandateObject:
      type: object
      properties:
        mandates:
          type: array
          items:
            type: object
            properties:
              mandateId:
                type: integer
                description: The unique identifier of the Mandate.
              title:
                type: string
              legalInformations:
                type: string
              uniqueMandateReference:
                type: string
              mandateStatus:
                type: string
                enum:
                  - PENDING
                  - CANCELED
                  - VALIDATED
              userId:
                type: integer
                description: The unique identifier of the User.
              debtorName:
                type: string
              debtorAddress:
                type: string
              debtorCity:
                type: string
              debtorZipCode:
                type: string
              debtorCountry:
                type: string
                format: ISO 3166-1 alpha-2
                example: FR
              debtorIban:
                type: string
              debtorBic:
                type: string
              sequenceType:
                type: string
                description: |
                    Defines whether or not the debtor will be debited multiple times. Can be one of the following:
                    * `one-off` – For a one-time payment.
                    * `recurrent` – For recurring payments.
                enum:
                  - one-off
                  - recurrent
              creditorName:
                type: string
              sepaCreditorIdentifier:
                type: string
              creditorAddress:
                type: string
              creditorCity:
                type: string
              creditorZipCode:
                type: string
              creditorCountry:
                type: string
              signatureDate:
                type: string
                format: date
                description: The date on which the Mandate was signed.
              debtorSignatureIp:
                type: string
              signed:
                type: integer
              debtorIdentificationCode:
                type: string
              debtorReferencePartyName:
                type: string
              debtorReferenceIdentificationCode:
                type: string
              creditorReferencePartyName:
                type: string
              creditorReferenceIdentificationCode:
                type: string
              contractIdentificationNumber:
                type: string
              contractDescription:
                type: string
              isPaper:
                type: boolean
              sddType:
                type: string
                enum:
                  - core
                  - b2b
              revocationSignatureDate:
                type: string
                format: date-time
                description: Date YYYY-MM-DD HH:MM:SS
              createdIp:
                type: string
              createdDate:
                type: string
                format: date-time
                description: Date YYYY-MM-DD HH:MM:SS
              modifiedDate:
                type: string
                format: date-time
                description: Date YYYY-MM-DD HH:MM:SS
    CardObject:
      type: object
      properties:
        cards:
          type: array
          items:
            type: object
            properties:
              cardId:
                type: integer
                description: The unique identifier of the card.
              userId:
                type: integer
                description: The unique identifier of the cardholder.
              walletId:
                type: integer
                description: The unique identifier of the Wallet the card is attached to.
              walletCardtransactionId:
                type: integer
              mccRestrictionGroupId:
                type: integer
                description: |
                  The merchant category restriction group (`mccRestrictionGroup`) applied to the card.
              merchantRestrictionGroupId:
                type: integer
                description: |
                  The merchant Id restriction group (`merchantRestrictionGroupId`) applied to the card.
              countryRestrictionGroupId:
                type: integer
                description: |
                  The country restriction group (`countryRestrictionGroupId`) applied to the card.
              publicToken:
                type: string
              cardTag:
                type: string
              statusCode:
                type: string
                enum:
                  - UNLOCK
                  - LOCK
                  - LOST
                  - STOLEN
                  - DESTROYED
                  - LOCK_INTERNAL
                  - EXPIRED
              isLive:
                type: integer
              pinTryExceeds:
                type: integer
              maskedPan:
                type: string
              embossedName:
                type: string
              expiryDate:
                type: string
                description: | 
                  The date on which the card expires. 
                  The [`card.expiryalert`](/guide/cards/events.md#structure-of-a-card-expiryalert) webhook is sent a month before the `expiryDate` for you to anticipate [Renewal](/guide/cards/renewal.html).
                  Format: YYYY-MM-DD 
              CVV:
                type: string
              startDate:
                type: string
              endDate:
                type: string
              countryCode:
                type: string
                description: Inherited from the cardholder's country.
              currencyCode:
                type: string
              lang:
                type: string
                description: Inherited from the cardholder's language.
              deliveryTitle:
                type: string
              deliveryLastname:
                type: string
              deliveryFirstname:
                type: string
              deliveryAddress1:
                type: string
              deliveryAddress2:
                type: string
              deliveryAddress3:
                type: string
              deliveryCity:
                type: string
              deliveryPostcode:
                type: string
              deliveryCountry:
                type: string
              mobileSent:
                type: string
                description: Inherited from the cardholder' phone.
              limitsGroup:
                type: string
              permsGroup:
                type: string
              cardDesign:
                type: string
              virtualConverted:
                type: integer
                description: |
                  Whether or not the card is a Virtual Card that has been converted into a Physical Card. Values can be:
                  * `1` – Physical card converted from a virtual card
                  * `0` – Not converted, virtual card only
                enum: [0, 1]
              physical:
                type: integer
              optionAtm:
                type: integer
              optionForeign:
                type: integer
              optionOnline:
                type: integer
              optionNfc:
                type: integer
              limitAtmYear:
                type: integer
              limitAtmMonth:
                type: integer
              limitAtmWeek:
                type: integer
              limitAtmDay:
                type: integer
              limitAtmAll:
                type: integer
              limitPaymentYear:
                type: integer
              limitPaymentMonth:
                type: integer
              limitPaymentWeek:
                type: integer
              limitPaymentDay:
                type: integer
              limitPaymentAll:
                type: integer
              paymentDailyLimit:
                type: number
                format: float
              totalAtmYear:
                type: integer
              totalAtmMonth:
                type: integer
              totalAtmWeek:
                type: integer
              totalAtmDay:
                type: integer
              totalAtmAll:
                type: integer
              totalPaymentYear:
                type: integer
              totalPaymentMonth:
                type: integer
              totalPaymentWeek:
                type: integer
              totalPaymentDay:
                type: integer
              totalPaymentAll:
                type: integer
              createdBy:
                type: integer
              createdDate:
                type: string
                description: Date YYYY-MM-DD HH:MM:SS
              modifiedBy:
                type: integer
              modifiedDate:
                type: string
                description: Date YYYY-MM-DD HH:MM:SS
              renewalType:
                type: string
                description: |
                  Indicates how the Card is to be renewed. `A` for automatic renewal, `N` for non-automatic renewal.
                enum: ["A", "N"]
              renewalDate:
                type: string
                description: Date on which the card was renewed (field populated for the original card only). YYYY-MM-DD.
              originalCardId:
                type: integer
                description: The unique identifier of the original Card (field populated for renewed cards only).
              totalRows:
                type: integer
              designCode:
                type: string
              cardLanguages:
                type: string
              eventName:
                type: string
                description: Name of the Wallet, inherited from the wallet the card is attached to.
              eventAlias:
                type: string
                description: Description of the Wallet, inherited from the wallet the card is attached to.
              restrictionGroupLimits:
                minItems: 1
                type: array
                items:
                  type: object
                  properties:
                    paymentDailyLimit:
                      minimum: 0
                      exclusiveMinimum: true
                      type: number
                      format: float
                    mccRestrictionGroups:
                      minimum: 0
                      exclusiveMinimum: true
                      type: integer
                      format: int64
                    countryRestrictionGroups:
                      minimum: 0
                      exclusiveMinimum: true
                      type: integer
                      format: int64
                    merchantIdRestrictionGroups:
                      minimum: 0
                      exclusiveMinimum: true
                      type: integer
                      format: int64
                    required:
                      type: object
              cancellationNumber:
                type: string
                description: | 
                  Number generated when the card `statusCode` is set to `STOLEN` or `LOST`.
              metadata:
                type: string
    MerchantIdGroupObject:
      type: object
      properties:
        merchantIdRestrictionGroups:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                description: The unique identifier of the Merchant ID restriction group.
              name:
                type: string
                description: The name of the Merchant ID restriction group.
              isWhitelist:
                type: boolean
                description: |
                  Indicates the kind of restriction: 
                  * `true` (default) – Allows only a specified list of merchant ids(whitelist)
                  * `false` – Allows all merchant ids except the specified list (blacklist)
              merchants:
                type: array
                description: List of Merchant IDs (each item is a string).
                items:
                  type: string
              status:
                type: string
                description: The status of the Merchant ID restriction group.
                enum:
                  - PENDING
                  - CANCELED
                  - VALIDATED
              startDate:
                type: string
                description: |
                  The date and time at which the restriction starts. Format: YYYY-MM-DD HH:MM:SS
              createdDate:
                type: string
                description: |
                  The date and time at which the restriction group was created. Format: YYYY-MM-DD HH:MM:SS
    ScaWalletObject:
      type: object
      properties:
        scaWallets:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                format: int64
              status:
                type: string
                enum:
                  - CREATING
                  - CREATED
                  - INITIALIZING
                  - ACTIVE
                  - DELETED
                nullable: true
              subStatus:
                type: string
                enum:
                  - CREATING_IN_PROGRESS
                  - CREATED_BLOCKED
                  - CREATED_READY
                  - INITIALIZING_MOBILE
                  - ACTIVATED_LOGGED_IN
                  - ACTIVATED_LOGGED_OUT
                  - DELETED_BY_ISSUER
                  - DELETED_UNINSTALLED
                nullable: true
              passcodeStatus:
                type: string
                enum:
                  - SET
                  - NOT_SET
                  - TO_BE_CHANGED
                  - NONE
                nullable: true
              locked:
                type: boolean
                nullable: true
              lockReasons:
                type: array
                items:
                  type: string
                  enum:
                    - ISSUER
                    - LOST_DEVICE
                    - STOLEN_DEVICE
                    - FRAUDULENT_USE_SUSPECTED_BY_ISSUER
                    - FRAUDULENT_USE_SUSPECTED_BY_CLIENT
                    - TERMINATE_SERVICE
                    - INCIDENT
                nullable: true
              lockMessage:
                type: string
                nullable: true
              settingsProfile:
                type: string
                nullable: true
              mobileWallet:
                type: object
                properties:
                  appBuildNumber:
                    type: string
                  sdkVersion:
                    type: string
                  os:
                    type: string
                  osVersion:
                    type: string
                  brand:
                    type: string
                  productModel:
                    type: string
                  deviceId:
                    type: string
                  deviceIdType:
                    type: string
                  productFingerprint:
                    type: string
                  secretFingerprint:
                    type: string
                  root:
                    type: string
                  pushMessagingId:
                    type: string
                  pushMessagingProvider:
                    type: string
                  mobileUpdateDate:
                    type: string
                  lastEligibilityCheck:
                    type: string
                    format: date-time
                  nfc:
                    type: boolean
                  emulator:
                    type: boolean
                  appleTeamId:
                    type: string
              activationCode:
                type: string
              creationDate:
                type: string
                format: date-time
                nullable: true
                example: "2024-05-30T16:09:22+02:00"
              deletionDate:
                type: string
                format: date-time
                nullable: true
              activationCodeExpiryDate:
                type: string
                format: date-time
                nullable: true
                example: "2024-05-30T16:29:22+02:00"
              authenticationMethods:
                type: array
                items:
                  type: object
                nullable: true
              invalidActivationAttempts:
                type: string
                nullable: true
              userId:
                type: string
                nullable: true
              scaWalletTag:
                type: string
                nullable: true
              clientId:
                type: string
              activationDate:
                type: string
                nullable: true
    SupportUserObject:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        password:
          type: string
        samlKey:
          type: string
          nullable: true
        keyPairId:
          type: string
        clients:
          type: array
          items:
            type: object
            properties:
              clientId:
                type: string
              scopes:
                type: array
                items:
                  type: string
                  enum: ["read_all","read_write","read_only","admin","support_user_management","legal"]
              lastLoginAt:
                type: string
                format: date
              acceptedAt:
                type: string
                format: date
        wrongPwdAttempts:
          type: integer
        metadata:
          type: object
          nullable: true
    TaxResidenceObject:
      type: object
      properties:
        taxResidences:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                description: The unique identifier of the Tax Residence.
              userId:
                type: integer
                description: The unique identifier of the User.
              country:
                type: string
                description: The country code for the country of Tax Residence.
              taxPayerId:
                type: string
                description: The Tax Identification Number (TIN).
              liabilityWaiver:
                type: boolean
                description: The waiver exempting Treezor from liability in case of a missing TIN.
              createdDate:
                type: string
                description: The date of creation of the Tax Residence object.
              lastUpdate:
                type: string
                description: The date and time at which the Tax Residence has been updated.
              deletedDate:
                type: string
                description: The date and time at which the Tax Residence has been deleted.
              isDeleted:
                type: boolean
                description: Whether or not the Tax Residence object was deleted.
    TransferObject:
      type: object
      properties:
        transfers:
          type: array
          items:
            type: object
            properties:
              transferId:
                type: integer
                description: The unique identifier of the Transfer.
              transferStatus:
                type: string
                description: The status of the Transfer.
                enum:
                  - PENDING
                  - CANCELED
                  - VALIDATED
              transferTag:
                type: string
              walletId:
                type: integer
                description: The unique identifier of the debited Wallet.
              walletTypeId:
                type: integer
                description: |
                  The type of the debited Wallet:

                  * `9` – Electronic Money Wallet 
                  * `10` – Payment Account Wallet
                  * `13` – Mirror Wallet
              beneficiaryWalletId:
                type: integer
                description: The unique identifier of the credited Wallet.
              beneficiaryWalletTypeId:
                type: integer
                description: |
                  The type of the beneficiary Wallet:

                  * `9` – Electronic Money Wallet 
                  * `10` – Payment Account Wallet
                  * `13` – Mirror Wallet
              transferDate:
                type: string
                description: | 
                  The date of the Transfer. Format: YYYY-MM-DD
              walletEventName:
                type: string
                description: The name of the debited Wallet.
              walletAlias:
                type: string
                deprecated: true
              beneficiaryWalletEventName:
                type: string
                description: The name of the credited Wallet.
              beneficiaryWalletAlias:
                type: string
                deprecated: true
              amount:
                type: string
                description: The amount of the transfer.
              currency:
                type: string
                description: The currency of the transfer.
              label:
                type: string
              transferTypeId:
                type: integer
                description: |
                  The type of transfer:
                  * `1` – Wallet to wallet 
                  * `2` – Card transaction
                  * `3` – Client fees
                  * `4` – Credit note
              createdDate:
                type: string
                description: |
                  The date and time at which the transfer is created. Format: YYYY-MM-DD HH:MM:SS
              modifiedDate:
                type: string
                description: | 
                  The date and time at which the transfer is updated. Format: YYYY-MM-DD HH:MM:SS
              totalRows:
                type: integer
              foreignId:
                type: string
              partnerFee:
                type: string
              codeStatus:
                type: string
              informationStatu:
                type: string
    UserObject:
      type: object
      properties:
        users:
          type: array
          items:
            type: object
            properties:
              userId:
                type: integer
                description: The unique identifier of the User.
              userStatus:
                type: string
                enum:
                  - PENDING
                  - CANCELED
                  - VALIDATED
              userTag:
                type: string
              parentUserId:
                type: integer
              parentType:
                type: string
                enum:
                  - shareholder
                  - employee
                  - leader
              controllingPersonType:
                type: integer
              employeeType:
                type: integer
              specifiedUSPerson:
                type: integer
              title:
                type: string
                enum:
                  - M
                  - MME
                  - MLLE
              firstname:
                type: string
              lastname:
                type: string
              middleNames:
                type: string
              birthday:
                type: string
              email:
                type: string
              address1:
                type: string
              address2:
                type: string
              address3:
                type: string
              postcode:
                type: string
              city:
                type: string
              state:
                type: string
              country:
                type: string
                format: ISO 3166-1 alpha-2
              countryName:
                type: string
              distributionCountry:
                type: string
                description: | 
                  The country in which the end user is using your services.
                format: ISO 3166-1 alpha-2
                enum:
                  - FR
                  - ES
                  - IT
                  - DE
                  - BE
                  - NL
              secondaryAddress1:
                type: string
              secondaryAddress2:
                type: string
              secondaryAddress3:
                type: string
              secondaryPostcode:
                type: string
              secondaryCity:
                type: string
              secondaryState:
                type: string
              secondaryCountry:
                type: string
                description: Format ISO 3166-1 alpha-2
              phone:
                type: string
              mobile:
                type: string
              nationality:
                type: string
                description: Format ISO 3166-1 alpha-2
              nationalityOther:
                type: string
                description: Format ISO 3166-1 alpha-2
              placeOfBirth:
                type: string
              birthCountry:
                type: string
                description: Format ISO 3166-1 alpha-2
              occupation:
                type: string
                deprecated: true
                description: deprecated
              incomeRange:
                type: string
              legalName:
                type: string
              legalNameEmbossed:
                type: string
              legalRegistrationNumber:
                type: string
              legalTvaNumber:
                type: string
              legalRegistrationDate:
                type: string
                description: Date YYYY-MM-DD
              legalForm:
                type: string
              legalShareCapital:
                type: integer
              legalSector:
                type: string
              legalAnnualTurnOver:
                type: string
              legalNetIncomeRange:
                type: string
              legalNumberOfEmployeeRange:
                type: string
              effectiveBeneficiary:
                type: integer
              kycLevel:
                type: integer
                description: |
                  * `0` – NONE
                  * `1` – LIGHT
                  * `2` – REGULAR
                  * `3` – STRONG
                  * `4` – REFUSED
                  * `5` – PREVALIDATED
                  * `6` – ENHANCED
                enum: [0, 1, 2, 3, 4, 5, 6]
              kycReview:
                type: integer
                description: |
                  * `0` – NONE
                  * `1` – PENDING
                  * `2` – VALIDATED
                  * `3` – REFUSED
                  * `4` – INVESTIGATING (deprecated)
                  * `5` – CLOSED (deprecated)
                  * `6` – REVIEW_OPEN
                  * `7` – REVIEW_PENDING
                enum: [0, 1, 2, 3, 6, 7]
              kycReviewComment:
                type: string
                description: |
                  A comment set by Treezor upon [KYC review](/guide/user-verification/introduction.html). It concatenates information for each KYC Review update, with the date, the `kycReview` and `kycLevel` values, and the comment from Treezor.
              isFreezed:
                type: integer
                deprecated: true
                description: deprecated
              isFrozen:
                type: integer
              language:
                type: string
              optInMailing:
                type: integer
              sepaCreditorIdentifier:
                type: string
                description: |
                  The 13-character long [SEPA Creditor Identifier](/guide/overview/glossary.html#sepa-creditor-identifier-sci) of the User.
                readOnly: true
              taxNumber:
                type: string
                deprecated: true
              taxResidence:
                type: string
                deprecated: true
              position:
                type: string
              personalAssets:
                type: string
              activityOutsideEu:
                type: integer
                description:   Whether the entity and its business units, subsidiaries, and joint ventures have a commercial activity outside of the European Union.
              economicSanctions:
                type: integer
                description: Whether the entity, its subsidiaries, entities, employees, directors, beneficial owners, or joint ventures are subject to Economic Sanctions.
              residentCountriesSanctions:
                type: integer
                description: Whether the entity, its subsidiaries, or joint ventures, located within or operating from any countries or territories are subject to Comprehensive Sanctions.
              involvedSanctions:
                type: integer
                description: |
                  Whether the entity, its subsidiaries, or joint ventures, are engaged in transactions, investments, business, or other dealings that directly or indirectly involve or benefit:
                  * Any countries or territories subject to Comprehensive Sanctions, or
                  * Any person or entity which is the target of any Sanctions (“Sanctioned Targets”).
              entitySanctionsQuestionnaire:
                  type: integer
                  description: |
                    Defines the scope to which the `activityOutsideEu` field applies.
                  enum: [0, 1, 2, 3, 4]
              sanctionsQuestionnaireDate:
                type: string
                description: Date YYYY-MM-DD HH:MM:SS
              timezone:
                type: string
              occupationType:
                type: string
                description: |
                  The type of occupation of the user.
                enum:
                  - self_employed
                  - public_sector_employees
                  - private_sector_employees
                  - retired_people_and_students
                  - without_any_professional_activity
              sourceOfFunds:
                type: string
                description: The source of funds for opening an account for a company or self-employed person
                enum: 
                  - donation
                  - inheritance
                  - loan 
                  - lottery
                  - pension
                  - proceeds_from_investment
                  - proceeds_from_sale
                  - salary
                  - savings
              legalSectorType:
                type: string
                description: | 
                  Qualify the type of data in the `legalSector` field 
                    * If it is set to NACE the legalSector needs to be in a NACE format (4 digits). 
                    * If it is set to NAF (or not set at all) the legalSector needs to be in a NAF format (4 digits followed by a capital letter).
                enum:
                  - NAF
                  - NACE
              isOnStockExchange:
                type: integer
                description: |
                  The user is a corporation and is quoted on an organized stock exchange.
                    * `0` – No
                    * `1` – Yes
              createdDate:
                type: string
                description: Date YYYY-MM-DD HH:MM:SS
              modifiedDate:
                type: string
                description: Date YYYY-MM-DD HH:MM:SS
              walletCount:
                type: integer
              payinCount:
                type: integer
              totalRows:
                type: integer
    VirtualIbanObject:
      type: object
      properties:
        virtualibans:
          type: array
          items:
            type: object
            properties:
              virtualibanId:
                type: integer
              walletId:
                type: integer
              typeId:
                type: integer
              tag:
                type: string
              reference: 
                type: string
              validFrom:
                type: string
              validTo:
                type: string
              maxUsage:
                type: integer
              maxAmount:
                type: string
                format: float
              iban:
                type: string
              createdDate:
                type: string
                format: YYYY-MM-DD HH:MM:SS
              numberOfTransactions:
                type: integer
              cumulatedAmount:
                type: string
                format: float
              updatedDate:
                type: string
                format: YYYY-MM-DD HH:MM:SS      
    WalletObject:
      type: object
      properties:
        wallets:
          type: array
          items:
            type: object
            properties:
              walletId:
                type: integer
                description: The unique identifier of the Wallet.
              walletTypeId:
                type: integer
                description: |
                  The type of Wallet. The following values are allowed:
                  * `9` – Electronic Money Wallet
                  * `10` – Payment Account Wallet
                  * `13` – Mirror Wallet
                  <br> Other types are available but can only be set by Treezor. Learn more in the [Wallet Types](/guide/wallets/introduction.html#types-of-wallets) documentation.
              walletStatus:
                type: string
                description: The status of the Wallet.
                enum:
                  - PENDING
                  - CANCELED
                  - VALIDATED
              codeStatus:
                type: integer
              informationStatus:
                type: string
              walletTag:
                type: string
                description: Custom attribute to use as you see fit.
              userId:
                type: integer
                description: The unique identifier of the User owning the Wallet.
              userLastname:
                type: string
              userFirstname:
                type: string
              jointUserId:
                type: integer
              tariffId:
                type: integer
              eventName:
                type: string
              eventAlias:
                type: string
                deprecated: true
              eventDate:
                type: string
                description: Date YYYY-MM-DD
                deprecated: true
              eventMessage:
                type: string
              eventPayinStartDate:
                type: string
                description: Date YYYY-MM-DD
                deprecated: true
              eventPayinEndDate:
                type: string
                description: Date YYYY-MM-DD
                deprecated: true
              contractSigned:
                type: integer
              bic:
                type: string
              iban:
                type: string
              urlImage:
                type: string
              currency:
                type: string
              createdDate:
                type: string
                description: Date YYYY-MM-DD HH:MM:SS
              modifiedDate:
                type: string
                description: Date YYYY-MM-DD HH:MM:SS
              payinCount:
                type: integer
              payoutCount:
                type: integer
              transferCount:
                type: integer
              solde:
                type: integer
                format: decimal
              authorizedBalance:
                type: integer
                format: decimal
              totalRows:
                type: integer
tags:
  - name: Account Details
    description: |
      Related articles: [Account Details](/guide/wallets/account-details.html) | [Wallets](/guide/wallets/introduction.html)
  - name: Account Statements
    description: |
      Related articles: [Account Statements](/guide/wallets/account-statements.html) | [Wallets](/guide/wallets/introduction.html)
  - name: Acquiring (Card Topups)
    description: | 
      Related articles: [Card Acquiring](/guide/acquiring/introduction.html)
  - name: Acquiring (Simulation)
    description: | 
      Related articles: [Card Acquiring](/guide/acquiring/introduction.html) | [Emulation](/guide/acquiring/faking-operations.html)
  # - name: Aggregation
  #   description: Aggregation
  - name: API Templates
    description: |
      Related articles: [Templates](/guide/api-basics/templates.html)
  - name: Authentication
    description: |
      Related articles: [Authentication](/guide/api-basics/authentication.html)
  - name: Balances
    description: |
      Related articles: [Balances](/guide/wallets/balances.html) | [Wallets](/guide/wallets/introduction.html)
  - name: Beneficiaries
    description: |
      Related articles: [Beneficiaries](/guide/transfers/beneficiaries.html) | [SEPA Transfers](/guide/transfers/introduction.html)
  - name: Businesses
    description: |
      Related articles: [Checking for veracity](/guide/users/legal-entity.html#checking-for-veracity) | [Legal Entities](/guide/users/legal-entity.html)
  - name: Cards
    description: |
      Related articles: [Cards](/guide/cards/introduction.html) | [Creation](/guide/cards/creation.html) | [Modifications](/guide/cards/modification.html) 
  - name: Cards Bulk Creation
    description: |
      Related articles: [Bulk Creation](/guide/cards/creation.html#bulk-creation) | [Cards](/guide/cards/introduction.html)
  - name: Cards Digitalization
    description: |
      Related articles: [X-Pay](/guide/cards/x-pay-google-apple.html) | [Cards](/guide/cards/introduction.html)
  - name: Card 3DSecure Enrollment (SCA)
    description: |
      Related articles: [Card enrollment](/guide/strong-customer-authentication/cards-enrollment.html) | [SCA](/guide/strong-customer-authentication/introduction.html)
  - name: Card Rulesets (MDC)
    description: |
      Related articles: [Multi-Criteria Dynamic Card](/guide/cards/transactions-rules-engine.html)
  - name: Card Transactions
    description: |
      Related articles: [Transactions](/guide/cards/transactions.html) | [Cards](/guide/cards/introduction.html)
  - name: Country Restriction Groups
    description: |
      Related articles: [List-based restrictions](/guide/cards/modification.html#list-based-restrictions) | [Cards](/guide/cards/introduction.html)
  - name: Digitalized Cards
    description: |
      Related articles: [X-Pay](/guide/cards/x-pay-google-apple.html) | [Cards](/guide/cards/introduction.html)
  - name: Issuer Initiated Digitization Data
    description: |
      Related articles: [X-Pay](/guide/cards/x-pay-google-apple.html) | [Cards](/guide/cards/introduction.html)
  - name: Mandates
    description: |
      Related articles: [Mandates](/guide/transfers/mandates.html) | [SEPA Direct Debit](/guide/transfers/direct-debit.html#emitted-direct-debits-sdde)
  - name: Mass Payouts
    description: |
      Related articles: [Mass Payout](/guide/transfers/credit-transfer.html#mass-scte-mass-payout) | [SEPA Transfers](/guide/transfers/introduction.html)
  - name: MCC Restriction Groups
    description: |
      Related articles: [List-based restrictions](/guide/cards/modification.html#list-based-restrictions) | [Cards](/guide/cards/introduction.html)
  - name: Merchant ID Restriction Groups
    description: |
      Related articles: [List-based restrictions](/guide/cards/modification.html#list-based-restrictions) | [Cards](/guide/cards/introduction.html)
  - name: Merchant ID Metadata
    description: |
      Related articles: [MID Metadata](/guide/cards/mid-metadata.html) | [Cards](/guide/cards/introduction.html)
  - name: Operations
    description: |
      Related articles: [Operations](/guide/operations/introduction.html)
  - name: Payins
    description: |
      Related articles: [SCTR](/guide/transfers/credit-transfer.html#received-credit-transfers-sctr) | [SDDE](/guide/transfers/direct-debit.html#emitted-direct-debits-sdde) | [Card top-up](/guide/acquiring/introduction.html) | [Check](/guide/cheques/introduction.html)
  - name: Payin Refunds
    description: |
      Related articles: [SCTR Recalls](/transfers/sepa-recalls.html#receiving-sctr-recalls)
  - name: Payouts
    description: |
      Related articles: [Card Transactions](/guide/cards/transactions.html) | [SCTE](/guide/transfers/credit-transfer.html#emitted-credit-transfers-scte) | [SDDR](/guide/transfers/direct-debit.html#received-direct-debits-sddr)
  - name: Payout Refunds
    description: |
      Related articles: [SCTE Inst Recalls](/guide/transfers/sepa-recalls.html#emitting-scte-inst-recalls)
  - name: Recalls
    description: |
      Related articles: [Recalls & RROs](/guide/transfers/sepa-recalls.html)
  - name: Scheduled Payments
    description: |
      Related articles: [Scheduled Payments](/guide/transfers/scheduled-payments.html) | [SCTE](/guide/transfers/credit-transfer.html#emitted-credit-transfers-scte) | [Wallet-to-Wallet](/guide/wallets/wallet-to-wallet.html)
  - name: SCA External Operations
    description: |
      Related articles: [SCA External Operations](/guide/strong-customer-authentication/endpoints-and-data.html#declaring-sca-external-operations) | [SCA](/guide/strong-customer-authentication/introduction.html)
  - name: SCA Wallets
    description: |
      Related articles: [SCA Wallets](/guide/strong-customer-authentication/sca-wallets.html) | [SCA](/guide/strong-customer-authentication/introduction.html)
  - name: Simulation
  - name: Support Users
    description: |
      Related articles: [Support Users](/guide/users/support.html) | [Dashboard Users](/guide/dashboard/dashboard-users.html)
  - name: Transactions
    description: |
      Related articles: [Transactions](/guide/wallets/transactions.html) | [Wallets](/guide/wallets/introduction.html)
  - name: Transfers
    description: |
      Related articles: [Wallet-to-Wallet](/guide/wallets/wallet-to-wallet.html) | [Wallets](/guide/wallets/introduction.html)
  - name: User Document Pre-review
    description: |
      Related articles: [Document Pre-review](/guide/user-verification/documents-prereview.html) | [User verification](/guide/user-verification/introduction.html)
  - name: User Documents
    description: |
      Related articles: [Documents](/guide/user-verification/documents.html) | [User verification](/guide/user-verification/introduction.html)
  - name: User KYC Review
    description: |
      Related articles: [KYC Request](/guide/user-verification/kyc-request.html) | [User verification](/guide/user-verification/introduction.html)
  - name: User Live Verification
    description: |
      Related articles: [Live verification](/guide/user-verification/live-verification.html) | [User verification](/guide/user-verification/introduction.html)
  - name: User Onboarding
    description: |
      Related articles: [Onboarding](/guide/users/onboarding.html) | [Users](/guide/users/introduction.html)
  # - name: Connect Users Password
  - name: User Tax Residences
    description: |
      Related articles: [Tax residence](/guide/user-verification/tax-residence.html) | [User verification](/guide/user-verification/introduction.html)
  - name: User QES Verification
    description: |
      Related articles: [Qualified eSignature](/guide/user-verification/qes.html) | [User verification](/guide/user-verification/introduction.html)
  - name: Users
    description: |
      Related articles: [Physical Users](/guide/users/physical.html) | [Legal Entities](/guide/users/legal-entity.html) | [Users](https://docs.treezor.com/guide/users/introduction.html)
  - name: Virtual IBANs
    description: |
      Related articles: [IBAN](/guide/wallets/iban.html) | [Wallets](/guide/wallets/introduction.html)
  - name: Wallets
    description: |
      Related articles: [Wallets](/guide/wallets/introduction.html)
